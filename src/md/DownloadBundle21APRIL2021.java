package md;

import Parsehtm.Parsehtm;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.pdfbox.text.PDFTextStripperByArea;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.InetAddress;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

public class DownloadBundle21APRIL2021 extends HttpServlet {
    private static boolean ReadPdfGetData(String FileName, String Path) {
        try (PDDocument document = PDDocument.load(new File(Path + "/" + FileName))) {
            document.getClass();
            if (document.isEncrypted())
                return false;
            PDFTextStripperByArea stripper = new PDFTextStripperByArea();
            stripper.setSortByPosition(true);
            PDFTextStripper tStripper = new PDFTextStripper();
            tStripper.getStartPage();
            String pdfFileInText = tStripper.getText(document);
            String[] lines = pdfFileInText.split("\\r?\\n"), array = lines, split = array;
            for (String line : array) {
                if (line.toUpperCase().trim().contains("SIGNATURE")) ;
            }
        } catch (Exception ee) {
            System.out.println(ee.getLocalizedMessage());
            return false;
        }
        return true;
    }

    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        handleRequest(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        handleRequest(request, response);
    }

    public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Connection conn = null;
        ResultSet rset = null;
        Statement stmt = null;
        String Query = "";
        String Database = "";
        String DirectoryName = "";
        String UserId = "";
        String Zone = "";
        String Passwd = "";
        String ActionID = request.getParameter("ActionID").trim();
        response.setContentType("text/html");
        PrintWriter out = new PrintWriter((OutputStream) response.getOutputStream());
        Services supp = new Services();
        ServletContext context = null;
        context = getServletContext();
        conn = Services.getMysqlConn(context);
        int ClientId = 0;
        try {
            Cookie[] cookies = request.getCookies();
            Zone = UserId = Passwd = "";
            int checkCookie = 0;
            for (int coky = 0; coky < cookies.length; coky++) {
                String cName = cookies[coky].getName();
                String cValue = cookies[coky].getValue();
                if (cName.equals("UserId"))
                    UserId = cValue;
            }
            Query = "SELECT ClientId FROM oe.sysusers WHERE ltrim(rtrim(UPPER(UserId))) = ltrim(rtrim(UPPER('" + UserId + "')))";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next())
                ClientId = rset.getInt(1);
            rset.close();
            stmt.close();
            Query = "Select dbname, IFNULL(DirectoryName,'') from oe.clients where Id = " + ClientId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                Database = rset.getString(1);
                DirectoryName = rset.getString(2);
            }
            rset.close();
            stmt.close();
        } catch (Exception e) {
            out.println(e.getMessage());
        }
        if (ActionID.equals("GETINPUT")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Orange Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUT(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTSAustin")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "South Austin Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTSAustin(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTSublime")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Sublime Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTSublime(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTVictoria")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Victoria Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTVictoria(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTOddasa")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Odessa Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTOddasa(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTConcho")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Concho Valley Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTConcho(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTLongView")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Excel ER LongView Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTLongView(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTNacogdoches")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Excel ER Nacogdoches Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTNacogdoches(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTFrontLine")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Front Line ER Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTFrontLine(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("GETINPUTERDallas")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Victoria Admission Bundle", "Download or View Admission Bundle", ClientId);
            GETINPUTERDallas(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("SignPdf")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Victoria Admission Bundle", "Download or View Admission Bundle", ClientId);
            SignPdf(request, out, conn, context, response, UserId, Database, ClientId, DirectoryName);
        } else if (ActionID.equals("download_direct")) {
            supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "GetPDF in Iframe", "DownloadPDF in IFRAME", ClientId);
            download_direct(request, response, out, conn);
        }
        try {
            conn.close();
        } catch (Exception exception) {
        }
        out.flush();
        out.close();
    }

    void GETINPUT(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        String State = "";
        String Country = "";
        String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a workercomp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        String CountryER = "";
        String ZipCodeER = "";
        String DateConcent = "";
        String WitnessConcent = "";
        String PatientBehalfConcent = "";
        String RelativeSignConcent = "";
        String DateConcent2 = "";
        String WitnessConcent2 = "";
        String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        String Work = "";
        String Work_text = "";
        String Physician = "";
        String Physician_text = "";
        String Other = "";
        String Other_text = "";
        int SelfPayChk = 0;
        int VerifyChkBox = 0;
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
                Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next())
                    DoctorName = rset.getString(1);
                rset.close();
                stmt.close();
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            if (SelfPayChk == 1) {
                Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WorkersCompPolicy = rset.getInt(1);
                    MotorVehAccident = rset.getInt(2);
                    if (WorkersCompPolicy == 0) {
                        WorkersCompPolicyString = "Is this a workercomp policy: NO";
                    } else {
                        WorkersCompPolicyString = "Is this a workercomp policy: YES";
                    }
                    if (MotorVehAccident == 0) {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : NO";
                    } else {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES";
                    }
                    PriInsurance = rset.getString(3);
                    MemId = rset.getString(4);
                    GrpNumber = rset.getString(5);
                    PriInsuranceName = rset.getString(6);
                    AddressIfDifferent = rset.getString(7);
                    PrimaryDOB = rset.getString(8);
                    PrimarySSN = rset.getString(9);
                    PatientRelationtoPrimary = rset.getString(10);
                    PrimaryOccupation = rset.getString(11);
                    PrimaryEmployer = rset.getString(12);
                    EmployerAddress = rset.getString(13);
                    EmployerPhone = rset.getString(14);
                    SecondryInsurance = rset.getString(15);
                    SubscriberName = rset.getString(16);
                    SubscriberDOB = rset.getString(17);
                    PatientRelationshiptoSecondry = rset.getString(18);
                    MemberID_2 = rset.getString(19);
                    GroupNumber_2 = rset.getString(20);
                }
                rset.close();
                stmt.close();
                if (!PriInsuranceName.equals("-") && !PriInsuranceName.equals("") && !PriInsuranceName.equals("1")) {
                    Query = " Select PayerName from " + Database + ".ProfessionalPayers where Id =  " + PriInsuranceName;
                    System.out.println(Query);
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next())
                        PriInsuranceName = rset.getString(1);
                    rset.close();
                    stmt.close();
                }
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                    continue;
                }
                Other_text = rset.getString(25);
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            inputFilePath = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/Admin.pdf";
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf";
            OutputStream fos = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader = new PdfReader(inputFilePath);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            GenerateBarCode barCode = new GenerateBarCode();
            String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
            Image image = Image.getInstance(BarCodeFilePath);
            image.scaleAbsolute(150.0F, 30.0F);
            for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 535.0F);
                    pdfContentByte.showText(ReturnPatient);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 520.0F);
                    pdfContentByte.showText(Google);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 500.0F);
                    pdfContentByte.showText(MapSearch);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 485.0F);
                    pdfContentByte.showText(Billboard);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 465.0F);
                    pdfContentByte.showText(OnlineReview);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 450.0F);
                    pdfContentByte.showText(TV);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 435.0F);
                    pdfContentByte.showText(Website);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 415.0F);
                    pdfContentByte.showText(BuildingSignDriveBy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 398.0F);
                    pdfContentByte.showText(Facebook);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 380.0F);
                    pdfContentByte.showText(School);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 380.0F);
                    pdfContentByte.showText(School_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 365.0F);
                    pdfContentByte.showText(Twitter);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 348.0F);
                    pdfContentByte.showText(Magazine);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 348.0F);
                    pdfContentByte.showText(Magazine_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 330.0F);
                    pdfContentByte.showText(Newspaper);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 330.0F);
                    pdfContentByte.showText(Newspaper_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 312.0F);
                    pdfContentByte.showText(FamilyFriend);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 312.0F);
                    pdfContentByte.showText(FamilyFriend_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 295.0F);
                    pdfContentByte.showText(UrgentCare);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 295.0F);
                    pdfContentByte.showText(UrgentCare_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 278.0F);
                    pdfContentByte.showText(CommunityEvent);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 278.0F);
                    pdfContentByte.showText(CommunityEvent_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 225.0F);
                    pdfContentByte.showText(Work_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 210.0F);
                    pdfContentByte.showText(Physician_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 195.0F);
                    pdfContentByte.showText(Other_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 85.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 85.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setTextMatrix(105.0F, 640.0F);
                    pdfContentByte.showText(LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 640.0F);
                    pdfContentByte.showText(FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 640.0F);
                    pdfContentByte.showText(MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 605.0F);
                    pdfContentByte.showText("Title: " + Title);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 600.0F);
                    pdfContentByte.showText(MaritalStatus);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 600.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 600.0F);
                    pdfContentByte.showText(Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510.0F, 600.0F);
                    pdfContentByte.showText(gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 570.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 570.0F);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 570.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 540.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 540.0F);
                    pdfContentByte.showText(Occupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 540.0F);
                    pdfContentByte.showText(Employer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 540.0F);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 510.0F);
                    pdfContentByte.showText(PriCarePhy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 510.0F);
                    pdfContentByte.showText(Email);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 510.0F);
                    pdfContentByte.showText(ReasonVisit);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 445.0F);
                    pdfContentByte.showText(WorkersCompPolicyString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 445.0F);
                    pdfContentByte.showText(MotorVehAccidentString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 415.0F);
                    if (PriInsuranceName.equals("1")) {
                        pdfContentByte.showText(PriInsurance);
                    } else {
                        pdfContentByte.showText(PriInsuranceName);
                    }
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(280.0F, 415.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 415.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 375.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 375.0F);
                    pdfContentByte.showText(AddressIfDifferent);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 375.0F);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 335.0F);
                    pdfContentByte.showText(PrimaryDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 335.0F);
                    pdfContentByte.showText(PrimarySSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0F, 335.0F);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 335.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 300.0F);
                    pdfContentByte.showText(PrimaryOccupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 300.0F);
                    pdfContentByte.showText(PrimaryEmployer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 300.0F);
                    pdfContentByte.showText(EmployerAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 300.0F);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 275.0F);
                    pdfContentByte.showText(SecondryInsurance);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 275.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 275.0F);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0F, 240.0F);
                    pdfContentByte.showText(PatientRelationshiptoSecondry);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 240.0F);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 240.0F);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 190.0F);
                    pdfContentByte.showText(NextofKinName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 190.0F);
                    pdfContentByte.showText(RelationToPatientER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 190.0F);
                    pdfContentByte.showText(PhoneNumberER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510.0F, 190.0F);
                    pdfContentByte.showText(LeaveMessageERString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 150.0F);
                    pdfContentByte.showText(AddressER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 150.0F);
                    pdfContentByte.showText(CityStateZipER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 75.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 3) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(325.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 130.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 4) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(285.0F, 70.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 5) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 395.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 250.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                }
                if (i == 6) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(95.0F, 585.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0F, 585.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(490.0F, 585.0F);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 560.0F);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 535.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 510.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 385.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 7) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 490.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 465.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 465.0F);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 440.0F);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 440.0F);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 415.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 240.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 170.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 130.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 8) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 650.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 650.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 610.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 610.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 480.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 440.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 440.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 400.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 360.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                }
                if (i == 9) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (i == 10) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (i == 11) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (i == 12) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(123.0F, 638.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(435.0F, 638.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 589.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 580.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(329.0F, 300.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
        } catch (Exception e) {
            out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < (e.getStackTrace()).length; j++)
                str = str + e.getStackTrace()[j] + "<br>";
            out.println(str);
        }
    }

    void GETINPUTVictoria(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        MergePdf mergePdf = new MergePdf();
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        String Path1 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/";
        String Path2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/";
        String ResultPdf = "";
        String Title = "";
        String FirstName = "";
        String LastName = "";
        String MiddleInitial = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String ConfirmEmail = "";
        String MaritalStatus = "";
        String AreaCode = "";
        String PhNumber = "";
        String Address = "";
        String Address2 = "";
        String City = "";
        String State = "";
        String ZipCode = "";
        String Ethnicity = "";
        String Ethnicity_OthersText = "";
        String SSN = "";
        String EmployementChk = "";
        String Employer = "";
        String Occupation = "";
        String EmpContact = "";
        String PrimaryCarePhysicianChk = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String PriCarePhyAddress = "";
        String PriCarePhyAddress2 = "";
        String PriCarePhyCity = "";
        String PriCarePhyState = "";
        String PriCarePhyZipCode = "";
        String PatientMinorChk = "";
        String MFFirstVisit = "";
        String MFReturnPat = "";
        String MFInternetFind = "";
        String Facebook = "";
        String MapSearch = "";
        String GoogleSearch = "";
        String VERWebsite = "";
        String WebsiteAds = "";
        String OnlineReviews = "";
        String Twitter = "";
        String LinkedIn = "";
        String EmailBlast = "";
        String YouTube = "";
        String TV = "";
        String Billboard = "";
        String Radio = "";
        String Brochure = "";
        String DirectMail = "";
        String CitizensDeTar = "";
        String LiveWorkNearby = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String NewspaperMagazine = "";
        String NewspaperMagazine_text = "";
        String School = "";
        String School_text = "";
        String Hotel = "";
        String Hotel_text = "";
        String MFPhysician = "";
        String GuarantorChk = "";
        String Guarantor = "";
        String GuarantorDOB = "";
        String GuarantorSEX = "";
        String GuarantorSSN = "";
        String GuarantorAddress = "";
        String GuarantorPhoneNumber = "";
        String GuarantorEmployer = "";
        String GuarantorEmployerAreaCode = "";
        String GuarantorEmployerPhNumber = "";
        String GuarantorEmployerAddress = "";
        String GuarantorEmployerAddress2 = "";
        String GuarantorEmployerCity = "";
        String GuarantorEmployerState = "";
        String GuarantorEmployerZipCode = "";
        int WorkersCompPolicyChk = 0;
        String WorkCompPolicyStr = "";
        String WCPDateofInjury = "";
        String WCPCaseNo = "";
        String WCPGroupNo = "";
        String WCPMemberId = "";
        String WCPInjuryRelatedAutoMotorAccident = "";
        String WCPInjuryRelatedWorkRelated = "";
        String WCPInjuryRelatedOtherAccident = "";
        String WCPInjuryRelatedNoAccident = "";
        String WCPInjuryOccurVehicle = "";
        String WCPInjuryOccurWork = "";
        String WCPInjuryOccurHome = "";
        String WCPInjuryOccurOther = "";
        String WCPInjuryDescription = "";
        String WCPHRFirstName = "";
        String WCPHRLastName = "";
        String WCPHRAreaCode = "";
        String WCPHRPhoneNumber = "";
        String WCPHRAddress = "";
        String WCPHRAddress2 = "";
        String WCPHRCity = "";
        String WCPHRState = "";
        String WCPHRZipCode = "";
        String WCPPlanName = "";
        String WCPCarrierName = "";
        String WCPPayerAreaCode = "";
        String WCPPayerPhoneNumber = "";
        String WCPCarrierAddress = "";
        String WCPCarrierAddress2 = "";
        String WCPCarrierCity = "";
        String WCPCarrierState = "";
        String WCPCarrierZipCode = "";
        String WCPAdjudicatorFirstName = "";
        String WCPAdjudicatorLastName = "";
        String WCPAdjudicatorAreaCode = "";
        String WCPAdjudicatorPhoneNumber = "";
        String WCPAdjudicatorFaxAreaCode = "";
        String WCPAdjudicatorFaxPhoneNumber = "";
        int MotorVehicleAccidentChk = 0;
        String MotorVehAccidentStr = "";
        String AutoInsuranceInformationChk = "0";
        String AIIDateofAccident = "";
        String AIIAutoClaim = "";
        String AIIAccidentLocationAddress = "";
        String AIIAccidentLocationAddress2 = "";
        String AIIAccidentLocationCity = "";
        String AIIAccidentLocationState = "";
        String AIIAccidentLocationZipCode = "";
        String AIIRoleInAccident = "";
        String AIITypeOfAutoIOnsurancePolicy = "";
        String AIIPrefixforReponsibleParty = "";
        String AIIFirstNameforReponsibleParty = "";
        String AIIMiddleNameforReponsibleParty = "";
        String AIILastNameforReponsibleParty = "";
        String AIISuffixforReponsibleParty = "";
        String AIICarrierResponsibleParty = "";
        String AIICarrierResponsiblePartyAddress = "";
        String AIICarrierResponsiblePartyAddress2 = "";
        String AIICarrierResponsiblePartyCity = "";
        String AIICarrierResponsiblePartyState = "";
        String AIICarrierResponsiblePartyZipCode = "";
        String AIICarrierResponsiblePartyAreaCode = "";
        String AIICarrierResponsiblePartyPhoneNumber = "";
        String AIICarrierResponsiblePartyPolicyNumber = "";
        String AIIResponsiblePartyAutoMakeModel = "";
        String AIIResponsiblePartyLicensePlate = "";
        String AIIFirstNameOfYourPolicyHolder = "";
        String AIILastNameOfYourPolicyHolder = "";
        String AIINameAutoInsuranceOfYourVehicle = "";
        String AIIYourInsuranceAddress = "";
        String AIIYourInsuranceAddress2 = "";
        String AIIYourInsuranceCity = "";
        String AIIYourInsuranceState = "";
        String AIIYourInsuranceZipCode = "";
        String AIIYourInsuranceAreaCode = "";
        String AIIYourInsurancePhoneNumber = "";
        String AIIYourInsurancePolicyNo = "";
        String AIIYourLicensePlate = "";
        String AIIYourCarMakeModelYear = "";
        int HealthInsuranceChk = 0;
        String GovtFundedInsurancePlanChk = "";
        int GFIPMedicare = 0;
        int GFIPMedicaid = 0;
        int GFIPCHIP = 0;
        int GFIPTricare = 0;
        int GFIPVHA = 0;
        int GFIPIndianHealth = 0;
        String InsuranceSubPatient = null;
        String InsuranceSubGuarantor = null;
        String InsuranceSubOther = null;
        String HIPrimaryInsurance = "";
        String HISubscriberFirstName = "";
        String HISubscriberLastName = "";
        String HISubscriberDOB = "";
        String HISubscriberSSN = "";
        String HISubscriberRelationtoPatient = "";
        String HISubscriberGroupNo = "";
        String HISubscriberPolicyNo = "";
        String SecondHealthInsuranceChk = "";
        String SHISecondaryName = "";
        String SHISubscriberFirstName = "";
        String SHISubscriberLastName = "";
        String SHISubscriberDOB = "";
        String SHISubscriberRelationtoPatient = "";
        String SHISubscriberGroupNo = "";
        String SHISubscriberPolicyNo = "";
        int SelfPayChk = 0;
        String FirstNameNoSpaces = "";
        String CityStateZip = "";
        String Country = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            Query = "Select  Ethnicity,Ethnicity_OthersText,EmployementChk,Employer,Occupation,EmpContact,PrimaryCarePhysicianChk,PriCarePhy,ReasonVisit,PriCarePhyAddress,PriCarePhyCity,PriCarePhyState,PriCarePhyZipCode,PatientMinorChk,GuarantorChk,GuarantorEmployer,GuarantorEmployerPhNumber,GuarantorEmployerAddress,GuarantorEmployerCity,GuarantorEmployerState,GuarantorEmployerZipCode,CreatedDate,WorkersCompPolicyChk,MotorVehicleAccidentChk,HealthInsuranceChk from " + Database + ".PatientReg_Details where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                Ethnicity = rset.getString(1);
                Ethnicity_OthersText = rset.getString(2);
                EmployementChk = rset.getString(3);
                Employer = rset.getString(4);
                Occupation = rset.getString(5);
                EmpContact = rset.getString(6);
                PrimaryCarePhysicianChk = rset.getString(7);
                PriCarePhy = rset.getString(8);
                if (ReasonVisit == null)
                    ReasonVisit = rset.getString(9);
                PriCarePhyAddress = rset.getString(10);
                PriCarePhyCity = rset.getString(11);
                PriCarePhyState = rset.getString(12);
                PriCarePhyZipCode = rset.getString(13);
                PatientMinorChk = rset.getString(14);
                GuarantorChk = rset.getString(15);
                GuarantorEmployer = rset.getString(16);
                GuarantorEmployerPhNumber = rset.getString(17);
                GuarantorEmployerAddress = rset.getString(18);
                GuarantorEmployerCity = rset.getString(19);
                GuarantorEmployerState = rset.getString(20);
                GuarantorEmployerZipCode = rset.getString(21);
                WorkersCompPolicyChk = rset.getInt(23);
                MotorVehicleAccidentChk = rset.getInt(24);
                HealthInsuranceChk = rset.getInt(25);
            }
            rset.close();
            stmt.close();
            if (WorkersCompPolicyChk == 1)
                try {
                    Query = "Select IFNULL(DATE_FORMAT(WCPDateofInjury,'%m/%d/%Y'),''), IFNULL(WCPCaseNo,''), IFNULL(WCPGroupNo,''), IFNULL(WCPMemberId,''), IFNULL(WCPInjuryRelatedAutoMotorAccident,''), IFNULL(WCPInjuryRelatedWorkRelated,''), IFNULL(WCPInjuryRelatedOtherAccident,''), IFNULL(WCPInjuryRelatedNoAccident,''), IFNULL(WCPInjuryOccurVehicle,''), IFNULL(WCPInjuryOccurWork,''), IFNULL(WCPInjuryOccurHome,''), IFNULL(WCPInjuryOccurOther,''), IFNULL(WCPInjuryDescription,''), IFNULL(WCPHRFirstName,''), IFNULL(WCPHRLastName,''), IFNULL(WCPHRPhoneNumber,''), IFNULL(WCPHRAddress,''), IFNULL(WCPHRCity,''), IFNULL(WCPHRState,''), IFNULL(WCPHRZipCode,''), IFNULL(WCPPlanName,''), IFNULL(WCPCarrierName,''), IFNULL(WCPPayerPhoneNumber,''), IFNULL(WCPCarrierAddress,''), IFNULL(WCPCarrierCity,''), IFNULL(WCPCarrierState,''), IFNULL(WCPCarrierZipCode,''), IFNULL(WCPAdjudicatorFirstName,''), IFNULL(WCPAdjudicatorLastName,''), IFNULL(WCPAdjudicatorPhoneNumber,''), IFNULL(WCPAdjudicatorFaxPhoneNumber,'') from " + Database + ".Patient_WorkCompPolicy where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        WCPDateofInjury = rset.getString(1);
                        WCPCaseNo = rset.getString(2);
                        WCPGroupNo = rset.getString(3);
                        WCPMemberId = rset.getString(4);
                        WCPInjuryRelatedAutoMotorAccident = rset.getString(5);
                        WCPInjuryRelatedWorkRelated = rset.getString(6);
                        WCPInjuryRelatedOtherAccident = rset.getString(7);
                        WCPInjuryRelatedNoAccident = rset.getString(8);
                        WCPInjuryOccurVehicle = rset.getString(9);
                        WCPInjuryOccurWork = rset.getString(10);
                        WCPInjuryOccurHome = rset.getString(11);
                        WCPInjuryOccurOther = rset.getString(12);
                        WCPInjuryDescription = rset.getString(13);
                        WCPHRFirstName = rset.getString(14);
                        WCPHRLastName = rset.getString(15);
                        WCPHRPhoneNumber = rset.getString(16);
                        WCPHRAddress = rset.getString(17);
                        WCPHRCity = rset.getString(18);
                        WCPHRState = rset.getString(19);
                        WCPHRZipCode = rset.getString(20);
                        WCPPlanName = rset.getString(21);
                        WCPCarrierName = rset.getString(22);
                        WCPPayerPhoneNumber = rset.getString(23);
                        WCPCarrierAddress = rset.getString(24);
                        WCPCarrierCity = rset.getString(25);
                        WCPCarrierState = rset.getString(26);
                        WCPCarrierZipCode = rset.getString(27);
                        WCPAdjudicatorFirstName = rset.getString(28);
                        WCPAdjudicatorLastName = rset.getString(29);
                        WCPAdjudicatorPhoneNumber = rset.getString(30);
                        WCPAdjudicatorFaxPhoneNumber = rset.getString(31);
                    }
                    rset.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_WorkCompPolicy");
                    Services.DumException("DownloadBundle", "GetINput Victoria", request, e, getServletContext());
                }
            if (MotorVehicleAccidentChk == 1)
                try {
                    Query = "Select IFNULL(AutoInsuranceInformationChk,'0'), IFNULL(DATE_FORMAT(AIIDateofAccident,'%m/%d/%Y'),''), IFNULL(AIIAutoClaim,''), IFNULL(AIIAccidentLocationAddress,''), IFNULL(AIIAccidentLocationCity,''), IFNULL(AIIAccidentLocationState,''), IFNULL(AIIAccidentLocationZipCode,''), IFNULL(AIIRoleInAccident,''), IFNULL(AIITypeOfAutoIOnsurancePolicy,''), IFNULL(AIIPrefixforReponsibleParty,''), IFNULL(AIIFirstNameforReponsibleParty,''), IFNULL(AIIMiddleNameforReponsibleParty,''), IFNULL(AIILastNameforReponsibleParty,''), IFNULL(AIISuffixforReponsibleParty,''), IFNULL(AIICarrierResponsibleParty,''), IFNULL(AIICarrierResponsiblePartyAddress,''), IFNULL(AIICarrierResponsiblePartyCity,''), IFNULL(AIICarrierResponsiblePartyState,''), IFNULL(AIICarrierResponsiblePartyZipCode,''), IFNULL(AIICarrierResponsiblePartyPhoneNumber,''), IFNULL(AIICarrierResponsiblePartyPolicyNumber,''), IFNULL(AIIResponsiblePartyAutoMakeModel,''), IFNULL(AIIResponsiblePartyLicensePlate,''), IFNULL(AIIFirstNameOfYourPolicyHolder,''), IFNULL(AIILastNameOfYourPolicyHolder,''), IFNULL(AIINameAutoInsuranceOfYourVehicle,''), IFNULL(AIIYourInsuranceAddress,''), IFNULL(AIIYourInsuranceCity,''), IFNULL(AIIYourInsuranceState,''), IFNULL(AIIYourInsuranceZipCode,''), IFNULL(AIIYourInsurancePhoneNumber,''),IFNULL(AIIYourInsurancePolicyNo,''), IFNULL(AIIYourLicensePlate,''), IFNULL(AIIYourCarMakeModelYear,'') from " + Database + ".Patient_AutoInsuranceInfo where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        AutoInsuranceInformationChk = rset.getString(1);
                        AIIDateofAccident = rset.getString(2);
                        AIIAutoClaim = rset.getString(3);
                        AIIAccidentLocationAddress = rset.getString(4);
                        AIIAccidentLocationCity = rset.getString(5);
                        AIIAccidentLocationState = rset.getString(6);
                        AIIAccidentLocationZipCode = rset.getString(7);
                        AIIRoleInAccident = rset.getString(8);
                        AIITypeOfAutoIOnsurancePolicy = rset.getString(9);
                        AIIPrefixforReponsibleParty = rset.getString(10);
                        AIIFirstNameforReponsibleParty = rset.getString(11);
                        AIIMiddleNameforReponsibleParty = rset.getString(12);
                        AIILastNameforReponsibleParty = rset.getString(13);
                        AIISuffixforReponsibleParty = rset.getString(14);
                        AIICarrierResponsibleParty = rset.getString(15);
                        AIICarrierResponsiblePartyAddress = rset.getString(16);
                        AIICarrierResponsiblePartyCity = rset.getString(17);
                        AIICarrierResponsiblePartyState = rset.getString(18);
                        AIICarrierResponsiblePartyZipCode = rset.getString(19);
                        AIICarrierResponsiblePartyPhoneNumber = rset.getString(20);
                        AIICarrierResponsiblePartyPolicyNumber = rset.getString(21);
                        AIIResponsiblePartyAutoMakeModel = rset.getString(22);
                        AIIResponsiblePartyLicensePlate = rset.getString(23);
                        AIIFirstNameOfYourPolicyHolder = rset.getString(24);
                        AIILastNameOfYourPolicyHolder = rset.getString(25);
                        AIINameAutoInsuranceOfYourVehicle = rset.getString(26);
                        AIIYourInsuranceAddress = rset.getString(27);
                        AIIYourInsuranceCity = rset.getString(28);
                        AIIYourInsuranceState = rset.getString(29);
                        AIIYourInsuranceZipCode = rset.getString(30);
                        AIIYourInsurancePhoneNumber = rset.getString(31);
                        AIIYourInsurancePolicyNo = rset.getString(32);
                        AIIYourLicensePlate = rset.getString(33);
                        AIIYourCarMakeModelYear = rset.getString(34);
                    }
                    rset.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_AutoInsuranceInfo");
                    Services.DumException("DownloadBundle", "GetINput Victoria", request, e, getServletContext());
                }
            if (HealthInsuranceChk == 1)
                try {
                    Query = "Select IFNULL(GovtFundedInsurancePlanChk,'0'), IFNULL(GFIPMedicare,'0'), IFNULL(GFIPMedicaid,'0'), IFNULL(GFIPCHIP,'0'), IFNULL(GFIPTricare,'0'), IFNULL(GFIPVHA,'0'), IFNULL(GFIPIndianHealth,'0'), IFNULL(InsuranceSubPatient,''), IFNULL(InsuranceSubGuarantor,''), IFNULL(InsuranceSubOther,''), IFNULL(HIPrimaryInsurance,''), IFNULL(HISubscriberFirstName,''), IFNULL(HISubscriberLastName,''), IFNULL(HISubscriberDOB,''), IFNULL(HISubscriberSSN,''), IFNULL(HISubscriberRelationtoPatient,''), IFNULL(HISubscriberGroupNo,''), IFNULL(HISubscriberPolicyNo,''), IFNULL(SecondHealthInsuranceChk,''), IFNULL(SHISecondaryName,''), IFNULL(SHISubscriberFirstName,''), IFNULL(SHISubscriberLastName,''), IFNULL(SHISubscriberRelationtoPatient,''), IFNULL(SHISubscriberGroupNo,''), IFNULL(SHISubscriberPolicyNo,'')  from " + Database + ".Patient_HealthInsuranceInfo where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        GovtFundedInsurancePlanChk = rset.getString(1);
                        GFIPMedicare = rset.getInt(2);
                        GFIPMedicaid = rset.getInt(3);
                        GFIPCHIP = rset.getInt(4);
                        GFIPTricare = rset.getInt(5);
                        GFIPVHA = rset.getInt(6);
                        GFIPIndianHealth = rset.getInt(7);
                        InsuranceSubPatient = rset.getString(8);
                        InsuranceSubGuarantor = rset.getString(9);
                        InsuranceSubOther = rset.getString(10);
                        HIPrimaryInsurance = rset.getString(11);
                        HISubscriberFirstName = rset.getString(12);
                        HISubscriberLastName = rset.getString(13);
                        HISubscriberDOB = rset.getString(14);
                        HISubscriberSSN = rset.getString(15);
                        HISubscriberRelationtoPatient = rset.getString(16);
                        HISubscriberGroupNo = rset.getString(17);
                        HISubscriberPolicyNo = rset.getString(18);
                        SecondHealthInsuranceChk = rset.getString(19);
                        SHISecondaryName = rset.getString(20);
                        SHISubscriberFirstName = rset.getString(21);
                        SHISubscriberLastName = rset.getString(22);
                        SHISubscriberRelationtoPatient = rset.getString(23);
                        SHISubscriberGroupNo = rset.getString(24);
                        SHISubscriberPolicyNo = rset.getString(25);
                    }
                    rset.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_HealthInsuraneInfo");
                    Services.DumException("DownloadBundle", "GetINput Victoria", request, e, getServletContext());
                }
            if (Ethnicity.equals("1")) {
                Ethnicity = "Hispanic";
            } else if (Ethnicity.equals("2")) {
                Ethnicity = "Non-Hispanic";
            } else if (Ethnicity.equals("3")) {
                Ethnicity = "Unknown";
            }
            if (GuarantorChk.equals("1")) {
                Guarantor = "The Patient";
                GuarantorDOB = DOB;
                GuarantorSEX = gender;
                GuarantorSSN = SSN;
                GuarantorAddress = Address + "";
                GuarantorPhoneNumber = "" + PhNumber;
            } else if (GuarantorChk.equals("2")) {
                Guarantor = "Legal Guardian";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            } else if (GuarantorChk.equals("3")) {
                Guarantor = "Patient Parent";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            } else if (GuarantorChk.equals("2")) {
                Guarantor = "Spouse/Partner";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            }
            if (WorkersCompPolicyChk == 1) {
                WorkCompPolicyStr = "Yes";
            } else {
                WorkCompPolicyStr = "No";
            }
            if (MotorVehicleAccidentChk == 1) {
                MotorVehAccidentStr = "Yes";
            } else {
                MotorVehAccidentStr = "No";
            }
            if (HISubscriberDOB.equals("00/00/0000"))
                HISubscriberDOB = "";
            if (WCPDateofInjury.equals("00/00/0000"))
                WCPDateofInjury = "";
            if (AIIDateofAccident.equals("00/00/0000"))
                AIIDateofAccident = "";
            Query = " Select CASE WHEN MFFirstVisit = 1 THEN 'YES' ELSE '' END,  CASE WHEN MFReturnPat = 1 THEN 'YES' ELSE '' END,  CASE WHEN MFInternetFind = 1 THEN 'YES' ELSE '' END,  CASE WHEN Facebook = 1 THEN 'YES' ELSE '' END,  CASE WHEN MapSearch = 1 THEN 'YES' ELSE '' END,  CASE WHEN GoogleSearch = 1 THEN 'YES' ELSE '' END,  CASE WHEN VERWebsite = 1 THEN 'YES' ELSE '' END,  CASE WHEN WebsiteAds = 1 THEN 'YES' ELSE '' END, CASE WHEN OnlineReviews = 1 THEN 'YES' ELSE '' END, CASE WHEN Twitter = 1 THEN 'YES' ELSE '' END, CASE WHEN LinkedIn = 1 THEN 'YES' ELSE '' END, CASE WHEN EmailBlast = 1 THEN 'YES' ELSE '' END, CASE WHEN YouTube = 1 THEN 'YES' ELSE '' END, CASE WHEN TV = 1 THEN 'YES' ELSE '' END, CASE WHEN Billboard = 1 THEN 'YES' ELSE '' END, CASE WHEN Radio = 1 THEN 'YES' ELSE '' END, CASE WHEN Brochure = 1 THEN 'YES' ELSE '' END, CASE WHEN DirectMail = 1 THEN 'YES' ELSE '' END, CASE WHEN CitizensDeTar = 1 THEN 'YES' ELSE '' END, CASE WHEN LiveWorkNearby = 1 THEN 'YES' ELSE '' END, CASE WHEN FamilyFriend = 1 THEN 'YES' ELSE '' END, IFNULL(FamilyFriend_text,''),  CASE WHEN UrgentCare = 1 THEN 'YES' ELSE '' END, IFNULL(UrgentCare_text,''),  CASE WHEN NewspaperMagazine = 1 THEN 'YES' ELSE '' END, IFNULL(NewspaperMagazine_text,''),  CASE WHEN School = 1 THEN 'YES' ELSE '' END, IFNULL(School_text,''),  CASE WHEN Hotel = 1 THEN 'YES' ELSE '' END, IFNULL(Hotel_text,''), IFNULL(MFPhysician,'')  FROM " + Database + ".MarketingInfo WHERE PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                MFFirstVisit = rset.getString(1);
                MFReturnPat = rset.getString(2);
                MFInternetFind = rset.getString(3);
                Facebook = rset.getString(4);
                MapSearch = rset.getString(5);
                GoogleSearch = rset.getString(6);
                VERWebsite = rset.getString(7);
                WebsiteAds = rset.getString(8);
                OnlineReviews = rset.getString(9);
                Twitter = rset.getString(10);
                LinkedIn = rset.getString(11);
                EmailBlast = rset.getString(12);
                YouTube = rset.getString(13);
                TV = rset.getString(14);
                Billboard = rset.getString(15);
                Radio = rset.getString(16);
                Brochure = rset.getString(17);
                DirectMail = rset.getString(18);
                CitizensDeTar = rset.getString(19);
                LiveWorkNearby = rset.getString(20);
                FamilyFriend = rset.getString(21);
                FamilyFriend_text = rset.getString(22);
                UrgentCare = rset.getString(23);
                UrgentCare_text = rset.getString(24);
                NewspaperMagazine = rset.getString(25);
                NewspaperMagazine_text = rset.getString(26);
                School = rset.getString(27);
                School_text = rset.getString(28);
                Hotel = rset.getString(29);
                Hotel_text = rset.getString(30);
                MFPhysician = rset.getString(31);
            }
            rset.close();
            stmt.close();
            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/ABNformEnglish.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            int i;
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 80.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 120.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_QUESTIONNAIRE.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 700.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 675.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 650.0F);
                    pdfContentByte.showText(WCPMemberId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 630.0F);
                    pdfContentByte.showText(WCPGroupNo);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 610.0F);
                    pdfContentByte.showText(WCPDateofInjury);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 585.0F);
                    pdfContentByte.showText(WCPCaseNo);
                    pdfContentByte.endText();
                    if (WCPInjuryRelatedAutoMotorAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(175.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(175.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedWorkRelated.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(275.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(275.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedOtherAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(380.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(380.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedNoAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(475.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(475.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurVehicle.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(220.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(220.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurWork.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(280.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(280.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurHome.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(340.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(340.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurOther.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() <= 114) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 114 && WCPInjuryDescription.length() <= 228) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 228 && WCPInjuryDescription.length() <= 342) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 420.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 342 && WCPInjuryDescription.length() <= 456) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 420.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, 342));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 408.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(342, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 456) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 420.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, 342));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 408.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(342, 456));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 393.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(456, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 350.0F);
                    pdfContentByte.showText(WCPHRFirstName + " " + WCPHRLastName + " / " + WCPHRPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 325.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0F, 300.0F);
                    pdfContentByte.showText(WCPHRAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 280.0F);
                    pdfContentByte.showText(WCPHRCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(230.0F, 280.0F);
                    pdfContentByte.showText(WCPHRState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 260.0F);
                    pdfContentByte.showText(WCPHRZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 350.0F);
                    pdfContentByte.showText(WCPPlanName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 325.0F);
                    pdfContentByte.showText(WCPCarrierName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 300.0F);
                    pdfContentByte.showText(WCPPayerPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 280.0F);
                    pdfContentByte.showText(WCPCarrierAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0F, 260.0F);
                    pdfContentByte.showText(WCPCarrierCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 260.0F);
                    pdfContentByte.showText(WCPCarrierState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 235.0F);
                    pdfContentByte.showText(WCPCarrierZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 210.0F);
                    pdfContentByte.showText(WCPAdjudicatorFirstName + " " + WCPAdjudicatorLastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 185.0F);
                    pdfContentByte.showText(WCPAdjudicatorPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 165.0F);
                    pdfContentByte.showText(WCPAdjudicatorFaxPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 140.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 120.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_MVA_assignmentofproceeds.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(55.0F, 625.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 447.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 130.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 80.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 710.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0F, 680.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 630.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 480.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0F, 355.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 280.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MVA_ASSIGNMENTOFPROCEEDS.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0F, 355.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 290.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MVACLAIMFORM.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 640.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 620.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 620.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 595.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 595.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 570.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(290.0F, 570.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 570.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 545.0F);
                    pdfContentByte.showText(AIIAutoClaim);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 522.0F);
                    pdfContentByte.showText(AIIDateofAccident);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(165.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145.0F, 452.0F);
                    pdfContentByte.showText(AIIRoleInAccident);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 352.0F);
                    pdfContentByte.showText(AIITypeOfAutoIOnsurancePolicy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 320.0F);
                    pdfContentByte.showText(AIIPrefixforReponsibleParty + " " + AIIFirstNameforReponsibleParty + " " + AIIMiddleNameforReponsibleParty + " " + AIILastNameforReponsibleParty + " " + AIISuffixforReponsibleParty);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(280.0F, 300.0F);
                    pdfContentByte.showText(AIICarrierResponsibleParty);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 280.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 255.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0F, 255.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 255.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 230.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 210.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyPolicyNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 210.0F);
                    pdfContentByte.showText(AIIResponsiblePartyLicensePlate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240.0F, 190.0F);
                    pdfContentByte.showText(AIIResponsiblePartyAutoMakeModel);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0F, 680.0F);
                    pdfContentByte.showText(AIIFirstNameOfYourPolicyHolder + " " + AIILastNameOfYourPolicyHolder);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 650.0F);
                    pdfContentByte.showText(AIINameAutoInsuranceOfYourVehicle);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 630.0F);
                    pdfContentByte.showText(AIIYourInsuranceAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 610.0F);
                    pdfContentByte.showText(AIIYourInsuranceCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0F, 610.0F);
                    pdfContentByte.showText(AIIYourInsuranceState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 610.0F);
                    pdfContentByte.showText(AIIYourInsuranceZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 585.0F);
                    pdfContentByte.showText(AIIYourInsurancePhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 565.0F);
                    pdfContentByte.showText(AIIYourInsurancePolicyNo);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 565.0F);
                    pdfContentByte.showText(AIIYourLicensePlate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 545.0F);
                    pdfContentByte.showText(AIIYourCarMakeModelYear);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/Medicalreleaseform.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 570.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 552.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 535.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 180.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 140.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            String inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/UHCINSAPPEALFORMS.pdf";
            String outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf";
            FileOutputStream fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            PdfReader pdfReader2 = new PdfReader(inputFilePathTmp2);
            PdfStamper pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            int j;
            for (j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0F, 690.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0F, 665.0F);
                    pdfContentByte2.showText(HISubscriberLastName + ", " + HISubscriberFirstName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0F, 640.0F);
                    pdfContentByte2.showText(WCPMemberId);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0F, 595.0F);
                    pdfContentByte2.showText("Victoria ED");
                    pdfContentByte2.endText();
                }
                if (j == 2) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(90.0F, 470.0F);
                    pdfContentByte2.showText(LastName + ", " + FirstName);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MEDICAIDSELFPAYAGREEMENT.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            for (j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(475.0F, 90.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/FINANCIAL_HARDSHIP_RELIEF.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            for (j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(150.0F, 640.0F);
                    pdfContentByte2.showText(LastName + ", " + FirstName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(420.0F, 640.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(170.0F, 610.0F);
                    pdfContentByte2.showText(HISubscriberRelationtoPatient);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(430.0F, 610.0F);
                    pdfContentByte2.showText(HISubscriberFirstName + " " + HISubscriberLastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(250.0F, 580.0F);
                    pdfContentByte2.showText(DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0F, 520.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0F, 520.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0F, 492.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0F, 492.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0F, 462.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0F, 462.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0F, 432.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0F, 432.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0F, 392.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(342.0F, 290.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/Marketing_Slips.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Marketing_Slips_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            for (j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(155.0F, 698.0F);
                    pdfContentByte2.showText(MFFirstVisit);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(405.0F, 698.0F);
                    pdfContentByte2.showText(MFReturnPat);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(182.0F, 677.0F);
                    pdfContentByte2.showText(MFInternetFind);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 630.0F);
                    pdfContentByte2.showText(Facebook);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 630.0F);
                    pdfContentByte2.showText(TV);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 618.0F);
                    pdfContentByte2.showText(MapSearch);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 618.0F);
                    pdfContentByte2.showText(Billboard);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 605.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 605.0F);
                    pdfContentByte2.showText(Radio);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 590.0F);
                    pdfContentByte2.showText(GoogleSearch);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 590.0F);
                    pdfContentByte2.showText(FamilyFriend);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(370.0F, 590.0F);
                    pdfContentByte2.showText(FamilyFriend_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 575.0F);
                    pdfContentByte2.showText(YouTube);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 575.0F);
                    pdfContentByte2.showText(Brochure);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 562.0F);
                    pdfContentByte2.showText(WebsiteAds);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 562.0F);
                    pdfContentByte2.showText(DirectMail);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 550.0F);
                    pdfContentByte2.showText(LinkedIn);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 550.0F);
                    pdfContentByte2.showText(UrgentCare);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(370.0F, 550.0F);
                    pdfContentByte2.showText(UrgentCare_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 535.0F);
                    pdfContentByte2.showText(Twitter);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 535.0F);
                    pdfContentByte2.showText(School);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(370.0F, 535.0F);
                    pdfContentByte2.showText(School_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 522.0F);
                    pdfContentByte2.showText(OnlineReviews);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 522.0F);
                    pdfContentByte2.showText(NewspaperMagazine);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0F, 522.0F);
                    pdfContentByte2.showText(NewspaperMagazine_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0F, 510.0F);
                    pdfContentByte2.showText(EmailBlast);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 510.0F);
                    pdfContentByte2.showText(Hotel);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(340.0F, 510.0F);
                    pdfContentByte2.showText(Hotel_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 495.0F);
                    pdfContentByte2.showText(CitizensDeTar);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 483.0F);
                    pdfContentByte2.showText(LiveWorkNearby);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0F, 470.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0F, 470.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(310.0F, 440.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0F, 426.0F);
                    pdfContentByte2.showText(MFPhysician);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(290.0F, 426.0F);
                    pdfContentByte2.showText(PhNumber);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/GeneralForm_Victoria.pdf";
            if (WorkersCompPolicyChk == 1) {
                Query = "Select WCPInjuryRelatedAutoMotorAccident, WCPInjuryOccurVehicle from " + Database + ".Patient_WorkCompPolicy where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WCPInjuryRelatedAutoMotorAccident = rset.getString(1);
                    WCPInjuryOccurVehicle = rset.getString(2);
                }
                rset.close();
                stmt.close();
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/GeneralForm_Victoria.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                if (WCPInjuryRelatedAutoMotorAccident.equals("1") || WCPInjuryOccurVehicle.equals("1")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            if (WorkersCompPolicyChk == 0 && MotorVehicleAccidentChk == 1) {
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            }
            if (MotorVehicleAccidentChk == 1) {
                Query = "Select AutoInsuranceInformationChk from " + Database + ".Patient_AutoInsuranceInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next())
                    AutoInsuranceInformationChk = rset.getString(1);
                rset.close();
                stmt.close();
                if (AutoInsuranceInformationChk.equals("1")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            if (HealthInsuranceChk == 1) {
                Query = "Select GFIPMedicare,GFIPMedicaid,GFIPCHIP,GFIPTricare,GFIPVHA,GFIPIndianHealth, GovtFundedInsurancePlanChk,IFNULL(HIPrimaryInsurance,''),IFNULL(HISubscriberFirstName,''), IFNULL(HISubscriberLastName,''), IFNULL(DATE_FORMAT(HISubscriberDOB,'%m/%d/%Y'),''), IFNULL(HISubscriberSSN,''), IFNULL(HISubscriberRelationtoPatient,''), IFNULL(HISubscriberGroupNo,''), IFNULL(HISubscriberPolicyNo,''),IFNULL(SHISecondaryName,''), IFNULL(SHISubscriberFirstName,''), IFNULL(SHISubscriberLastName,''), IFNULL(SHISubscriberRelationtoPatient,''), IFNULL(SHISubscriberGroupNo,''), IFNULL(SHISubscriberPolicyNo,'') from " + Database + ".Patient_HealthInsuranceInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    GFIPMedicare = rset.getInt(1);
                    GFIPMedicaid = rset.getInt(2);
                    GFIPCHIP = rset.getInt(3);
                    GFIPTricare = rset.getInt(4);
                    GFIPVHA = rset.getInt(5);
                    GFIPIndianHealth = rset.getInt(6);
                    GovtFundedInsurancePlanChk = rset.getString(7);
                    HIPrimaryInsurance = rset.getString(8);
                    HISubscriberFirstName = rset.getString(9);
                    HISubscriberLastName = rset.getString(10);
                    HISubscriberDOB = rset.getString(11);
                    HISubscriberSSN = rset.getString(12);
                    HISubscriberRelationtoPatient = rset.getString(13);
                    HISubscriberGroupNo = rset.getString(14);
                    HISubscriberPolicyNo = rset.getString(15);
                    SHISecondaryName = rset.getString(16);
                    SHISubscriberFirstName = rset.getString(17);
                    SHISubscriberLastName = rset.getString(18);
                    SHISubscriberRelationtoPatient = rset.getString(19);
                    SHISubscriberGroupNo = rset.getString(20);
                    SHISubscriberPolicyNo = rset.getString(21);
                }
                rset.close();
                stmt.close();
                if (GovtFundedInsurancePlanChk.equals("1")) {
                    if (GFIPMedicaid == 1 || GFIPCHIP == 1) {
                        mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                        ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                    }
                    if (GFIPMedicare == 1) {
                        mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                        ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                    }
                }
                if (HIPrimaryInsurance.trim().toUpperCase().equals("UNITED HEALTHCARE")) {
                    System.out.println("Inside United HealthCare");
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            if (HISubscriberDOB.equals("00/00/0000"))
                HISubscriberDOB = "";
            if (WCPDateofInjury.equals("00/00/0000"))
                WCPDateofInjury = "";
            if (AIIDateofAccident.equals("00/00/0000"))
                AIIDateofAccident = "";
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Marketing_Slips_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            String DOSDate = "";
            String DOSTime = "";
            DOSDate = DOS.substring(0, 10);
            DOSTime = DOS.substring(11, 19);
            String inputFilePath = "";
            inputFilePath = ResultPdf;
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/Victoria/" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf";
            OutputStream fos3 = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader3 = new PdfReader(inputFilePath);
            PdfStamper pdfStamper3 = new PdfStamper(pdfReader3, fos3);
            for (int k = 1; k <= pdfReader3.getNumberOfPages(); k++) {
                if (k == 1) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(390.0F, 668.0F);
                    pdfContentByte3.showText(DOSDate);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(490.0F, 668.0F);
                    pdfContentByte3.showText(DOSTime);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 600.0F);
                    pdfContentByte3.showText(LastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(200.0F, 600.0F);
                    pdfContentByte3.showText(FirstName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(390.0F, 608.0F);
                    pdfContentByte3.showText(Title);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0F, 608.0F);
                    pdfContentByte3.showText(MaritalStatus);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 570.0F);
                    pdfContentByte3.showText(Address);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(300.0F, 570.0F);
                    pdfContentByte3.showText(CityStateZip);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0F, 570.0F);
                    pdfContentByte3.showText(PhNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 540.0F);
                    pdfContentByte3.showText(SSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 540.0F);
                    pdfContentByte3.showText(DOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0F, 540.0F);
                    pdfContentByte3.showText(Age);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0F, 540.0F);
                    pdfContentByte3.showText(gender);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(435.0F, 540.0F);
                    pdfContentByte3.showText(Email);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 515.0F);
                    pdfContentByte3.showText(Ethnicity);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 515.0F);
                    pdfContentByte3.showText(Employer);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 515.0F);
                    pdfContentByte3.showText(Occupation);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 490.0F);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 490.0F);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 490.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 470.0F);
                    pdfContentByte3.showText(PriCarePhy);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0F, 465.0F);
                    pdfContentByte3.showText(ReasonVisit);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 395.0F);
                    pdfContentByte3.showText(Guarantor);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(290.0F, 395.0F);
                    pdfContentByte3.showText(GuarantorDOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(360.0F, 395.0F);
                    pdfContentByte3.showText(GuarantorSEX);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(425.0F, 395.0F);
                    pdfContentByte3.showText(GuarantorSSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 365.0F);
                    pdfContentByte3.showText(GuarantorAddress);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0F, 365.0F);
                    pdfContentByte3.showText(GuarantorPhoneNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 335.0F);
                    pdfContentByte3.showText(GuarantorEmployer);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 335.0F);
                    pdfContentByte3.showText("" + GuarantorEmployerPhNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 335.0F);
                    pdfContentByte3.showText(GuarantorEmployerAddress + "  " + GuarantorEmployerCity + " " + GuarantorEmployerState);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 310.0F);
                    pdfContentByte3.showText(WorkCompPolicyStr);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 310.0F);
                    pdfContentByte3.showText(MotorVehAccidentStr);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 310.0F);
                    pdfContentByte3.showText(AIIDateofAccident);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(100.0F, 285.0F);
                    pdfContentByte3.showText(HIPrimaryInsurance);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 260.0F);
                    pdfContentByte3.showText(HISubscriberFirstName + " " + HISubscriberLastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(290.0F, 260.0F);
                    pdfContentByte3.showText(HISubscriberDOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 260.0F);
                    pdfContentByte3.showText(HISubscriberSSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 244.0F);
                    pdfContentByte3.showText(HISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 235.0F);
                    pdfContentByte3.showText(HISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 235.0F);
                    pdfContentByte3.showText(HISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 205.0F);
                    pdfContentByte3.showText(SHISecondaryName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 180.0F);
                    pdfContentByte3.showText(SHISubscriberFirstName + " " + SHISubscriberLastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 180.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 180.0F);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 170.0F);
                    pdfContentByte3.showText(SHISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 160.0F);
                    pdfContentByte3.showText(SHISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 160.0F);
                    pdfContentByte3.showText(SHISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(410.0F, 80.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 2) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(350.0F, 145.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(350.0F, 105.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 4) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(70.0F, 350.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0F, 270.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 5) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(420.0F, 70.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 6) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(430.0F, 290.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(440.0F, 360.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 7) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(120.0F, 590.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(300.0F, 590.0F);
                    pdfContentByte3.showText(DOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(485.0F, 590.0F);
                    pdfContentByte3.showText(HISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 565.0F);
                    pdfContentByte3.showText(HIPrimaryInsurance);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 540.0F);
                    pdfContentByte3.showText(HISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 520.0F);
                    pdfContentByte3.showText(DOS);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 420.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0F, 420.0F);
                    pdfContentByte3.showText("Victoria ED");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(440.0F, 160.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 8) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(220.0F, 425.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(155.0F, 400.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(410.0F, 400.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(155.0F, 380.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 380.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(115.0F, 158.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 130.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 100.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 9) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 150.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
            }
            pdfStamper3.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Marketing_Slips_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    void GETINPUTOddasa(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        MergePdf mergePdf = new MergePdf();
        String Path1 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/";
        String Path2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        String State = "";
        String Country = "";
        String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = "0";
        String DoctorName = "";
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a workercomp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String _PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String _SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        String CountryER = "";
        String ZipCodeER = "";
        String DateConcent = "";
        String WitnessConcent = "";
        String PatientBehalfConcent = "";
        String RelativeSignConcent = "";
        String DateConcent2 = "";
        String WitnessConcent2 = "";
        String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        String Work = "";
        String Work_text = "";
        String Physician = "";
        String Physician_text = "";
        String Other = "";
        String Other_text = "";
        int SelfPayChk = 0;
        int VerifyChkBox = 0;
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "SELECT date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%d-%m-%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                try {
                    Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%d-%m-%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, DATE_FORMAT(CreatedDate, '%d-%m-%Y'), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        PatientRegId = ID;
                        LastName = rset.getString(1).trim();
                        FirstName = rset.getString(2).trim();
                        FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                        MiddleInitial = rset.getString(3).trim();
                        Title = rset.getString(4).trim();
                        MaritalStatus = rset.getString(5);
                        DOB = rset.getString(6);
                        Age = rset.getString(7);
                        gender = rset.getString(8);
                        Address = rset.getString(9);
                        CityStateZip = rset.getString(10);
                        PhNumber = rset.getString(11);
                        SSN = rset.getString(12);
                        Occupation = rset.getString(13);
                        Employer = rset.getString(14);
                        EmpContact = rset.getString(15);
                        PriCarePhy = rset.getString(16);
                        Email = rset.getString(17);
                        ReasonVisit = rset.getString(18);
                        SelfPayChk = rset.getInt(19);
                        MRN = rset.getString(20);
                        ClientIndex = rset.getInt(21);
                        DOS = rset.getString(22);
                        DoctorId = rset.getString(23);
                    }
                    rset.close();
                    stmt.close();
                    Query = "Select name from oe.clients where Id = " + ClientId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next())
                        ClientName = rset.getString(1);
                    rset.close();
                    stmt.close();
                    if (!DoctorId.equals("-")) {
                        Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                        stmt = conn.createStatement();
                        rset = stmt.executeQuery(Query);
                        while (rset.next())
                            DoctorName = rset.getString(1);
                        rset.close();
                        stmt.close();
                    }
                } catch (Exception e) {
                    out.println("Error In Doctors Name:--" + e.getMessage());
                    out.println(Query);
                }
                if (SelfPayChk == 1) {
                    Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%d-%m-%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%d-%m-%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        WorkersCompPolicy = rset.getInt(1);
                        MotorVehAccident = rset.getInt(2);
                        if (WorkersCompPolicy == 0) {
                            WorkersCompPolicyString = "Is this a workers comp policy: NO";
                        } else {
                            WorkersCompPolicyString = "Is this a workers comp policy: YES";
                        }
                        if (MotorVehAccident == 0) {
                            MotorVehAccidentString = "Is this a Motor Vehicle Accident : NO";
                        } else {
                            MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES";
                        }
                        PriInsurance = rset.getString(3);
                        MemId = rset.getString(4);
                        GrpNumber = rset.getString(5);
                        PriInsuranceName = rset.getString(6);
                        AddressIfDifferent = rset.getString(7);
                        PrimaryDOB = rset.getString(8);
                        PrimarySSN = rset.getString(9);
                        PatientRelationtoPrimary = rset.getString(10);
                        PrimaryOccupation = rset.getString(11);
                        PrimaryEmployer = rset.getString(12);
                        EmployerAddress = rset.getString(13);
                        EmployerPhone = rset.getString(14);
                        SecondryInsurance = rset.getString(15);
                        SubscriberName = rset.getString(16);
                        SubscriberDOB = rset.getString(17);
                        PatientRelationshiptoSecondry = rset.getString(18);
                        MemberID_2 = rset.getString(19);
                        GroupNumber_2 = rset.getString(20);
                    }
                    rset.close();
                    stmt.close();
                }
                if (SelfPayChk != 0 &&
                        !PriInsuranceName.equals("-") && !PriInsuranceName.equals("")) {
                    Query = " Select PayerName from " + Database + ".ProfessionalPayers where Id =  " + PriInsuranceName;
                    System.out.println(Query);
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next())
                        _PriInsuranceName = rset.getString(1);
                    rset.close();
                    stmt.close();
                }
                if (!SecondryInsurance.equals("-") && !SecondryInsurance.equals("")) {
                    Query = "Select PayerName from " + Database + ".ProfessionalPayers where id = " + SecondryInsurance;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next())
                        _SecondryInsurance = rset.getString(1);
                    rset.close();
                    stmt.close();
                }
                Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    NextofKinName = rset.getString(1);
                    RelationToPatientER = rset.getString(2);
                    PhoneNumberER = rset.getString(3);
                    LeaveMessageERString = rset.getString(4);
                    AddressER = rset.getString(5);
                    CityStateZipER = rset.getString(6);
                }
                rset.close();
                stmt.close();
                Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    if (rset.getInt(1) == 0) {
                        ReturnPatient = "";
                    } else {
                        ReturnPatient = "YES";
                    }
                    if (rset.getInt(2) == 0) {
                        Google = "";
                    } else {
                        Google = "YES";
                    }
                    if (rset.getInt(3) == 0) {
                        MapSearch = "";
                    } else {
                        MapSearch = "YES";
                    }
                    if (rset.getInt(4) == 0) {
                        Billboard = "";
                    } else {
                        Billboard = "YES";
                    }
                    if (rset.getInt(5) == 0) {
                        OnlineReview = "";
                    } else {
                        OnlineReview = "YES";
                    }
                    if (rset.getInt(6) == 0) {
                        TV = "";
                    } else {
                        TV = "YES";
                    }
                    if (rset.getInt(7) == 0) {
                        Website = "";
                    } else {
                        Website = "YES";
                    }
                    if (rset.getInt(8) == 0) {
                        BuildingSignDriveBy = "";
                    } else {
                        BuildingSignDriveBy = "YES";
                    }
                    if (rset.getInt(9) == 0) {
                        Facebook = "";
                    } else {
                        Facebook = "YES";
                    }
                    if (rset.getInt(10) == 0) {
                        School = "";
                        School_text = "";
                    } else {
                        School = "YES";
                        School_text = rset.getString(11);
                    }
                    if (rset.getInt(12) == 0) {
                        Twitter = "";
                    } else {
                        Twitter = "YES";
                    }
                    if (rset.getInt(13) == 0) {
                        Magazine = "";
                        Magazine_text = "";
                    } else {
                        Magazine = "YES";
                        Magazine_text = rset.getString(14);
                    }
                    if (rset.getInt(15) == 0) {
                        Newspaper = "";
                        Newspaper_text = "";
                    } else {
                        Newspaper = "YES";
                        Newspaper_text = rset.getString(16);
                    }
                    if (rset.getInt(17) == 0) {
                        FamilyFriend = "";
                        FamilyFriend_text = "";
                    } else {
                        FamilyFriend = "YES";
                        FamilyFriend_text = rset.getString(18);
                    }
                    if (rset.getInt(19) == 0) {
                        UrgentCare = "";
                        UrgentCare_text = "";
                    } else {
                        UrgentCare = "YES";
                        UrgentCare_text = rset.getString(20);
                    }
                    if (rset.getInt(21) == 0) {
                        CommunityEvent = "";
                        CommunityEvent_text = "";
                    } else {
                        CommunityEvent = "YES";
                        CommunityEvent_text = rset.getString(22);
                    }
                    if (rset.getString(23) == "" || rset.getString(23) == null) {
                        Work_text = "";
                    } else {
                        Work_text = rset.getString(23);
                    }
                    if (rset.getString(24) == "" || rset.getString(24) == null) {
                        Physician_text = "";
                    } else {
                        Physician_text = rset.getString(24);
                    }
                    if (rset.getString(25) == "" || rset.getString(25) == null) {
                        Other_text = "";
                        continue;
                    }
                    Other_text = rset.getString(25);
                }
                rset.close();
                stmt.close();
            } catch (Exception e) {
                String str = "";
                for (int k = 0; k < (e.getStackTrace()).length; k++)
                    str = str + e.getStackTrace()[k] + "<br>";
                out.println(str);
            }
            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/Aetna.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/Aetna_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            int i;
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 680.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 680.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 655.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 628.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(70.0F, 605.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.WHITE);
                    pdfContentByte.setTextMatrix(120.0F, 190.0F);
                    pdfContentByte.showText("SignHereAA");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450.0F, 190.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(70.0F, 160.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 70.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 60.0F);
                    pdfContentByte.showText("Excel-ER-Odessa   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 50.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 40.0F);
                    pdfContentByte.showText("MRN: " + MRN + "  DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 30.0F);
                    pdfContentByte.showText("Dr." + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/BCBS.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/BCBS_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 545.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 532.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 518.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 507.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(320.0F, 495.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 483.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.WHITE);
                    pdfContentByte.setTextMatrix(150.0F, 283.0F);
                    pdfContentByte.showText("SignHereAA");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 283.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 250.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 250.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 60.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 50.0F);
                    pdfContentByte.showText("Excel-ER-Odessa   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 40.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 30.0F);
                    pdfContentByte.showText("MRN: " + MRN + "  DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 20.0F);
                    pdfContentByte.showText("Dr." + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/UHC.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/UHC_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 605.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 585.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 563.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 540.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 320.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 60.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 50.0F);
                    pdfContentByte.showText("Excel-ER-Odessa   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 40.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 30.0F);
                    pdfContentByte.showText("MRN: " + MRN + "  DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 20.0F);
                    pdfContentByte.showText("Dr." + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/other_insurance.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/other_insurance_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 665.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 615.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 563.0F);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 510.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 60.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 50.0F);
                    pdfContentByte.showText("Excel ER-Odessa   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 40.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 30.0F);
                    pdfContentByte.showText("MRN: " + MRN + "  DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 20.0F);
                    pdfContentByte.showText("Dr." + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/Prompt_Pay_Agreement_Template.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/Prompt_Pay_Agreement_Template_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(425.0F, 175.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 133.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 740.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 730.0F);
                    pdfContentByte.showText("Excel ER-Odessa   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 720.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 710.0F);
                    pdfContentByte.showText("MRN: " + MRN + "  DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 700.0F);
                    pdfContentByte.showText("Dr." + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            String ResultPdf = "";
            String inputFilePath = "";
            int AdmissionBundle = 0;
            if (SelfPayChk == 1) {
                try {
                    Query = "Select AdmissionBundle from " + Database + ".PatientAdmissionBundle where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next())
                        AdmissionBundle = rset.getInt(1);
                    rset.close();
                    stmt.close();
                } catch (Exception e2) {
                    out.println(e2.getMessage());
                }
                if (AdmissionBundle == 1) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/Aetna_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Odessa/Result_" + ClientId + "_" + MRN + ".pdf";
                } else if (AdmissionBundle == 2) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/BCBS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Odessa/Result_" + ClientId + "_" + MRN + ".pdf";
                } else if (AdmissionBundle == 3) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/UHC_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Odessa/Result_" + ClientId + "_" + MRN + ".pdf";
                } else if (AdmissionBundle == 4) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/other_insurance_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Odessa/Result_" + ClientId + "_" + MRN + ".pdf";
                } else {
                    ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf";
                }
            } else if (SelfPayChk == 0) {
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/TempDir/Prompt_Pay_Agreement_Template_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Odessa/Result_" + ClientId + "_" + MRN + ".pdf";
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/OdessaPdfs/GeneralFormOdessa.pdf";
            }
            inputFilePath = ResultPdf;
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + MRN + "_" + DateTime + ".pdf";
            OutputStream fos = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader = new PdfReader(inputFilePath);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            for (int j = 1; j <= pdfReader.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 715.0F);
                    pdfContentByte.showText(LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 715.0F);
                    pdfContentByte.showText(FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310.0F, 715.0F);
                    pdfContentByte.showText(MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(360.0F, 715.0F);
                    pdfContentByte.showText(Title);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 715.0F);
                    pdfContentByte.showText(MaritalStatus);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 685.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 685.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(360.0F, 685.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 685.0F);
                    pdfContentByte.showText(gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 652.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240.0F, 652.0F);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 655.0F);
                    pdfContentByte.showText(Email);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 622.0F);
                    pdfContentByte.showText(Employer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 622.0F);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(360.0F, 622.0F);
                    pdfContentByte.showText(Occupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 595.0F);
                    pdfContentByte.showText(PriCarePhy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 595.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 452.0F);
                    if (WorkersCompPolicy == 0 && MotorVehAccident == 0) {
                        pdfContentByte.showText("Is this due to MVA or Worker Comp : NO");
                    } else {
                        pdfContentByte.showText("Is this due to MVA or Worker Comp : NO");
                    }
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 430.0F);
                    pdfContentByte.showText(_PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 400.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 395.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310.0F, 395.0F);
                    pdfContentByte.showText(PrimarySSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 395.0F);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 360.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 360.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 360.0F);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 360.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 336.0F);
                    pdfContentByte.showText(_SecondryInsurance);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 300.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 300.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310.0F, 300.0F);
                    pdfContentByte.showText(PrimarySSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 300.0F);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 270.0F);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 270.0F);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 270.0F);
                    pdfContentByte.showText(PatientRelationshiptoSecondry);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 80.0F);
                    pdfContentByte.showText(NextofKinName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(320.0F, 80.0F);
                    pdfContentByte.showText(RelationToPatientER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 80.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 80.0F);
                    pdfContentByte.showText(PhoneNumberER);
                    pdfContentByte.endText();
                }
                if (j == 2) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 66.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 56.0F);
                    pdfContentByte.showText(ClientName + "   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 46.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 36.0F);
                    pdfContentByte.showText("MRN: " + MRN + "    DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 26.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (j == 3) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 66.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 56.0F);
                    pdfContentByte.showText(ClientName + "   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 46.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 36.0F);
                    pdfContentByte.showText("MRN: " + MRN + "    DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 26.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (j == 4) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 160.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 160.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 66.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 56.0F);
                    pdfContentByte.showText(ClientName + "   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 46.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 36.0F);
                    pdfContentByte.showText("MRN: " + MRN + "    DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 26.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (j == 5) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 535.0F);
                    pdfContentByte.showText(_PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 510.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 510.0F);
                    pdfContentByte.showText(PrimaryDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 480.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 480.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 265.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310.0F, 315.0F);
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 66.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 56.0F);
                    pdfContentByte.showText(ClientName + "   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 46.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 36.0F);
                    pdfContentByte.showText("MRN: " + MRN + "    DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 26.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (j == 6) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 455.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 375.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 66.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 56.0F);
                    pdfContentByte.showText(ClientName + "   Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 46.0F);
                    pdfContentByte.showText("DOB: " + DOB + "    Age: (" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 36.0F);
                    pdfContentByte.showText("MRN: " + MRN + "    DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 26.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + MRN + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/UHC_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/other_insurance_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/BCBS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/Aetna_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/Prompt_Pay_Agreement_Template_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
        } catch (Exception e) {
            try {
                Services.DumException("GETINPUTFrontline", "Printlabel4 ", request, e);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientUpdateInfo");
                Parser.SetField("ActionID", "GetInput&ID=" + ID);
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
            } catch (Exception exception) {
            }
        }
    }

    void GETINPUTSAustin(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        String State = "";
        String Country = "";
        String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a workercomp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        String CountryER = "";
        String ZipCodeER = "";
        String DateConcent = "";
        String WitnessConcent = "";
        String PatientBehalfConcent = "";
        String RelativeSignConcent = "";
        String DateConcent2 = "";
        String WitnessConcent2 = "";
        String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        String Work = "";
        String Work_text = "";
        String Physician = "";
        String Physician_text = "";
        String Other = "";
        String Other_text = "";
        int SelfPayChk = 0;
        int VerifyChkBox = 0;
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
                    out.println("Inside Get Doc Name");
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next())
                        DoctorName = rset.getString(1);
                    rset.close();
                    stmt.close();
                } else {
                    out.println("Inside Get Doc Name empty");
                    DoctorName = "";
                }
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            if (SelfPayChk == 1) {
                Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WorkersCompPolicy = rset.getInt(1);
                    MotorVehAccident = rset.getInt(2);
                    if (WorkersCompPolicy == 0) {
                        WorkersCompPolicyString = "Is this a workercomp policy: NO";
                    } else {
                        WorkersCompPolicyString = "Is this a workercomp policy: YES";
                    }
                    if (MotorVehAccident == 0) {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : NO";
                    } else {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES";
                    }
                    PriInsurance = rset.getString(3);
                    MemId = rset.getString(4);
                    GrpNumber = rset.getString(5);
                    PriInsuranceName = rset.getString(6);
                    AddressIfDifferent = rset.getString(7);
                    PrimaryDOB = rset.getString(8);
                    PrimarySSN = rset.getString(9);
                    PatientRelationtoPrimary = rset.getString(10);
                    PrimaryOccupation = rset.getString(11);
                    PrimaryEmployer = rset.getString(12);
                    EmployerAddress = rset.getString(13);
                    EmployerPhone = rset.getString(14);
                    SecondryInsurance = rset.getString(15);
                    SubscriberName = rset.getString(16);
                    SubscriberDOB = rset.getString(17);
                    PatientRelationshiptoSecondry = rset.getString(18);
                    MemberID_2 = rset.getString(19);
                    GroupNumber_2 = rset.getString(20);
                }
                rset.close();
                stmt.close();
            }
            try {
                if (!PriInsuranceName.equals("-") || PriInsuranceName.equals("")) {
                    out.println("Inside PriInsuranceName");
                    Query = "Select PayerName from " + Database + ".ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next())
                        PriInsuranceName = rset.getString(1);
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
                out.println("Error is PriInsurance: " + e.getMessage());
                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                    continue;
                }
                Other_text = rset.getString(25);
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            InetAddress ip = InetAddress.getLocalHost();
            String hostname = ip.getHostName();
            System.out.println("Your current IP address : " + ip);
            System.out.println("Your current Hostname : " + hostname);
            if (hostname.trim().equals("romver-01")) {
                inputFilePath = "";
            } else {
                inputFilePath = "/sftpdrive";
            }
            System.out.println("Your current inputFilePath : " + inputFilePath);
            inputFilePath = inputFilePath + "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/adminsaustin.pdf";
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf";
            OutputStream fos = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader = new PdfReader(inputFilePath);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            GenerateBarCode barCode = new GenerateBarCode();
            String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
            Image image = Image.getInstance(BarCodeFilePath);
            image.scaleAbsolute(150.0F, 30.0F);
            for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 535.0F);
                    pdfContentByte.showText(ReturnPatient);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 520.0F);
                    pdfContentByte.showText(Google);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 500.0F);
                    pdfContentByte.showText(MapSearch);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 485.0F);
                    pdfContentByte.showText(Billboard);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 465.0F);
                    pdfContentByte.showText(OnlineReview);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 450.0F);
                    pdfContentByte.showText(TV);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 435.0F);
                    pdfContentByte.showText(Website);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 415.0F);
                    pdfContentByte.showText(BuildingSignDriveBy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 398.0F);
                    pdfContentByte.showText(Facebook);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 380.0F);
                    pdfContentByte.showText(School);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 380.0F);
                    pdfContentByte.showText(School_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 365.0F);
                    pdfContentByte.showText(Twitter);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 348.0F);
                    pdfContentByte.showText(Magazine);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 348.0F);
                    pdfContentByte.showText(Magazine_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 330.0F);
                    pdfContentByte.showText(Newspaper);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 330.0F);
                    pdfContentByte.showText(Newspaper_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 312.0F);
                    pdfContentByte.showText(FamilyFriend);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 312.0F);
                    pdfContentByte.showText(FamilyFriend_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 295.0F);
                    pdfContentByte.showText(UrgentCare);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0F, 295.0F);
                    pdfContentByte.showText(UrgentCare_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 278.0F);
                    pdfContentByte.showText(CommunityEvent);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 278.0F);
                    pdfContentByte.showText(CommunityEvent_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 225.0F);
                    pdfContentByte.showText(Work_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 210.0F);
                    pdfContentByte.showText(Physician_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 195.0F);
                    pdfContentByte.showText(Other_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 85.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 85.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setTextMatrix(105.0F, 640.0F);
                    pdfContentByte.showText(LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 640.0F);
                    pdfContentByte.showText(FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 640.0F);
                    pdfContentByte.showText(MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 605.0F);
                    pdfContentByte.showText("Title: " + Title);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 600.0F);
                    pdfContentByte.showText(MaritalStatus);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 600.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 600.0F);
                    pdfContentByte.showText(Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510.0F, 600.0F);
                    pdfContentByte.showText(gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 570.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 570.0F);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 570.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 540.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 540.0F);
                    pdfContentByte.showText(Occupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 540.0F);
                    pdfContentByte.showText(Employer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 540.0F);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 510.0F);
                    pdfContentByte.showText(PriCarePhy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 510.0F);
                    pdfContentByte.showText(Email);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 510.0F);
                    pdfContentByte.showText(ReasonVisit);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 445.0F);
                    pdfContentByte.showText(WorkersCompPolicyString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 445.0F);
                    pdfContentByte.showText(MotorVehAccidentString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 415.0F);
                    pdfContentByte.showText(PriInsurance);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(280.0F, 415.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 415.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 375.0F);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 375.0F);
                    pdfContentByte.showText(AddressIfDifferent);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 375.0F);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 335.0F);
                    pdfContentByte.showText(PrimaryDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 335.0F);
                    pdfContentByte.showText(PrimarySSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0F, 335.0F);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 335.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 300.0F);
                    pdfContentByte.showText(PrimaryOccupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 300.0F);
                    pdfContentByte.showText(PrimaryEmployer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 300.0F);
                    pdfContentByte.showText(EmployerAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 300.0F);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 275.0F);
                    pdfContentByte.showText(SecondryInsurance);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 275.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 275.0F);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0F, 240.0F);
                    pdfContentByte.showText(PatientRelationshiptoSecondry);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 240.0F);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 240.0F);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 190.0F);
                    pdfContentByte.showText(NextofKinName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 190.0F);
                    pdfContentByte.showText(RelationToPatientER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 190.0F);
                    pdfContentByte.showText(PhoneNumberER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510.0F, 190.0F);
                    pdfContentByte.showText(LeaveMessageERString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 150.0F);
                    pdfContentByte.showText(AddressER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 150.0F);
                    pdfContentByte.showText(CityStateZipER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 75.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 3) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(325.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 130.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 4) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(285.0F, 70.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 5) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 395.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 250.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                }
                if (i == 6) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(95.0F, 585.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0F, 585.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(490.0F, 585.0F);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 560.0F);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 535.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 510.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 385.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 7) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 490.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 465.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 465.0F);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 440.0F);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 440.0F);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 415.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 240.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 170.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 130.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 8) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 650.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 650.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0F, 610.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 610.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 480.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 440.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0F, 440.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 400.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 360.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                }
                if (i == 9) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (i == 10) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (i == 11) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0F, 750.0F);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
                    image.setAbsolutePosition(10.0F, 710.0F);
                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 765.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 755.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 745.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 735.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 725.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
        } catch (Exception e) {
            out.println(e.getMessage());
        }
    }

    void GETINPUTSublime(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        MergePdf mergePdf = new MergePdf();
        String ResultPdf = "";
        String Path1 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/";
        String Path2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        String State = "";
        String Country = "";
        String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String City = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        String Ethnicity = "";
        String Race = "";
        String TravellingChk = "";
        String TravelWhen = "";
        String TravelWhere = "";
        String TravelHowLong = "";
        String COVIDExposedChk = "";
        String SympFever = "0";
        String SympBodyAches = "0";
        String SympSoreThroat = "0";
        String SympFatigue = "0";
        String SympRash = "0";
        String SympVomiting = "0";
        String SympDiarrhea = "0";
        String SympCough = "0";
        String SympRunnyNose = "0";
        String SympNausea = "0";
        String SympFluSymptoms = "0";
        String CovidExpWhen = "";
        String SpCarePhy = "";
        String SympEyeConjunctivitis = "";
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a workercomp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        String CountryER = "";
        String ZipCodeER = "";
        String DateConcent = "";
        String WitnessConcent = "";
        String PatientBehalfConcent = "";
        String RelativeSignConcent = "";
        String DateConcent2 = "";
        String WitnessConcent2 = "";
        String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        String Work = "";
        String Work_text = "";
        String Physician = "";
        String Physician_text = "";
        String Other = "";
        String Other_text = "";
        int AdmissionBundle = 0;
        String AdmissionBundleCoName = "";
        int SelfPayChk = 0;
        int VerifyChkBox = 0;
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')),  IFNULL(DoctorsName,''), IFNULL(City,''), IFNULL(State,''), IFNULL(ZipCode,''),  CASE WHEN Ethnicity = 1 THEN 'Hispanic or Latino' WHEN Ethnicity = 2 THEN ' Non Hispanic or Latino' WHEN Ethnicity = 3 THEN 'Others' ELSE 'Others' END  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                    City = rset.getString(24);
                    State = rset.getString(25);
                    ZipCode = rset.getString(26);
                    Ethnicity = rset.getString(27);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
                if (!DoctorId.equals("")) {
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next())
                        DoctorName = rset.getString(1);
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            try {
                Query = "Select IFNULL(TravellingChk,0), IFNULL(DATE_FORMAT(TravelWhen,'%Y-%m-%d'),''), IFNULL(TravelWhere,''), IFNULL(TravelHowLong,''), IFNULL(COVIDExposedChk,0), IFNULL(SympFever,0), IFNULL(SympBodyAches,0), IFNULL(SympSoreThroat,0), IFNULL(SympFatigue,0), IFNULL(SympRash,0), IFNULL(SympVomiting,0), IFNULL(SympDiarrhea,0), IFNULL(SympCough,0), IFNULL(SympRunnyNose,0), IFNULL(SympNausea,0), IFNULL(SympFluSymptoms,0), IFNULL(SympEyeConjunctivitis,0), IFNULL(Race,''), IFNULL(DATE_FORMAT(CovidExpWhen,'%Y-%m-%d'),''), IFNULL(SpCarePhy,'')  from " + Database + ".PatientReg_Details where MRN = " + MRN;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    TravellingChk = rset.getString(1);
                    TravelWhen = rset.getString(2);
                    TravelWhere = rset.getString(3);
                    TravelHowLong = rset.getString(4);
                    COVIDExposedChk = rset.getString(5);
                    SympFever = rset.getString(6);
                    SympBodyAches = rset.getString(7);
                    SympSoreThroat = rset.getString(8);
                    SympFatigue = rset.getString(9);
                    SympRash = rset.getString(10);
                    SympVomiting = rset.getString(11);
                    SympDiarrhea = rset.getString(12);
                    SympCough = rset.getString(13);
                    SympRunnyNose = rset.getString(14);
                    SympNausea = rset.getString(15);
                    SympFluSymptoms = rset.getString(16);
                    SympEyeConjunctivitis = rset.getString(17);
                    Race = rset.getString(18);
                    CovidExpWhen = rset.getString(19);
                    SpCarePhy = rset.getString(20);
                }
                rset.close();
                stmt.close();
            } catch (Exception e) {
                out.println("Error in getting PatientReg_Details Table : " + e.getMessage());
            }
            if (SelfPayChk == 1) {
                Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WorkersCompPolicy = rset.getInt(1);
                    MotorVehAccident = rset.getInt(2);
                    if (WorkersCompPolicy == 0) {
                        WorkersCompPolicyString = "Is this a workercomp policy: NO";
                    } else {
                        WorkersCompPolicyString = "Is this a workercomp policy: YES";
                    }
                    if (MotorVehAccident == 0) {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : NO";
                    } else {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES";
                    }
                    PriInsurance = rset.getString(3);
                    MemId = rset.getString(4);
                    GrpNumber = rset.getString(5);
                    PriInsuranceName = rset.getString(6);
                    AddressIfDifferent = rset.getString(7);
                    PrimaryDOB = rset.getString(8);
                    PrimarySSN = rset.getString(9);
                    PatientRelationtoPrimary = rset.getString(10);
                    PrimaryOccupation = rset.getString(11);
                    PrimaryEmployer = rset.getString(12);
                    EmployerAddress = rset.getString(13);
                    EmployerPhone = rset.getString(14);
                    SecondryInsurance = rset.getString(15);
                    SubscriberName = rset.getString(16);
                    SubscriberDOB = rset.getString(17);
                    PatientRelationshiptoSecondry = rset.getString(18);
                    MemberID_2 = rset.getString(19);
                    GroupNumber_2 = rset.getString(20);
                }
                rset.close();
                stmt.close();
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                    continue;
                }
                Other_text = rset.getString(25);
            }
            rset.close();
            stmt.close();
            if (ClientId == 15) {
                Query = " Select IFNULL(AdmissionBundle,0), CASE WHEN AdmissionBundle = 1 THEN 'Aetna Insurance' WHEN AdmissionBundle = 2 THEN 'Blue Cross Blue Shield'  WHEN AdmissionBundle = 3 THEN 'United Healthcare' WHEN AdmissionBundle = 4 THEN 'Other Insurance' ELSE 'Other Insurance' END  from " + Database + ".PatientAdmissionBundle where PatientRegId = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    AdmissionBundle = rset.getInt(1);
                    AdmissionBundleCoName = rset.getString(2);
                }
                rset.close();
                stmt.close();
            }
            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/Prompt_Pay_Agreement.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Prompt_Pay_Agreement_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            int i;
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 280.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 235.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/Workers_Comp_Patient_Form.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Workers_Comp_Patient_Form_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 660.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0F, 660.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 660.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 635.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0F, 635.0F);
                    pdfContentByte.showText(City);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 635.0F);
                    pdfContentByte.showText(State);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 635.0F);
                    pdfContentByte.showText(ZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 585.0F);
                    pdfContentByte.showText(Employer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 560.0F);
                    pdfContentByte.showText(EmployerAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 535.0F);
                    pdfContentByte.showText(Employer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 535.0F);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 510.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/UNITED_HEALTHCARE_INSURANCE_FORM.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/UNITED_HEALTHCARE_INSURANCE_FORM_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0F, 673.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0F, 673.0F);
                    pdfContentByte.showText(PrimaryDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450.0F, 675.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 648.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0F, 650.0F);
                    pdfContentByte.showText(City);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(445.0F, 650.0F);
                    pdfContentByte.showText(State);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 650.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 550.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 525.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 498.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450.0F, 200.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/Other_Appeal_Form.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Other_Appeal_Form_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 655.0F);
                    pdfContentByte.showText(AdmissionBundleCoName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 542.0F);
                    pdfContentByte.showText(Title + " " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 520.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 500.0F);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 440.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 220.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 190.0F);
                    pdfContentByte.showText(" " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 122.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 90.0F);
                    pdfContentByte.showText(" " + FirstName + " " + LastName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/BCBS_Appeal_Form.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/BCBS_Appeal_Form_" + ClientId + "_" + MRN + ".pdf";
            FileOutputStream fos2 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader2 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            for (int j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0F, 570.0F);
                    pdfContentByte2.showText(FirstName + " " + LastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0F, 550.0F);
                    pdfContentByte2.showText(GrpNumber);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0F, 525.0F);
                    pdfContentByte2.showText(SubscriberName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0F, 465.0F);
                    pdfContentByte2.showText(DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(380.0F, 220.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(100.0F, 185.0F);
                    pdfContentByte2.showText(FirstName + " " + LastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(380.0F, 112.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(100.0F, 75.0F);
                    pdfContentByte2.showText(FirstName + " " + LastName);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            String inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/Aetna_Appeal_Form.pdf";
            String outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Aetna_Appeal_Form_" + ClientId + "_" + MRN + ".pdf";
            FileOutputStream fos3 = new FileOutputStream(new File(outputFilePathTmp2));
            PdfReader pdfReader3 = new PdfReader("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/Aetna_Appeal_Form.pdf");
            PdfStamper pdfStamper3 = new PdfStamper(pdfReader3, fos3);
            for (int k = 1; k <= pdfReader3.getNumberOfPages(); k++) {
                if (k == 1) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(140.0F, 645.0F);
                    pdfContentByte3.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(140.0F, 620.0F);
                    pdfContentByte3.showText("SUBLIME CARE EMERGENCY ROOM");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(140.0F, 585.0F);
                    pdfContentByte3.showText(DOS + "    ER SERVICES");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(120.0F, 565.0F);
                    pdfContentByte3.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(120.0F, 535.0F);
                    pdfContentByte3.showText("SUBLIME CARE EMERGENCY ROOM");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0F, 170.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(110.0F, 145.0F);
                    pdfContentByte3.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte3.endText();
                }
            }
            pdfStamper3.close();
            if (SelfPayChk == 0) {
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/GeneralForm_Sublime.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Prompt_Pay_Agreement_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Sublime/Result_" + ClientId + "_" + MRN + ".pdf";
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/GeneralForm_Sublime.pdf";
                if (WorkersCompPolicy == 1) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Workers_Comp_Patient_Form_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Sublime/Result_" + ClientId + "_" + MRN + ".pdf";
                } else {
                    ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/GeneralForm_Sublime.pdf";
                }
                if (AdmissionBundle == 1) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Aetna_Appeal_Form_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Sublime/Result_" + ClientId + "_" + MRN + ".pdf";
                } else if (AdmissionBundle == 2) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/BCBS_Appeal_Form_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Sublime/Result_" + ClientId + "_" + MRN + ".pdf";
                } else if (AdmissionBundle == 3) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/UNITED_HEALTHCARE_INSURANCE_FORM_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Sublime/Result_" + ClientId + "_" + MRN + ".pdf";
                } else if (AdmissionBundle == 4) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Other_Appeal_Form_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Sublime/Result_" + ClientId + "_" + MRN + ".pdf";
                } else {
                    ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/GeneralForm_Sublime.pdf";
                }
            }
            String inputFilePath = "";
            inputFilePath = ResultPdf;
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + MRN + "_" + DateTime + ".pdf";
            OutputStream fos4 = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader4 = new PdfReader(inputFilePath);
            PdfStamper pdfStamper4 = new PdfStamper(pdfReader4, fos4);
            GenerateBarCode barCode = new GenerateBarCode();
            String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
            Image image = Image.getInstance(BarCodeFilePath);
            image.scaleAbsolute(150.0F, 30.0F);
            for (int l = 1; l <= pdfReader4.getNumberOfPages(); l++) {
                if (l == 1) {
                    PdfContentByte pdfContentByte4 = pdfStamper4.getOverContent(l);
                    image.setAbsolutePosition(10.0F, 750.0F);
                    pdfContentByte4.addImage(image);
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 710.0F);
                    pdfContentByte4.showText(LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(340.0F, 710.0F);
                    pdfContentByte4.showText(FirstName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(530.0F, 710.0F);
                    pdfContentByte4.showText(MiddleInitial);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(70.0F, 692.0F);
                    pdfContentByte4.showText(DOB);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(175.0F, 692.0F);
                    pdfContentByte4.showText(SSN);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(365.0F, 692.0F);
                    pdfContentByte4.showText("(" + gender + ")");
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(580.0F, 692.0F);
                    pdfContentByte4.showText("(" + MaritalStatus + ")");
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(160.0F, 665.0F);
                    pdfContentByte4.showText("(" + Race + ")");
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(365.0F, 655.0F);
                    pdfContentByte4.showText("(" + Ethnicity + ")");
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(85.0F, 642.0F);
                    pdfContentByte4.showText(Address);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(350.0F, 642.0F);
                    pdfContentByte4.showText(City);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(460.0F, 642.0F);
                    pdfContentByte4.showText(State);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(530.0F, 642.0F);
                    pdfContentByte4.showText(ZipCode);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 628.0F);
                    pdfContentByte4.showText(PhNumber);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(350.0F, 628.0F);
                    pdfContentByte4.showText(PhNumber);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 615.0F);
                    pdfContentByte4.showText(Employer);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(350.0F, 615.0F);
                    pdfContentByte4.showText(EmpContact);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(80.0F, 602.0F);
                    pdfContentByte4.showText(Email);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(350.0F, 602.0F);
                    pdfContentByte4.showText(PriCarePhy);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(405.0F, 232.0F);
                    pdfContentByte4.showText("---Patient Relationship (" + PatientRelationtoPrimary + ")");
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 222.0F);
                    pdfContentByte4.showText(LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(320.0F, 222.0F);
                    pdfContentByte4.showText(FirstName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(445.0F, 222.0F);
                    pdfContentByte4.showText(MiddleInitial);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(80.0F, 205.0F);
                    pdfContentByte4.showText(PrimaryDOB);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(190.0F, 205.0F);
                    pdfContentByte4.showText(PrimarySSN);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(380.0F, 205.0F);
                    pdfContentByte4.showText("(" + gender + ")");
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(85.0F, 190.0F);
                    pdfContentByte4.showText(AddressIfDifferent);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(300.0F, 190.0F);
                    pdfContentByte4.showText(City);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(405.0F, 190.0F);
                    pdfContentByte4.showText(State);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(445.0F, 190.0F);
                    pdfContentByte4.showText(ZipCode);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(100.0F, 175.0F);
                    pdfContentByte4.showText(PhNumber);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(345.0F, 175.0F);
                    pdfContentByte4.showText(PhNumber);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(100.0F, 160.0F);
                    pdfContentByte4.showText(PrimaryEmployer);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(345.0F, 160.0F);
                    pdfContentByte4.showText(EmployerPhone);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(440.0F, 70.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                }
                if (l == 2) {
                    String MM = "";
                    String DD = "";
                    String YYYY = "";
                    String[] SplitDate = Date.split("\\/");
                    MM = SplitDate[0];
                    DD = SplitDate[1];
                    YYYY = SplitDate[2];
                    PdfContentByte pdfContentByte5 = pdfStamper4.getOverContent(l);
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(105.0F, 640.0F);
                    pdfContentByte5.showText(MM);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(145.0F, 640.0F);
                    pdfContentByte5.showText(DD);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(175.0F, 640.0F);
                    pdfContentByte5.showText(YYYY);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(300.0F, 638.0F);
                    pdfContentByte5.showText("(" + gender + ")");
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(175.0F, 590.0F);
                    pdfContentByte5.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(105.0F, 572.0F);
                    pdfContentByte5.showText(MM);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(145.0F, 572.0F);
                    pdfContentByte5.showText(DD);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(175.0F, 572.0F);
                    pdfContentByte5.showText(YYYY);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(450.0F, 572.0F);
                    pdfContentByte5.showText(DOS);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(125.0F, 558.0F);
                    pdfContentByte5.showText(Address);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(410.0F, 558.0F);
                    pdfContentByte5.showText(PhNumber);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(150.0F, 542.0F);
                    pdfContentByte5.showText(CityStateZip);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(180.0F, 495.0F);
                    pdfContentByte5.showText(ReasonVisit);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(180.0F, 440.0F);
                    pdfContentByte5.showText(Email);
                    pdfContentByte5.endText();
                    if (TravellingChk.trim().toUpperCase().equals("YES")) {
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(455.0F, 388.0F);
                        pdfContentByte5.showText("YES");
                        pdfContentByte5.endText();
                    } else if (TravellingChk.trim().toUpperCase().equals("NO")) {
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(527.0F, 388.0F);
                        pdfContentByte5.showText("NO");
                        pdfContentByte5.endText();
                    } else {
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(455.0F, 388.0F);
                        pdfContentByte5.showText("");
                        pdfContentByte5.endText();
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(527.0F, 388.0F);
                        pdfContentByte5.showText("");
                        pdfContentByte5.endText();
                    }
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(160.0F, 373.0F);
                    pdfContentByte5.showText(TravelWhere);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(280.0F, 373.0F);
                    pdfContentByte5.showText(TravelWhen);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(390.0F, 373.0F);
                    pdfContentByte5.showText(TravelHowLong);
                    pdfContentByte5.endText();
                    if (COVIDExposedChk.trim().toUpperCase().equals("YES")) {
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(505.0F, 320.0F);
                        pdfContentByte5.showText("YES");
                        pdfContentByte5.endText();
                    } else if (COVIDExposedChk.trim().toUpperCase().equals("NO")) {
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(545.0F, 320.0F);
                        pdfContentByte5.showText("NO");
                        pdfContentByte5.endText();
                    } else {
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(505.0F, 320.0F);
                        pdfContentByte5.showText("");
                        pdfContentByte5.endText();
                        pdfContentByte5.beginText();
                        pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte5.setColorFill(BaseColor.BLACK);
                        pdfContentByte5.setTextMatrix(545.0F, 320.0F);
                        pdfContentByte5.showText("NO");
                        pdfContentByte5.endText();
                    }
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(85.0F, 220.0F);
                    pdfContentByte5.showText(SympFever);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(230.0F, 220.0F);
                    pdfContentByte5.showText(SympRash);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(335.0F, 220.0F);
                    pdfContentByte5.showText(SympCough);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(85.0F, 205.0F);
                    pdfContentByte5.showText(SympBodyAches);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(230.0F, 205.0F);
                    pdfContentByte5.showText(SympVomiting);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(335.0F, 205.0F);
                    pdfContentByte5.showText(SympRunnyNose);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(85.0F, 188.0F);
                    pdfContentByte5.showText(SympSoreThroat);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(230.0F, 188.0F);
                    pdfContentByte5.showText(SympDiarrhea);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(335.0F, 188.0F);
                    pdfContentByte5.showText(SympNausea);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(85.0F, 170.0F);
                    pdfContentByte5.showText(SympFluSymptoms);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(230.0F, 170.0F);
                    pdfContentByte5.showText(SympCough);
                    pdfContentByte5.endText();
                    pdfContentByte5.beginText();
                    pdfContentByte5.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte5.setColorFill(BaseColor.BLACK);
                    pdfContentByte5.setTextMatrix(335.0F, 170.0F);
                    pdfContentByte5.showText(SympEyeConjunctivitis);
                    pdfContentByte5.endText();
                }
                if (l == 3) {
                    PdfContentByte pdfContentByte4 = pdfStamper4.getOverContent(l);
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 175.0F);
                    pdfContentByte4.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(420.0F, 110.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                }
                if (l == 4) {
                    PdfContentByte pdfContentByte4 = pdfStamper4.getOverContent(l);
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 225.0F);
                    pdfContentByte4.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(450.0F, 175.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(450.0F, 150.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                }
                if (l == 5) {
                    PdfContentByte pdfContentByte4 = pdfStamper4.getOverContent(l);
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(110.0F, 225.0F);
                    pdfContentByte4.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(450.0F, 135.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                }
                if (l == 8) {
                    PdfContentByte pdfContentByte4 = pdfStamper4.getOverContent(l);
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(385.0F, 50.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                }
                if (l == 9) {
                    PdfContentByte pdfContentByte4 = pdfStamper4.getOverContent(l);
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(130.0F, 440.0F);
                    pdfContentByte4.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(440.0F, 395.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(130.0F, 170.0F);
                    pdfContentByte4.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte4.endText();
                    pdfContentByte4.beginText();
                    pdfContentByte4.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte4.setColorFill(BaseColor.BLACK);
                    pdfContentByte4.setTextMatrix(440.0F, 130.0F);
                    pdfContentByte4.showText(Date);
                    pdfContentByte4.endText();
                }
            }
            pdfStamper4.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Workers_Comp_Patient_Form_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/UNITED_HEALTHCARE_INSURANCE_FORM_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Prompt_Pay_Agreement_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Other_Appeal_Form_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/BCBS_Appeal_Form_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/SublimePdfs/TempDir/Aetna_Appeal_Form_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
        } catch (Exception e) {
            out.println(e.getMessage());
        }
    }

    void GETINPUTConcho(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        // Byte code:
        //   0: aconst_null
        //   1: astore #10
        //   3: aconst_null
        //   4: astore #11
        //   6: ldc ''
        //   8: astore #12
        //   10: iconst_0
        //   11: istore #13
        //   13: ldc ''
        //   15: astore #14
        //   17: ldc ''
        //   19: astore #15
        //   21: ldc ''
        //   23: astore #16
        //   25: ldc ''
        //   27: astore #17
        //   29: new md/MergePdf
        //   32: dup
        //   33: invokespecial <init> : ()V
        //   36: astore #18
        //   38: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/'
        //   41: astore #19
        //   43: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/'
        //   46: astore #20
        //   48: ldc ''
        //   50: astore #21
        //   52: ldc ''
        //   54: astore #22
        //   56: ldc ''
        //   58: astore #23
        //   60: ldc ''
        //   62: astore #24
        //   64: ldc ''
        //   66: astore #25
        //   68: ldc ''
        //   70: astore #26
        //   72: ldc ''
        //   74: astore #27
        //   76: ldc ''
        //   78: astore #28
        //   80: ldc ''
        //   82: astore #29
        //   84: ldc ''
        //   86: astore #30
        //   88: ldc ''
        //   90: astore #31
        //   92: ldc ''
        //   94: astore #32
        //   96: ldc ''
        //   98: astore #33
        //   100: ldc ''
        //   102: astore #34
        //   104: ldc ''
        //   106: astore #35
        //   108: ldc ''
        //   110: astore #36
        //   112: ldc ''
        //   114: astore #37
        //   116: ldc ''
        //   118: astore #38
        //   120: ldc ''
        //   122: astore #39
        //   124: ldc ''
        //   126: astore #40
        //   128: ldc ''
        //   130: astore #41
        //   132: ldc ''
        //   134: astore #42
        //   136: ldc ''
        //   138: astore #43
        //   140: iconst_0
        //   141: istore #44
        //   143: ldc ''
        //   145: astore #45
        //   147: ldc ''
        //   149: astore #46
        //   151: aconst_null
        //   152: astore #47
        //   154: aconst_null
        //   155: astore #48
        //   157: ldc ''
        //   159: astore #49
        //   161: ldc ''
        //   163: astore #50
        //   165: ldc ''
        //   167: astore #51
        //   169: ldc ''
        //   171: astore #52
        //   173: ldc ''
        //   175: astore #53
        //   177: ldc ''
        //   179: astore #54
        //   181: ldc ''
        //   183: astore #55
        //   185: ldc ''
        //   187: astore #56
        //   189: ldc ''
        //   191: astore #57
        //   193: ldc ''
        //   195: astore #58
        //   197: ldc ''
        //   199: astore #59
        //   201: ldc ''
        //   203: astore #60
        //   205: ldc ''
        //   207: astore #61
        //   209: ldc ''
        //   211: astore #62
        //   213: ldc ''
        //   215: astore #63
        //   217: ldc ''
        //   219: astore #64
        //   221: ldc ''
        //   223: astore #65
        //   225: ldc ''
        //   227: astore #66
        //   229: ldc ''
        //   231: astore #67
        //   233: iconst_0
        //   234: istore #68
        //   236: ldc ''
        //   238: astore #69
        //   240: iconst_0
        //   241: istore #70
        //   243: ldc ''
        //   245: astore #71
        //   247: ldc ''
        //   249: astore #72
        //   251: ldc ''
        //   253: astore #73
        //   255: ldc ''
        //   257: astore #74
        //   259: ldc ''
        //   261: astore #75
        //   263: ldc ''
        //   265: astore #76
        //   267: ldc ''
        //   269: astore #77
        //   271: ldc ''
        //   273: astore #78
        //   275: ldc ''
        //   277: astore #79
        //   279: ldc ''
        //   281: astore #80
        //   283: ldc ''
        //   285: astore #81
        //   287: ldc ''
        //   289: astore #82
        //   291: ldc ''
        //   293: astore #83
        //   295: ldc ''
        //   297: astore #84
        //   299: ldc ''
        //   301: astore #85
        //   303: ldc ''
        //   305: astore #86
        //   307: ldc ''
        //   309: astore #87
        //   311: ldc ''
        //   313: astore #88
        //   315: ldc ''
        //   317: astore #89
        //   319: ldc ''
        //   321: astore #90
        //   323: ldc ''
        //   325: astore #91
        //   327: ldc ''
        //   329: astore #92
        //   331: iconst_0
        //   332: istore #93
        //   334: ldc ''
        //   336: astore #94
        //   338: ldc ''
        //   340: astore #95
        //   342: ldc ''
        //   344: astore #96
        //   346: ldc ''
        //   348: astore #97
        //   350: ldc ''
        //   352: astore #98
        //   354: ldc ''
        //   356: astore #99
        //   358: ldc ''
        //   360: astore #100
        //   362: ldc ''
        //   364: astore #101
        //   366: ldc ''
        //   368: astore #102
        //   370: ldc ''
        //   372: astore #103
        //   374: ldc ''
        //   376: astore #104
        //   378: ldc ''
        //   380: astore #105
        //   382: ldc ''
        //   384: astore #106
        //   386: ldc ''
        //   388: astore #107
        //   390: ldc ''
        //   392: astore #108
        //   394: ldc ''
        //   396: astore #109
        //   398: ldc ''
        //   400: astore #110
        //   402: ldc ''
        //   404: astore #111
        //   406: ldc ''
        //   408: astore #112
        //   410: ldc ''
        //   412: astore #113
        //   414: ldc ''
        //   416: astore #114
        //   418: ldc ''
        //   420: astore #115
        //   422: ldc ''
        //   424: astore #116
        //   426: ldc ''
        //   428: astore #117
        //   430: ldc ''
        //   432: astore #118
        //   434: ldc ''
        //   436: astore #119
        //   438: ldc ''
        //   440: astore #120
        //   442: ldc ''
        //   444: astore #121
        //   446: ldc ''
        //   448: astore #122
        //   450: ldc ''
        //   452: astore #123
        //   454: ldc ''
        //   456: astore #124
        //   458: ldc ''
        //   460: astore #125
        //   462: ldc ''
        //   464: astore #126
        //   466: ldc ''
        //   468: astore #127
        //   470: ldc ''
        //   472: astore #128
        //   474: ldc ''
        //   476: astore #129
        //   478: ldc ''
        //   480: astore #130
        //   482: ldc ''
        //   484: astore #131
        //   486: ldc ''
        //   488: astore #132
        //   490: ldc ''
        //   492: astore #133
        //   494: ldc ''
        //   496: astore #134
        //   498: ldc ''
        //   500: astore #135
        //   502: iconst_0
        //   503: istore #136
        //   505: iconst_0
        //   506: istore #137
        //   508: aload_1
        //   509: ldc 'ID'
        //   511: invokeinterface getParameter : (Ljava/lang/String;)Ljava/lang/String;
        //   516: invokevirtual trim : ()Ljava/lang/String;
        //   519: invokestatic parseInt : (Ljava/lang/String;)I
        //   522: istore #138
        //   524: ldc 'select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')'
        //   526: astore #12
        //   528: aload_3
        //   529: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   534: astore #10
        //   536: aload #10
        //   538: aload #12
        //   540: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   545: astore #11
        //   547: aload #11
        //   549: invokeinterface next : ()Z
        //   554: ifeq -> 587
        //   557: aload #11
        //   559: iconst_1
        //   560: invokeinterface getString : (I)Ljava/lang/String;
        //   565: astore #14
        //   567: aload #11
        //   569: iconst_2
        //   570: invokeinterface getString : (I)Ljava/lang/String;
        //   575: astore #15
        //   577: aload #11
        //   579: iconst_3
        //   580: invokeinterface getString : (I)Ljava/lang/String;
        //   585: astore #16
        //   587: aload #11
        //   589: invokeinterface close : ()V
        //   594: aload #10
        //   596: invokeinterface close : ()V
        //   601: new java/lang/StringBuilder
        //   604: dup
        //   605: invokespecial <init> : ()V
        //   608: ldc_w ' Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-'),  CASE WHEN Ethnicity = 1 THEN 'Hispanic or Latino' WHEN Ethnicity = 2 THEN ' Non Hispanic or Latino' WHEN Ethnicity = 3 THEN 'Others' ELSE 'Others' END  From '
        //   611: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   614: aload #7
        //   616: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   619: ldc '.PatientReg Where ID = '
        //   621: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   624: iload #138
        //   626: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   629: invokevirtual toString : ()Ljava/lang/String;
        //   632: astore #12
        //   634: aload_3
        //   635: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   640: astore #10
        //   642: aload #10
        //   644: aload #12
        //   646: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   651: astore #11
        //   653: aload #11
        //   655: invokeinterface next : ()Z
        //   660: ifeq -> 952
        //   663: iload #138
        //   665: istore #13
        //   667: aload #11
        //   669: iconst_1
        //   670: invokeinterface getString : (I)Ljava/lang/String;
        //   675: invokevirtual trim : ()Ljava/lang/String;
        //   678: astore #24
        //   680: aload #11
        //   682: iconst_2
        //   683: invokeinterface getString : (I)Ljava/lang/String;
        //   688: invokevirtual trim : ()Ljava/lang/String;
        //   691: astore #22
        //   693: aload #22
        //   695: ldc '\s+'
        //   697: ldc ''
        //   699: invokevirtual replaceAll : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //   702: astore #23
        //   704: aload #11
        //   706: iconst_3
        //   707: invokeinterface getString : (I)Ljava/lang/String;
        //   712: invokevirtual trim : ()Ljava/lang/String;
        //   715: astore #25
        //   717: aload #11
        //   719: iconst_4
        //   720: invokeinterface getString : (I)Ljava/lang/String;
        //   725: invokevirtual trim : ()Ljava/lang/String;
        //   728: astore #21
        //   730: aload #11
        //   732: iconst_5
        //   733: invokeinterface getString : (I)Ljava/lang/String;
        //   738: astore #26
        //   740: aload #11
        //   742: bipush #6
        //   744: invokeinterface getString : (I)Ljava/lang/String;
        //   749: astore #27
        //   751: aload #11
        //   753: bipush #7
        //   755: invokeinterface getString : (I)Ljava/lang/String;
        //   760: astore #28
        //   762: aload #11
        //   764: bipush #8
        //   766: invokeinterface getString : (I)Ljava/lang/String;
        //   771: astore #29
        //   773: aload #11
        //   775: bipush #9
        //   777: invokeinterface getString : (I)Ljava/lang/String;
        //   782: astore #32
        //   784: aload #11
        //   786: bipush #10
        //   788: invokeinterface getString : (I)Ljava/lang/String;
        //   793: astore #33
        //   795: aload #11
        //   797: bipush #11
        //   799: invokeinterface getString : (I)Ljava/lang/String;
        //   804: astore #31
        //   806: aload #11
        //   808: bipush #12
        //   810: invokeinterface getString : (I)Ljava/lang/String;
        //   815: astore #37
        //   817: aload #11
        //   819: bipush #13
        //   821: invokeinterface getString : (I)Ljava/lang/String;
        //   826: astore #38
        //   828: aload #11
        //   830: bipush #14
        //   832: invokeinterface getString : (I)Ljava/lang/String;
        //   837: astore #39
        //   839: aload #11
        //   841: bipush #15
        //   843: invokeinterface getString : (I)Ljava/lang/String;
        //   848: astore #40
        //   850: aload #11
        //   852: bipush #16
        //   854: invokeinterface getString : (I)Ljava/lang/String;
        //   859: astore #41
        //   861: aload #11
        //   863: bipush #17
        //   865: invokeinterface getString : (I)Ljava/lang/String;
        //   870: astore #30
        //   872: aload #11
        //   874: bipush #18
        //   876: invokeinterface getString : (I)Ljava/lang/String;
        //   881: astore #42
        //   883: aload #11
        //   885: bipush #19
        //   887: invokeinterface getInt : (I)I
        //   892: istore #136
        //   894: aload #11
        //   896: bipush #20
        //   898: invokeinterface getString : (I)Ljava/lang/String;
        //   903: astore #43
        //   905: aload #11
        //   907: bipush #21
        //   909: invokeinterface getInt : (I)I
        //   914: istore #44
        //   916: aload #11
        //   918: bipush #22
        //   920: invokeinterface getString : (I)Ljava/lang/String;
        //   925: astore #46
        //   927: aload #11
        //   929: bipush #23
        //   931: invokeinterface getString : (I)Ljava/lang/String;
        //   936: astore #47
        //   938: aload #11
        //   940: bipush #24
        //   942: invokeinterface getString : (I)Ljava/lang/String;
        //   947: astore #49
        //   949: goto -> 653
        //   952: aload #11
        //   954: invokeinterface close : ()V
        //   959: aload #10
        //   961: invokeinterface close : ()V
        //   966: new java/lang/StringBuilder
        //   969: dup
        //   970: invokespecial <init> : ()V
        //   973: ldc 'Select name from oe.clients where Id = '
        //   975: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   978: iload #8
        //   980: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   983: invokevirtual toString : ()Ljava/lang/String;
        //   986: astore #12
        //   988: aload_3
        //   989: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   994: astore #10
        //   996: aload #10
        //   998: aload #12
        //   1000: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1005: astore #11
        //   1007: aload #11
        //   1009: invokeinterface next : ()Z
        //   1014: ifeq -> 1027
        //   1017: aload #11
        //   1019: iconst_1
        //   1020: invokeinterface getString : (I)Ljava/lang/String;
        //   1025: astore #45
        //   1027: aload #11
        //   1029: invokeinterface close : ()V
        //   1034: aload #10
        //   1036: invokeinterface close : ()V
        //   1041: new java/lang/StringBuilder
        //   1044: dup
        //   1045: invokespecial <init> : ()V
        //   1048: ldc 'Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from '
        //   1050: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1053: aload #7
        //   1055: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1058: ldc '.DoctorsList where Id = '
        //   1060: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1063: aload #47
        //   1065: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1068: invokevirtual toString : ()Ljava/lang/String;
        //   1071: astore #12
        //   1073: aload_3
        //   1074: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1079: astore #10
        //   1081: aload #10
        //   1083: aload #12
        //   1085: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1090: astore #11
        //   1092: aload #11
        //   1094: invokeinterface next : ()Z
        //   1099: ifeq -> 1115
        //   1102: aload #11
        //   1104: iconst_1
        //   1105: invokeinterface getString : (I)Ljava/lang/String;
        //   1110: astore #48
        //   1112: goto -> 1092
        //   1115: aload #11
        //   1117: invokeinterface close : ()V
        //   1122: aload #10
        //   1124: invokeinterface close : ()V
        //   1129: goto -> 1167
        //   1132: astore #139
        //   1134: aload_2
        //   1135: new java/lang/StringBuilder
        //   1138: dup
        //   1139: invokespecial <init> : ()V
        //   1142: ldc 'Error In PateintReg:--'
        //   1144: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1147: aload #139
        //   1149: invokevirtual getMessage : ()Ljava/lang/String;
        //   1152: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1155: invokevirtual toString : ()Ljava/lang/String;
        //   1158: invokevirtual println : (Ljava/lang/String;)V
        //   1161: aload_2
        //   1162: aload #12
        //   1164: invokevirtual println : (Ljava/lang/String;)V
        //   1167: new java/lang/StringBuilder
        //   1170: dup
        //   1171: invokespecial <init> : ()V
        //   1174: ldc_w ' Select CASE WHEN TravellingChk = 1 THEN 'YES' WHEN TravellingChk = 0 THEN 'NO' ELSE 'NO' END, IFNULL(DATE_FORMAT(TravelWhen,'%m/%d/%Y'),''),  IFNULL(TravelWhere,''), IFNULL(TravelHowLong,''), CASE WHEN COVIDExposedChk = 1 THEN 'YES' WHEN COVIDExposedChk = 0 THEN 'NO' ELSE 'NO' END,  CASE WHEN SympFever = 1 THEN 'YES' ELSE '' END, CASE WHEN SympBodyAches = 1 THEN 'YES' ELSE '' END, CASE WHEN SympSoreThroat = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympFatigue = 1 THEN 'YES' ELSE '' END,CASE WHEN SympRash = 1 THEN 'YES' ELSE '' END, CASE WHEN SympVomiting = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympDiarrhea = 1 THEN 'YES' ELSE '' END, CASE WHEN SympCough = 1 THEN 'YES' ELSE '' END, CASE WHEN SympRunnyNose = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympNausea = 1 THEN 'YES' ELSE '' END, CASE WHEN SympFluSymptoms = 1 THEN 'YES' ELSE '' END, CASE WHEN SympEyeConjunctivitis = 1 THEN 'YES' ELSE '' END,  CASE WHEN Race = 1 THEN 'African American' WHEN Race = 2 THEN 'American Indian or Alska Native' WHEN Race = 3 THEN 'Asian' WHEN Race = 4 THEN 'Native Hawaiian or Other Pacific Islander'  WHEN Race = 5 THEN 'White' WHEN Race = 6 THEN 'Others' ELSE 'Others' END  from '
        //   1177: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1180: aload #7
        //   1182: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1185: ldc_w '.PatientReg_Details where PatientRegId = '
        //   1188: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1191: iload #13
        //   1193: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   1196: invokevirtual toString : ()Ljava/lang/String;
        //   1199: astore #12
        //   1201: aload_3
        //   1202: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1207: astore #10
        //   1209: aload #10
        //   1211: aload #12
        //   1213: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1218: astore #11
        //   1220: aload #11
        //   1222: invokeinterface next : ()Z
        //   1227: ifeq -> 1426
        //   1230: aload #11
        //   1232: iconst_1
        //   1233: invokeinterface getString : (I)Ljava/lang/String;
        //   1238: astore #51
        //   1240: aload #11
        //   1242: iconst_2
        //   1243: invokeinterface getString : (I)Ljava/lang/String;
        //   1248: astore #52
        //   1250: aload #11
        //   1252: iconst_3
        //   1253: invokeinterface getString : (I)Ljava/lang/String;
        //   1258: astore #53
        //   1260: aload #11
        //   1262: iconst_4
        //   1263: invokeinterface getString : (I)Ljava/lang/String;
        //   1268: astore #54
        //   1270: aload #11
        //   1272: iconst_5
        //   1273: invokeinterface getString : (I)Ljava/lang/String;
        //   1278: astore #55
        //   1280: aload #11
        //   1282: bipush #6
        //   1284: invokeinterface getString : (I)Ljava/lang/String;
        //   1289: astore #56
        //   1291: aload #11
        //   1293: bipush #7
        //   1295: invokeinterface getString : (I)Ljava/lang/String;
        //   1300: astore #57
        //   1302: aload #11
        //   1304: bipush #8
        //   1306: invokeinterface getString : (I)Ljava/lang/String;
        //   1311: astore #58
        //   1313: aload #11
        //   1315: bipush #9
        //   1317: invokeinterface getString : (I)Ljava/lang/String;
        //   1322: astore #59
        //   1324: aload #11
        //   1326: bipush #10
        //   1328: invokeinterface getString : (I)Ljava/lang/String;
        //   1333: astore #60
        //   1335: aload #11
        //   1337: bipush #11
        //   1339: invokeinterface getString : (I)Ljava/lang/String;
        //   1344: astore #61
        //   1346: aload #11
        //   1348: bipush #12
        //   1350: invokeinterface getString : (I)Ljava/lang/String;
        //   1355: astore #62
        //   1357: aload #11
        //   1359: bipush #13
        //   1361: invokeinterface getString : (I)Ljava/lang/String;
        //   1366: astore #63
        //   1368: aload #11
        //   1370: bipush #14
        //   1372: invokeinterface getString : (I)Ljava/lang/String;
        //   1377: astore #64
        //   1379: aload #11
        //   1381: bipush #15
        //   1383: invokeinterface getString : (I)Ljava/lang/String;
        //   1388: astore #65
        //   1390: aload #11
        //   1392: bipush #16
        //   1394: invokeinterface getString : (I)Ljava/lang/String;
        //   1399: astore #66
        //   1401: aload #11
        //   1403: bipush #17
        //   1405: invokeinterface getString : (I)Ljava/lang/String;
        //   1410: astore #67
        //   1412: aload #11
        //   1414: bipush #18
        //   1416: invokeinterface getString : (I)Ljava/lang/String;
        //   1421: astore #50
        //   1423: goto -> 1220
        //   1426: aload #11
        //   1428: invokeinterface close : ()V
        //   1433: aload #10
        //   1435: invokeinterface close : ()V
        //   1440: goto -> 1473
        //   1443: astore #139
        //   1445: aload_2
        //   1446: new java/lang/StringBuilder
        //   1449: dup
        //   1450: invokespecial <init> : ()V
        //   1453: ldc_w 'Error in getting PatientReg_Details Table : '
        //   1456: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1459: aload #139
        //   1461: invokevirtual getMessage : ()Ljava/lang/String;
        //   1464: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1467: invokevirtual toString : ()Ljava/lang/String;
        //   1470: invokevirtual println : (Ljava/lang/String;)V
        //   1473: iload #136
        //   1475: iconst_1
        //   1476: if_icmpne -> 1806
        //   1479: new java/lang/StringBuilder
        //   1482: dup
        //   1483: invokespecial <init> : ()V
        //   1486: ldc ' Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from '
        //   1488: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1491: aload #7
        //   1493: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1496: ldc '.InsuranceInfo  where PatientRegId = '
        //   1498: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1501: iload #138
        //   1503: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   1506: invokevirtual toString : ()Ljava/lang/String;
        //   1509: astore #12
        //   1511: aload_3
        //   1512: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1517: astore #10
        //   1519: aload #10
        //   1521: aload #12
        //   1523: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1528: astore #11
        //   1530: aload #11
        //   1532: invokeinterface next : ()Z
        //   1537: ifeq -> 1792
        //   1540: aload #11
        //   1542: iconst_1
        //   1543: invokeinterface getInt : (I)I
        //   1548: istore #68
        //   1550: aload #11
        //   1552: iconst_2
        //   1553: invokeinterface getInt : (I)I
        //   1558: istore #70
        //   1560: iload #68
        //   1562: ifne -> 1573
        //   1565: ldc_w 'NO'
        //   1568: astore #69
        //   1570: goto -> 1577
        //   1573: ldc 'YES'
        //   1575: astore #69
        //   1577: iload #70
        //   1579: ifne -> 1590
        //   1582: ldc_w 'NO'
        //   1585: astore #71
        //   1587: goto -> 1594
        //   1590: ldc 'YES'
        //   1592: astore #71
        //   1594: aload #11
        //   1596: iconst_3
        //   1597: invokeinterface getString : (I)Ljava/lang/String;
        //   1602: astore #72
        //   1604: aload #11
        //   1606: iconst_4
        //   1607: invokeinterface getString : (I)Ljava/lang/String;
        //   1612: astore #73
        //   1614: aload #11
        //   1616: iconst_5
        //   1617: invokeinterface getString : (I)Ljava/lang/String;
        //   1622: astore #74
        //   1624: aload #11
        //   1626: bipush #6
        //   1628: invokeinterface getString : (I)Ljava/lang/String;
        //   1633: astore #75
        //   1635: aload #11
        //   1637: bipush #7
        //   1639: invokeinterface getString : (I)Ljava/lang/String;
        //   1644: astore #76
        //   1646: aload #11
        //   1648: bipush #8
        //   1650: invokeinterface getString : (I)Ljava/lang/String;
        //   1655: astore #77
        //   1657: aload #11
        //   1659: bipush #9
        //   1661: invokeinterface getString : (I)Ljava/lang/String;
        //   1666: astore #78
        //   1668: aload #11
        //   1670: bipush #10
        //   1672: invokeinterface getString : (I)Ljava/lang/String;
        //   1677: astore #79
        //   1679: aload #11
        //   1681: bipush #11
        //   1683: invokeinterface getString : (I)Ljava/lang/String;
        //   1688: astore #80
        //   1690: aload #11
        //   1692: bipush #12
        //   1694: invokeinterface getString : (I)Ljava/lang/String;
        //   1699: astore #81
        //   1701: aload #11
        //   1703: bipush #13
        //   1705: invokeinterface getString : (I)Ljava/lang/String;
        //   1710: astore #82
        //   1712: aload #11
        //   1714: bipush #14
        //   1716: invokeinterface getString : (I)Ljava/lang/String;
        //   1721: astore #83
        //   1723: aload #11
        //   1725: bipush #15
        //   1727: invokeinterface getString : (I)Ljava/lang/String;
        //   1732: astore #84
        //   1734: aload #11
        //   1736: bipush #16
        //   1738: invokeinterface getString : (I)Ljava/lang/String;
        //   1743: astore #85
        //   1745: aload #11
        //   1747: bipush #17
        //   1749: invokeinterface getString : (I)Ljava/lang/String;
        //   1754: astore #86
        //   1756: aload #11
        //   1758: bipush #18
        //   1760: invokeinterface getString : (I)Ljava/lang/String;
        //   1765: astore #89
        //   1767: aload #11
        //   1769: bipush #19
        //   1771: invokeinterface getString : (I)Ljava/lang/String;
        //   1776: astore #87
        //   1778: aload #11
        //   1780: bipush #20
        //   1782: invokeinterface getString : (I)Ljava/lang/String;
        //   1787: astore #88
        //   1789: goto -> 1530
        //   1792: aload #11
        //   1794: invokeinterface close : ()V
        //   1799: aload #10
        //   1801: invokeinterface close : ()V
        //   1806: aload #75
        //   1808: ldc ''
        //   1810: invokevirtual equals : (Ljava/lang/Object;)Z
        //   1813: ifne -> 1903
        //   1816: new java/lang/StringBuilder
        //   1819: dup
        //   1820: invokespecial <init> : ()V
        //   1823: ldc_w 'Select IFNULL(PayerName,'') from '
        //   1826: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1829: aload #7
        //   1831: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1834: ldc_w '.ProfessionalPayers where id = '
        //   1837: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1840: aload #75
        //   1842: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1845: invokevirtual toString : ()Ljava/lang/String;
        //   1848: astore #12
        //   1850: aload_3
        //   1851: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1856: astore #10
        //   1858: aload #10
        //   1860: aload #12
        //   1862: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1867: astore #11
        //   1869: aload #11
        //   1871: invokeinterface next : ()Z
        //   1876: ifeq -> 1889
        //   1879: aload #11
        //   1881: iconst_1
        //   1882: invokeinterface getString : (I)Ljava/lang/String;
        //   1887: astore #75
        //   1889: aload #11
        //   1891: invokeinterface close : ()V
        //   1896: aload #10
        //   1898: invokeinterface close : ()V
        //   1903: new java/lang/StringBuilder
        //   1906: dup
        //   1907: invokespecial <init> : ()V
        //   1910: ldc 'Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from '
        //   1912: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1915: aload #7
        //   1917: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1920: ldc '.EmergencyInfo where PatientRegId = '
        //   1922: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1925: iload #138
        //   1927: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   1930: invokevirtual toString : ()Ljava/lang/String;
        //   1933: astore #12
        //   1935: aload_3
        //   1936: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1941: astore #10
        //   1943: aload #10
        //   1945: aload #12
        //   1947: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1952: astore #11
        //   1954: aload #11
        //   1956: invokeinterface next : ()Z
        //   1961: ifeq -> 2028
        //   1964: aload #11
        //   1966: iconst_1
        //   1967: invokeinterface getString : (I)Ljava/lang/String;
        //   1972: astore #90
        //   1974: aload #11
        //   1976: iconst_2
        //   1977: invokeinterface getString : (I)Ljava/lang/String;
        //   1982: astore #91
        //   1984: aload #11
        //   1986: iconst_3
        //   1987: invokeinterface getString : (I)Ljava/lang/String;
        //   1992: astore #92
        //   1994: aload #11
        //   1996: iconst_4
        //   1997: invokeinterface getString : (I)Ljava/lang/String;
        //   2002: astore #97
        //   2004: aload #11
        //   2006: iconst_5
        //   2007: invokeinterface getString : (I)Ljava/lang/String;
        //   2012: astore #94
        //   2014: aload #11
        //   2016: bipush #6
        //   2018: invokeinterface getString : (I)Ljava/lang/String;
        //   2023: astore #98
        //   2025: goto -> 1954
        //   2028: aload #11
        //   2030: invokeinterface close : ()V
        //   2035: aload #10
        //   2037: invokeinterface close : ()V
        //   2042: new java/lang/StringBuilder
        //   2045: dup
        //   2046: invokespecial <init> : ()V
        //   2049: ldc ' Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from '
        //   2051: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2054: aload #7
        //   2056: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2059: ldc '.RandomCheckInfo where PatientRegId = '
        //   2061: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2064: iload #138
        //   2066: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   2069: invokevirtual toString : ()Ljava/lang/String;
        //   2072: astore #12
        //   2074: aload_3
        //   2075: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   2080: astore #10
        //   2082: aload #10
        //   2084: aload #12
        //   2086: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   2091: astore #11
        //   2093: aload #11
        //   2095: invokeinterface next : ()Z
        //   2100: ifeq -> 2691
        //   2103: aload #11
        //   2105: iconst_1
        //   2106: invokeinterface getInt : (I)I
        //   2111: ifne -> 2121
        //   2114: ldc ''
        //   2116: astore #108
        //   2118: goto -> 2125
        //   2121: ldc 'YES'
        //   2123: astore #108
        //   2125: aload #11
        //   2127: iconst_2
        //   2128: invokeinterface getInt : (I)I
        //   2133: ifne -> 2143
        //   2136: ldc ''
        //   2138: astore #109
        //   2140: goto -> 2147
        //   2143: ldc 'YES'
        //   2145: astore #109
        //   2147: aload #11
        //   2149: iconst_3
        //   2150: invokeinterface getInt : (I)I
        //   2155: ifne -> 2165
        //   2158: ldc ''
        //   2160: astore #110
        //   2162: goto -> 2169
        //   2165: ldc 'YES'
        //   2167: astore #110
        //   2169: aload #11
        //   2171: iconst_4
        //   2172: invokeinterface getInt : (I)I
        //   2177: ifne -> 2187
        //   2180: ldc ''
        //   2182: astore #111
        //   2184: goto -> 2191
        //   2187: ldc 'YES'
        //   2189: astore #111
        //   2191: aload #11
        //   2193: iconst_5
        //   2194: invokeinterface getInt : (I)I
        //   2199: ifne -> 2209
        //   2202: ldc ''
        //   2204: astore #112
        //   2206: goto -> 2213
        //   2209: ldc 'YES'
        //   2211: astore #112
        //   2213: aload #11
        //   2215: bipush #6
        //   2217: invokeinterface getInt : (I)I
        //   2222: ifne -> 2232
        //   2225: ldc ''
        //   2227: astore #113
        //   2229: goto -> 2236
        //   2232: ldc 'YES'
        //   2234: astore #113
        //   2236: aload #11
        //   2238: bipush #7
        //   2240: invokeinterface getInt : (I)I
        //   2245: ifne -> 2255
        //   2248: ldc ''
        //   2250: astore #114
        //   2252: goto -> 2259
        //   2255: ldc 'YES'
        //   2257: astore #114
        //   2259: aload #11
        //   2261: bipush #8
        //   2263: invokeinterface getInt : (I)I
        //   2268: ifne -> 2278
        //   2271: ldc ''
        //   2273: astore #115
        //   2275: goto -> 2282
        //   2278: ldc 'YES'
        //   2280: astore #115
        //   2282: aload #11
        //   2284: bipush #9
        //   2286: invokeinterface getInt : (I)I
        //   2291: ifne -> 2301
        //   2294: ldc ''
        //   2296: astore #116
        //   2298: goto -> 2305
        //   2301: ldc 'YES'
        //   2303: astore #116
        //   2305: aload #11
        //   2307: bipush #10
        //   2309: invokeinterface getInt : (I)I
        //   2314: ifne -> 2328
        //   2317: ldc ''
        //   2319: astore #117
        //   2321: ldc ''
        //   2323: astore #118
        //   2325: goto -> 2343
        //   2328: ldc 'YES'
        //   2330: astore #117
        //   2332: aload #11
        //   2334: bipush #11
        //   2336: invokeinterface getString : (I)Ljava/lang/String;
        //   2341: astore #118
        //   2343: aload #11
        //   2345: bipush #12
        //   2347: invokeinterface getInt : (I)I
        //   2352: ifne -> 2362
        //   2355: ldc ''
        //   2357: astore #119
        //   2359: goto -> 2366
        //   2362: ldc 'YES'
        //   2364: astore #119
        //   2366: aload #11
        //   2368: bipush #13
        //   2370: invokeinterface getInt : (I)I
        //   2375: ifne -> 2389
        //   2378: ldc ''
        //   2380: astore #120
        //   2382: ldc ''
        //   2384: astore #121
        //   2386: goto -> 2404
        //   2389: ldc 'YES'
        //   2391: astore #120
        //   2393: aload #11
        //   2395: bipush #14
        //   2397: invokeinterface getString : (I)Ljava/lang/String;
        //   2402: astore #121
        //   2404: aload #11
        //   2406: bipush #15
        //   2408: invokeinterface getInt : (I)I
        //   2413: ifne -> 2427
        //   2416: ldc ''
        //   2418: astore #122
        //   2420: ldc ''
        //   2422: astore #123
        //   2424: goto -> 2442
        //   2427: ldc 'YES'
        //   2429: astore #122
        //   2431: aload #11
        //   2433: bipush #16
        //   2435: invokeinterface getString : (I)Ljava/lang/String;
        //   2440: astore #123
        //   2442: aload #11
        //   2444: bipush #17
        //   2446: invokeinterface getInt : (I)I
        //   2451: ifne -> 2465
        //   2454: ldc ''
        //   2456: astore #124
        //   2458: ldc ''
        //   2460: astore #125
        //   2462: goto -> 2480
        //   2465: ldc 'YES'
        //   2467: astore #124
        //   2469: aload #11
        //   2471: bipush #18
        //   2473: invokeinterface getString : (I)Ljava/lang/String;
        //   2478: astore #125
        //   2480: aload #11
        //   2482: bipush #19
        //   2484: invokeinterface getInt : (I)I
        //   2489: ifne -> 2503
        //   2492: ldc ''
        //   2494: astore #126
        //   2496: ldc ''
        //   2498: astore #127
        //   2500: goto -> 2518
        //   2503: ldc 'YES'
        //   2505: astore #126
        //   2507: aload #11
        //   2509: bipush #20
        //   2511: invokeinterface getString : (I)Ljava/lang/String;
        //   2516: astore #127
        //   2518: aload #11
        //   2520: bipush #21
        //   2522: invokeinterface getInt : (I)I
        //   2527: ifne -> 2541
        //   2530: ldc ''
        //   2532: astore #128
        //   2534: ldc ''
        //   2536: astore #129
        //   2538: goto -> 2556
        //   2541: ldc 'YES'
        //   2543: astore #128
        //   2545: aload #11
        //   2547: bipush #22
        //   2549: invokeinterface getString : (I)Ljava/lang/String;
        //   2554: astore #129
        //   2556: aload #11
        //   2558: bipush #23
        //   2560: invokeinterface getString : (I)Ljava/lang/String;
        //   2565: ldc ''
        //   2567: if_acmpeq -> 2582
        //   2570: aload #11
        //   2572: bipush #23
        //   2574: invokeinterface getString : (I)Ljava/lang/String;
        //   2579: ifnonnull -> 2589
        //   2582: ldc ''
        //   2584: astore #131
        //   2586: goto -> 2600
        //   2589: aload #11
        //   2591: bipush #23
        //   2593: invokeinterface getString : (I)Ljava/lang/String;
        //   2598: astore #131
        //   2600: aload #11
        //   2602: bipush #24
        //   2604: invokeinterface getString : (I)Ljava/lang/String;
        //   2609: ldc ''
        //   2611: if_acmpeq -> 2626
        //   2614: aload #11
        //   2616: bipush #24
        //   2618: invokeinterface getString : (I)Ljava/lang/String;
        //   2623: ifnonnull -> 2633
        //   2626: ldc ''
        //   2628: astore #133
        //   2630: goto -> 2644
        //   2633: aload #11
        //   2635: bipush #24
        //   2637: invokeinterface getString : (I)Ljava/lang/String;
        //   2642: astore #133
        //   2644: aload #11
        //   2646: bipush #25
        //   2648: invokeinterface getString : (I)Ljava/lang/String;
        //   2653: ldc ''
        //   2655: if_acmpeq -> 2670
        //   2658: aload #11
        //   2660: bipush #25
        //   2662: invokeinterface getString : (I)Ljava/lang/String;
        //   2667: ifnonnull -> 2677
        //   2670: ldc ''
        //   2672: astore #135
        //   2674: goto -> 2093
        //   2677: aload #11
        //   2679: bipush #25
        //   2681: invokeinterface getString : (I)Ljava/lang/String;
        //   2686: astore #135
        //   2688: goto -> 2093
        //   2691: aload #11
        //   2693: invokeinterface close : ()V
        //   2698: aload #10
        //   2700: invokeinterface close : ()V
        //   2705: ldc ''
        //   2707: astore #139
        //   2709: ldc ''
        //   2711: astore #140
        //   2713: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/Prompt_Pay_Agreement.pdf'
        //   2716: astore #139
        //   2718: new java/lang/StringBuilder
        //   2721: dup
        //   2722: invokespecial <init> : ()V
        //   2725: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Prompt_Pay_Agreement_'
        //   2728: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2731: iload #8
        //   2733: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   2736: ldc '_'
        //   2738: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2741: aload #43
        //   2743: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2746: ldc '.pdf'
        //   2748: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2751: invokevirtual toString : ()Ljava/lang/String;
        //   2754: astore #140
        //   2756: new java/io/FileOutputStream
        //   2759: dup
        //   2760: new java/io/File
        //   2763: dup
        //   2764: aload #140
        //   2766: invokespecial <init> : (Ljava/lang/String;)V
        //   2769: invokespecial <init> : (Ljava/io/File;)V
        //   2772: astore #141
        //   2774: new com/itextpdf/text/pdf/PdfReader
        //   2777: dup
        //   2778: aload #139
        //   2780: invokespecial <init> : (Ljava/lang/String;)V
        //   2783: astore #142
        //   2785: new com/itextpdf/text/pdf/PdfStamper
        //   2788: dup
        //   2789: aload #142
        //   2791: aload #141
        //   2793: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   2796: astore #143
        //   2798: iconst_1
        //   2799: istore #144
        //   2801: iload #144
        //   2803: aload #142
        //   2805: invokevirtual getNumberOfPages : ()I
        //   2808: if_icmpgt -> 2965
        //   2811: iload #144
        //   2813: iconst_1
        //   2814: if_icmpne -> 2959
        //   2817: aload #143
        //   2819: iload #144
        //   2821: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   2824: astore #145
        //   2826: aload #145
        //   2828: invokevirtual beginText : ()V
        //   2831: aload #145
        //   2833: ldc 'Times-Roman'
        //   2835: ldc 'Cp1257'
        //   2837: iconst_1
        //   2838: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   2841: ldc 10.0
        //   2843: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   2846: aload #145
        //   2848: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   2851: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   2854: aload #145
        //   2856: ldc 420.0
        //   2858: ldc_w 245.0
        //   2861: invokevirtual setTextMatrix : (FF)V
        //   2864: aload #145
        //   2866: aload #15
        //   2868: invokevirtual showText : (Ljava/lang/String;)V
        //   2871: aload #145
        //   2873: invokevirtual endText : ()V
        //   2876: aload #145
        //   2878: invokevirtual beginText : ()V
        //   2881: aload #145
        //   2883: ldc 'Times-Roman'
        //   2885: ldc 'Cp1257'
        //   2887: iconst_1
        //   2888: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   2891: ldc 10.0
        //   2893: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   2896: aload #145
        //   2898: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   2901: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   2904: aload #145
        //   2906: ldc 110.0
        //   2908: ldc_w 185.0
        //   2911: invokevirtual setTextMatrix : (FF)V
        //   2914: aload #145
        //   2916: new java/lang/StringBuilder
        //   2919: dup
        //   2920: invokespecial <init> : ()V
        //   2923: aload #22
        //   2925: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2928: ldc ' '
        //   2930: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2933: aload #25
        //   2935: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2938: ldc ' '
        //   2940: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2943: aload #24
        //   2945: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2948: invokevirtual toString : ()Ljava/lang/String;
        //   2951: invokevirtual showText : (Ljava/lang/String;)V
        //   2954: aload #145
        //   2956: invokevirtual endText : ()V
        //   2959: iinc #144, 1
        //   2962: goto -> 2801
        //   2965: aload #143
        //   2967: invokevirtual close : ()V
        //   2970: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/Medicaid_ABN.pdf'
        //   2973: astore #139
        //   2975: new java/lang/StringBuilder
        //   2978: dup
        //   2979: invokespecial <init> : ()V
        //   2982: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Medicaid_ABN_'
        //   2985: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2988: iload #8
        //   2990: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   2993: ldc '_'
        //   2995: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2998: aload #43
        //   3000: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3003: ldc '.pdf'
        //   3005: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3008: invokevirtual toString : ()Ljava/lang/String;
        //   3011: astore #140
        //   3013: new java/io/FileOutputStream
        //   3016: dup
        //   3017: new java/io/File
        //   3020: dup
        //   3021: aload #140
        //   3023: invokespecial <init> : (Ljava/lang/String;)V
        //   3026: invokespecial <init> : (Ljava/io/File;)V
        //   3029: astore #141
        //   3031: new com/itextpdf/text/pdf/PdfReader
        //   3034: dup
        //   3035: aload #139
        //   3037: invokespecial <init> : (Ljava/lang/String;)V
        //   3040: astore #142
        //   3042: new com/itextpdf/text/pdf/PdfStamper
        //   3045: dup
        //   3046: aload #142
        //   3048: aload #141
        //   3050: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   3053: astore #143
        //   3055: iconst_1
        //   3056: istore #144
        //   3058: iload #144
        //   3060: aload #142
        //   3062: invokevirtual getNumberOfPages : ()I
        //   3065: if_icmpgt -> 3587
        //   3068: iload #144
        //   3070: iconst_1
        //   3071: if_icmpne -> 3581
        //   3074: aload #143
        //   3076: iload #144
        //   3078: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   3081: astore #145
        //   3083: aload #145
        //   3085: invokevirtual beginText : ()V
        //   3088: aload #145
        //   3090: ldc 'Times-Roman'
        //   3092: ldc 'Cp1257'
        //   3094: iconst_1
        //   3095: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3098: ldc 8.0
        //   3100: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3103: aload #145
        //   3105: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3108: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3111: aload #145
        //   3113: ldc 415.0
        //   3115: ldc 745.0
        //   3117: invokevirtual setTextMatrix : (FF)V
        //   3120: aload #145
        //   3122: new java/lang/StringBuilder
        //   3125: dup
        //   3126: invokespecial <init> : ()V
        //   3129: aload #24
        //   3131: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3134: ldc ' , '
        //   3136: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3139: aload #22
        //   3141: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3144: invokevirtual toString : ()Ljava/lang/String;
        //   3147: invokevirtual showText : (Ljava/lang/String;)V
        //   3150: aload #145
        //   3152: invokevirtual endText : ()V
        //   3155: aload #145
        //   3157: invokevirtual beginText : ()V
        //   3160: aload #145
        //   3162: ldc 'Times-Roman'
        //   3164: ldc 'Cp1257'
        //   3166: iconst_1
        //   3167: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3170: ldc 8.0
        //   3172: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3175: aload #145
        //   3177: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3180: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3183: aload #145
        //   3185: ldc 415.0
        //   3187: ldc 735.0
        //   3189: invokevirtual setTextMatrix : (FF)V
        //   3192: aload #145
        //   3194: new java/lang/StringBuilder
        //   3197: dup
        //   3198: invokespecial <init> : ()V
        //   3201: aload #45
        //   3203: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3206: ldc '        Sex:'
        //   3208: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3211: aload #29
        //   3213: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3216: invokevirtual toString : ()Ljava/lang/String;
        //   3219: invokevirtual showText : (Ljava/lang/String;)V
        //   3222: aload #145
        //   3224: invokevirtual endText : ()V
        //   3227: aload #145
        //   3229: invokevirtual beginText : ()V
        //   3232: aload #145
        //   3234: ldc 'Times-Roman'
        //   3236: ldc 'Cp1257'
        //   3238: iconst_1
        //   3239: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3242: ldc 8.0
        //   3244: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3247: aload #145
        //   3249: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3252: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3255: aload #145
        //   3257: ldc 415.0
        //   3259: ldc 725.0
        //   3261: invokevirtual setTextMatrix : (FF)V
        //   3264: aload #145
        //   3266: new java/lang/StringBuilder
        //   3269: dup
        //   3270: invokespecial <init> : ()V
        //   3273: ldc 'DOB: '
        //   3275: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3278: aload #27
        //   3280: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3283: ldc '        Age:'
        //   3285: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3288: aload #28
        //   3290: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3293: invokevirtual toString : ()Ljava/lang/String;
        //   3296: invokevirtual showText : (Ljava/lang/String;)V
        //   3299: aload #145
        //   3301: invokevirtual endText : ()V
        //   3304: aload #145
        //   3306: invokevirtual beginText : ()V
        //   3309: aload #145
        //   3311: ldc 'Times-Roman'
        //   3313: ldc 'Cp1257'
        //   3315: iconst_1
        //   3316: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3319: ldc 8.0
        //   3321: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3324: aload #145
        //   3326: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3329: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3332: aload #145
        //   3334: ldc 415.0
        //   3336: ldc_w 715.0
        //   3339: invokevirtual setTextMatrix : (FF)V
        //   3342: aload #145
        //   3344: new java/lang/StringBuilder
        //   3347: dup
        //   3348: invokespecial <init> : ()V
        //   3351: ldc 'MRN: '
        //   3353: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3356: aload #43
        //   3358: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3361: ldc '        DOS: '
        //   3363: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3366: aload #46
        //   3368: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3371: invokevirtual toString : ()Ljava/lang/String;
        //   3374: invokevirtual showText : (Ljava/lang/String;)V
        //   3377: aload #145
        //   3379: invokevirtual endText : ()V
        //   3382: aload #145
        //   3384: invokevirtual beginText : ()V
        //   3387: aload #145
        //   3389: ldc 'Times-Roman'
        //   3391: ldc 'Cp1257'
        //   3393: iconst_1
        //   3394: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3397: ldc 8.0
        //   3399: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3402: aload #145
        //   3404: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3407: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3410: aload #145
        //   3412: ldc 415.0
        //   3414: ldc_w 705.0
        //   3417: invokevirtual setTextMatrix : (FF)V
        //   3420: aload #145
        //   3422: new java/lang/StringBuilder
        //   3425: dup
        //   3426: invokespecial <init> : ()V
        //   3429: ldc 'Dr. '
        //   3431: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3434: aload #48
        //   3436: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3439: invokevirtual toString : ()Ljava/lang/String;
        //   3442: invokevirtual showText : (Ljava/lang/String;)V
        //   3445: aload #145
        //   3447: invokevirtual endText : ()V
        //   3450: aload #145
        //   3452: invokevirtual beginText : ()V
        //   3455: aload #145
        //   3457: ldc 'Times-Roman'
        //   3459: ldc 'Cp1257'
        //   3461: iconst_1
        //   3462: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3465: ldc 10.0
        //   3467: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3470: aload #145
        //   3472: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3475: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3478: aload #145
        //   3480: ldc 420.0
        //   3482: ldc 70.0
        //   3484: invokevirtual setTextMatrix : (FF)V
        //   3487: aload #145
        //   3489: aload #15
        //   3491: invokevirtual showText : (Ljava/lang/String;)V
        //   3494: aload #145
        //   3496: invokevirtual endText : ()V
        //   3499: aload #145
        //   3501: invokevirtual beginText : ()V
        //   3504: aload #145
        //   3506: ldc 'Times-Roman'
        //   3508: ldc 'Cp1257'
        //   3510: iconst_1
        //   3511: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3514: ldc 10.0
        //   3516: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3519: aload #145
        //   3521: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3524: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3527: aload #145
        //   3529: ldc 110.0
        //   3531: ldc 70.0
        //   3533: invokevirtual setTextMatrix : (FF)V
        //   3536: aload #145
        //   3538: new java/lang/StringBuilder
        //   3541: dup
        //   3542: invokespecial <init> : ()V
        //   3545: aload #22
        //   3547: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3550: ldc ' '
        //   3552: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3555: aload #25
        //   3557: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3560: ldc ' '
        //   3562: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3565: aload #24
        //   3567: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3570: invokevirtual toString : ()Ljava/lang/String;
        //   3573: invokevirtual showText : (Ljava/lang/String;)V
        //   3576: aload #145
        //   3578: invokevirtual endText : ()V
        //   3581: iinc #144, 1
        //   3584: goto -> 3058
        //   3587: aload #143
        //   3589: invokevirtual close : ()V
        //   3592: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/Medicare_ABN.pdf'
        //   3595: astore #139
        //   3597: new java/lang/StringBuilder
        //   3600: dup
        //   3601: invokespecial <init> : ()V
        //   3604: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Medicare_ABN_'
        //   3607: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3610: iload #8
        //   3612: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   3615: ldc '_'
        //   3617: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3620: aload #43
        //   3622: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3625: ldc '.pdf'
        //   3627: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3630: invokevirtual toString : ()Ljava/lang/String;
        //   3633: astore #140
        //   3635: new java/io/FileOutputStream
        //   3638: dup
        //   3639: new java/io/File
        //   3642: dup
        //   3643: aload #140
        //   3645: invokespecial <init> : (Ljava/lang/String;)V
        //   3648: invokespecial <init> : (Ljava/io/File;)V
        //   3651: astore #141
        //   3653: new com/itextpdf/text/pdf/PdfReader
        //   3656: dup
        //   3657: aload #139
        //   3659: invokespecial <init> : (Ljava/lang/String;)V
        //   3662: astore #142
        //   3664: new com/itextpdf/text/pdf/PdfStamper
        //   3667: dup
        //   3668: aload #142
        //   3670: aload #141
        //   3672: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   3675: astore #143
        //   3677: iconst_1
        //   3678: istore #144
        //   3680: iload #144
        //   3682: aload #142
        //   3684: invokevirtual getNumberOfPages : ()I
        //   3687: if_icmpgt -> 4209
        //   3690: iload #144
        //   3692: iconst_1
        //   3693: if_icmpne -> 4203
        //   3696: aload #143
        //   3698: iload #144
        //   3700: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   3703: astore #145
        //   3705: aload #145
        //   3707: invokevirtual beginText : ()V
        //   3710: aload #145
        //   3712: ldc 'Times-Roman'
        //   3714: ldc 'Cp1257'
        //   3716: iconst_1
        //   3717: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3720: ldc 8.0
        //   3722: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3725: aload #145
        //   3727: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3730: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3733: aload #145
        //   3735: ldc 415.0
        //   3737: ldc 745.0
        //   3739: invokevirtual setTextMatrix : (FF)V
        //   3742: aload #145
        //   3744: new java/lang/StringBuilder
        //   3747: dup
        //   3748: invokespecial <init> : ()V
        //   3751: aload #24
        //   3753: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3756: ldc ' , '
        //   3758: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3761: aload #22
        //   3763: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3766: invokevirtual toString : ()Ljava/lang/String;
        //   3769: invokevirtual showText : (Ljava/lang/String;)V
        //   3772: aload #145
        //   3774: invokevirtual endText : ()V
        //   3777: aload #145
        //   3779: invokevirtual beginText : ()V
        //   3782: aload #145
        //   3784: ldc 'Times-Roman'
        //   3786: ldc 'Cp1257'
        //   3788: iconst_1
        //   3789: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3792: ldc 8.0
        //   3794: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3797: aload #145
        //   3799: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3802: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3805: aload #145
        //   3807: ldc 415.0
        //   3809: ldc 735.0
        //   3811: invokevirtual setTextMatrix : (FF)V
        //   3814: aload #145
        //   3816: new java/lang/StringBuilder
        //   3819: dup
        //   3820: invokespecial <init> : ()V
        //   3823: aload #45
        //   3825: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3828: ldc '        Sex:'
        //   3830: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3833: aload #29
        //   3835: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3838: invokevirtual toString : ()Ljava/lang/String;
        //   3841: invokevirtual showText : (Ljava/lang/String;)V
        //   3844: aload #145
        //   3846: invokevirtual endText : ()V
        //   3849: aload #145
        //   3851: invokevirtual beginText : ()V
        //   3854: aload #145
        //   3856: ldc 'Times-Roman'
        //   3858: ldc 'Cp1257'
        //   3860: iconst_1
        //   3861: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3864: ldc 8.0
        //   3866: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3869: aload #145
        //   3871: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3874: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3877: aload #145
        //   3879: ldc 415.0
        //   3881: ldc 725.0
        //   3883: invokevirtual setTextMatrix : (FF)V
        //   3886: aload #145
        //   3888: new java/lang/StringBuilder
        //   3891: dup
        //   3892: invokespecial <init> : ()V
        //   3895: ldc 'DOB: '
        //   3897: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3900: aload #27
        //   3902: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3905: ldc '        Age:'
        //   3907: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3910: aload #28
        //   3912: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3915: invokevirtual toString : ()Ljava/lang/String;
        //   3918: invokevirtual showText : (Ljava/lang/String;)V
        //   3921: aload #145
        //   3923: invokevirtual endText : ()V
        //   3926: aload #145
        //   3928: invokevirtual beginText : ()V
        //   3931: aload #145
        //   3933: ldc 'Times-Roman'
        //   3935: ldc 'Cp1257'
        //   3937: iconst_1
        //   3938: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3941: ldc 8.0
        //   3943: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3946: aload #145
        //   3948: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3951: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3954: aload #145
        //   3956: ldc 415.0
        //   3958: ldc_w 715.0
        //   3961: invokevirtual setTextMatrix : (FF)V
        //   3964: aload #145
        //   3966: new java/lang/StringBuilder
        //   3969: dup
        //   3970: invokespecial <init> : ()V
        //   3973: ldc 'MRN: '
        //   3975: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3978: aload #43
        //   3980: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3983: ldc '        DOS: '
        //   3985: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3988: aload #46
        //   3990: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3993: invokevirtual toString : ()Ljava/lang/String;
        //   3996: invokevirtual showText : (Ljava/lang/String;)V
        //   3999: aload #145
        //   4001: invokevirtual endText : ()V
        //   4004: aload #145
        //   4006: invokevirtual beginText : ()V
        //   4009: aload #145
        //   4011: ldc 'Times-Roman'
        //   4013: ldc 'Cp1257'
        //   4015: iconst_1
        //   4016: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4019: ldc 8.0
        //   4021: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4024: aload #145
        //   4026: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4029: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4032: aload #145
        //   4034: ldc 415.0
        //   4036: ldc_w 705.0
        //   4039: invokevirtual setTextMatrix : (FF)V
        //   4042: aload #145
        //   4044: new java/lang/StringBuilder
        //   4047: dup
        //   4048: invokespecial <init> : ()V
        //   4051: ldc 'Dr. '
        //   4053: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4056: aload #48
        //   4058: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4061: invokevirtual toString : ()Ljava/lang/String;
        //   4064: invokevirtual showText : (Ljava/lang/String;)V
        //   4067: aload #145
        //   4069: invokevirtual endText : ()V
        //   4072: aload #145
        //   4074: invokevirtual beginText : ()V
        //   4077: aload #145
        //   4079: ldc 'Times-Roman'
        //   4081: ldc 'Cp1257'
        //   4083: iconst_1
        //   4084: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4087: ldc 10.0
        //   4089: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4092: aload #145
        //   4094: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4097: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4100: aload #145
        //   4102: ldc 420.0
        //   4104: ldc 70.0
        //   4106: invokevirtual setTextMatrix : (FF)V
        //   4109: aload #145
        //   4111: aload #15
        //   4113: invokevirtual showText : (Ljava/lang/String;)V
        //   4116: aload #145
        //   4118: invokevirtual endText : ()V
        //   4121: aload #145
        //   4123: invokevirtual beginText : ()V
        //   4126: aload #145
        //   4128: ldc 'Times-Roman'
        //   4130: ldc 'Cp1257'
        //   4132: iconst_1
        //   4133: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4136: ldc 10.0
        //   4138: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4141: aload #145
        //   4143: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4146: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4149: aload #145
        //   4151: ldc 110.0
        //   4153: ldc 70.0
        //   4155: invokevirtual setTextMatrix : (FF)V
        //   4158: aload #145
        //   4160: new java/lang/StringBuilder
        //   4163: dup
        //   4164: invokespecial <init> : ()V
        //   4167: aload #22
        //   4169: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4172: ldc ' '
        //   4174: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4177: aload #25
        //   4179: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4182: ldc ' '
        //   4184: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4187: aload #24
        //   4189: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4192: invokevirtual toString : ()Ljava/lang/String;
        //   4195: invokevirtual showText : (Ljava/lang/String;)V
        //   4198: aload #145
        //   4200: invokevirtual endText : ()V
        //   4203: iinc #144, 1
        //   4206: goto -> 3680
        //   4209: aload #143
        //   4211: invokevirtual close : ()V
        //   4214: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/Benefit_appeal.pdf'
        //   4217: astore #139
        //   4219: new java/lang/StringBuilder
        //   4222: dup
        //   4223: invokespecial <init> : ()V
        //   4226: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Benefit_appeal_'
        //   4229: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4232: iload #8
        //   4234: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   4237: ldc '_'
        //   4239: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4242: aload #43
        //   4244: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4247: ldc '.pdf'
        //   4249: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4252: invokevirtual toString : ()Ljava/lang/String;
        //   4255: astore #140
        //   4257: new java/io/FileOutputStream
        //   4260: dup
        //   4261: new java/io/File
        //   4264: dup
        //   4265: aload #140
        //   4267: invokespecial <init> : (Ljava/lang/String;)V
        //   4270: invokespecial <init> : (Ljava/io/File;)V
        //   4273: astore #141
        //   4275: new com/itextpdf/text/pdf/PdfReader
        //   4278: dup
        //   4279: aload #139
        //   4281: invokespecial <init> : (Ljava/lang/String;)V
        //   4284: astore #142
        //   4286: new com/itextpdf/text/pdf/PdfStamper
        //   4289: dup
        //   4290: aload #142
        //   4292: aload #141
        //   4294: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   4297: astore #143
        //   4299: iconst_1
        //   4300: istore #144
        //   4302: iload #144
        //   4304: aload #142
        //   4306: invokevirtual getNumberOfPages : ()I
        //   4309: if_icmpgt -> 4795
        //   4312: iload #144
        //   4314: iconst_1
        //   4315: if_icmpne -> 4789
        //   4318: aload #143
        //   4320: iload #144
        //   4322: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   4325: astore #145
        //   4327: aload #145
        //   4329: invokevirtual beginText : ()V
        //   4332: aload #145
        //   4334: ldc 'Times-Roman'
        //   4336: ldc 'Cp1257'
        //   4338: iconst_1
        //   4339: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4342: ldc 10.0
        //   4344: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4347: aload #145
        //   4349: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4352: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4355: aload #145
        //   4357: ldc 170.0
        //   4359: ldc 535.0
        //   4361: invokevirtual setTextMatrix : (FF)V
        //   4364: aload #145
        //   4366: new java/lang/StringBuilder
        //   4369: dup
        //   4370: invokespecial <init> : ()V
        //   4373: aload #22
        //   4375: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4378: ldc ' '
        //   4380: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4383: aload #25
        //   4385: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4388: ldc ' '
        //   4390: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4393: aload #24
        //   4395: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4398: invokevirtual toString : ()Ljava/lang/String;
        //   4401: invokevirtual showText : (Ljava/lang/String;)V
        //   4404: aload #145
        //   4406: invokevirtual endText : ()V
        //   4409: aload #145
        //   4411: invokevirtual beginText : ()V
        //   4414: aload #145
        //   4416: ldc 'Times-Roman'
        //   4418: ldc 'Cp1257'
        //   4420: iconst_1
        //   4421: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4424: ldc 10.0
        //   4426: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4429: aload #145
        //   4431: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4434: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4437: aload #145
        //   4439: ldc 400.0
        //   4441: ldc 535.0
        //   4443: invokevirtual setTextMatrix : (FF)V
        //   4446: aload #145
        //   4448: aload #27
        //   4450: invokevirtual showText : (Ljava/lang/String;)V
        //   4453: aload #145
        //   4455: invokevirtual endText : ()V
        //   4458: aload #145
        //   4460: invokevirtual beginText : ()V
        //   4463: aload #145
        //   4465: ldc 'Times-Roman'
        //   4467: ldc 'Cp1257'
        //   4469: iconst_1
        //   4470: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4473: ldc 10.0
        //   4475: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4478: aload #145
        //   4480: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4483: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4486: aload #145
        //   4488: ldc 220.0
        //   4490: ldc_w 505.0
        //   4493: invokevirtual setTextMatrix : (FF)V
        //   4496: aload #145
        //   4498: aload #79
        //   4500: invokevirtual showText : (Ljava/lang/String;)V
        //   4503: aload #145
        //   4505: invokevirtual endText : ()V
        //   4508: aload #145
        //   4510: invokevirtual beginText : ()V
        //   4513: aload #145
        //   4515: ldc 'Times-Roman'
        //   4517: ldc 'Cp1257'
        //   4519: iconst_1
        //   4520: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4523: ldc 10.0
        //   4525: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4528: aload #145
        //   4530: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4533: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4536: aload #145
        //   4538: ldc 440.0
        //   4540: ldc_w 505.0
        //   4543: invokevirtual setTextMatrix : (FF)V
        //   4546: aload #145
        //   4548: aload #75
        //   4550: invokevirtual showText : (Ljava/lang/String;)V
        //   4553: aload #145
        //   4555: invokevirtual endText : ()V
        //   4558: aload #145
        //   4560: invokevirtual beginText : ()V
        //   4563: aload #145
        //   4565: ldc 'Times-Roman'
        //   4567: ldc 'Cp1257'
        //   4569: iconst_1
        //   4570: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4573: ldc 10.0
        //   4575: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4578: aload #145
        //   4580: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4583: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4586: aload #145
        //   4588: ldc 240.0
        //   4590: ldc_w 475.0
        //   4593: invokevirtual setTextMatrix : (FF)V
        //   4596: aload #145
        //   4598: aload #73
        //   4600: invokevirtual showText : (Ljava/lang/String;)V
        //   4603: aload #145
        //   4605: invokevirtual endText : ()V
        //   4608: aload #145
        //   4610: invokevirtual beginText : ()V
        //   4613: aload #145
        //   4615: ldc 'Times-Roman'
        //   4617: ldc 'Cp1257'
        //   4619: iconst_1
        //   4620: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4623: ldc 10.0
        //   4625: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4628: aload #145
        //   4630: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4633: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4636: aload #145
        //   4638: ldc 170.0
        //   4640: ldc 445.0
        //   4642: invokevirtual setTextMatrix : (FF)V
        //   4645: aload #145
        //   4647: aload #46
        //   4649: invokevirtual showText : (Ljava/lang/String;)V
        //   4652: aload #145
        //   4654: invokevirtual endText : ()V
        //   4657: aload #145
        //   4659: invokevirtual beginText : ()V
        //   4662: aload #145
        //   4664: ldc 'Times-Roman'
        //   4666: ldc 'Cp1257'
        //   4668: iconst_1
        //   4669: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4672: ldc 10.0
        //   4674: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4677: aload #145
        //   4679: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4682: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4685: aload #145
        //   4687: ldc 110.0
        //   4689: ldc 375.0
        //   4691: invokevirtual setTextMatrix : (FF)V
        //   4694: aload #145
        //   4696: new java/lang/StringBuilder
        //   4699: dup
        //   4700: invokespecial <init> : ()V
        //   4703: aload #22
        //   4705: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4708: ldc ' '
        //   4710: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4713: aload #25
        //   4715: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4718: ldc ' '
        //   4720: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4723: aload #24
        //   4725: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4728: invokevirtual toString : ()Ljava/lang/String;
        //   4731: invokevirtual showText : (Ljava/lang/String;)V
        //   4734: aload #145
        //   4736: invokevirtual endText : ()V
        //   4739: aload #145
        //   4741: invokevirtual beginText : ()V
        //   4744: aload #145
        //   4746: ldc 'Times-Roman'
        //   4748: ldc 'Cp1257'
        //   4750: iconst_1
        //   4751: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4754: ldc 10.0
        //   4756: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4759: aload #145
        //   4761: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4764: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4767: aload #145
        //   4769: ldc 420.0
        //   4771: ldc_w 140.0
        //   4774: invokevirtual setTextMatrix : (FF)V
        //   4777: aload #145
        //   4779: aload #15
        //   4781: invokevirtual showText : (Ljava/lang/String;)V
        //   4784: aload #145
        //   4786: invokevirtual endText : ()V
        //   4789: iinc #144, 1
        //   4792: goto -> 4302
        //   4795: aload #143
        //   4797: invokevirtual close : ()V
        //   4800: iload #136
        //   4802: ifne -> 4901
        //   4805: aload #18
        //   4807: aload_1
        //   4808: aload #5
        //   4810: aload_2
        //   4811: aload_3
        //   4812: aload #7
        //   4814: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/GeneralForm_Concho.pdf'
        //   4817: new java/lang/StringBuilder
        //   4820: dup
        //   4821: invokespecial <init> : ()V
        //   4824: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Prompt_Pay_Agreement_'
        //   4827: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4830: iload #8
        //   4832: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   4835: ldc '_'
        //   4837: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4840: aload #43
        //   4842: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4845: ldc '.pdf'
        //   4847: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4850: invokevirtual toString : ()Ljava/lang/String;
        //   4853: iload #8
        //   4855: aload #43
        //   4857: invokevirtual GETINPUT : (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/io/PrintWriter;Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
        //   4860: new java/lang/StringBuilder
        //   4863: dup
        //   4864: invokespecial <init> : ()V
        //   4867: ldc_w '/sftpdrive/AdmissionBundlePdf/concho/Result_'
        //   4870: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4873: iload #8
        //   4875: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   4878: ldc '_'
        //   4880: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4883: aload #43
        //   4885: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4888: ldc '.pdf'
        //   4890: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4893: invokevirtual toString : ()Ljava/lang/String;
        //   4896: astore #17
        //   4898: goto -> 5260
        //   4901: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/GeneralForm_Concho.pdf'
        //   4904: astore #17
        //   4906: aload #18
        //   4908: aload_1
        //   4909: aload #5
        //   4911: aload_2
        //   4912: aload_3
        //   4913: aload #7
        //   4915: aload #17
        //   4917: new java/lang/StringBuilder
        //   4920: dup
        //   4921: invokespecial <init> : ()V
        //   4924: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Benefit_appeal_'
        //   4927: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4930: iload #8
        //   4932: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   4935: ldc '_'
        //   4937: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4940: aload #43
        //   4942: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4945: ldc '.pdf'
        //   4947: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4950: invokevirtual toString : ()Ljava/lang/String;
        //   4953: iload #8
        //   4955: aload #43
        //   4957: invokevirtual GETINPUT : (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/io/PrintWriter;Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
        //   4960: new java/lang/StringBuilder
        //   4963: dup
        //   4964: invokespecial <init> : ()V
        //   4967: ldc_w '/sftpdrive/AdmissionBundlePdf/concho/Result_'
        //   4970: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4973: iload #8
        //   4975: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   4978: ldc '_'
        //   4980: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4983: aload #43
        //   4985: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4988: ldc '.pdf'
        //   4990: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4993: invokevirtual toString : ()Ljava/lang/String;
        //   4996: astore #17
        //   4998: aload #72
        //   5000: invokevirtual trim : ()Ljava/lang/String;
        //   5003: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   5006: ldc_w 'MEDICAID'
        //   5009: invokevirtual equals : (Ljava/lang/Object;)Z
        //   5012: ifeq -> 5110
        //   5015: aload #18
        //   5017: aload_1
        //   5018: aload #5
        //   5020: aload_2
        //   5021: aload_3
        //   5022: aload #7
        //   5024: aload #17
        //   5026: new java/lang/StringBuilder
        //   5029: dup
        //   5030: invokespecial <init> : ()V
        //   5033: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Medicaid_ABN_'
        //   5036: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5039: iload #8
        //   5041: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   5044: ldc '_'
        //   5046: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5049: aload #43
        //   5051: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5054: ldc '.pdf'
        //   5056: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5059: invokevirtual toString : ()Ljava/lang/String;
        //   5062: iload #8
        //   5064: aload #43
        //   5066: invokevirtual GETINPUT : (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/io/PrintWriter;Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
        //   5069: new java/lang/StringBuilder
        //   5072: dup
        //   5073: invokespecial <init> : ()V
        //   5076: ldc_w '/sftpdrive/AdmissionBundlePdf/concho/Result_'
        //   5079: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5082: iload #8
        //   5084: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   5087: ldc '_'
        //   5089: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5092: aload #43
        //   5094: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5097: ldc '.pdf'
        //   5099: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5102: invokevirtual toString : ()Ljava/lang/String;
        //   5105: astore #17
        //   5107: goto -> 5260
        //   5110: aload #72
        //   5112: invokevirtual trim : ()Ljava/lang/String;
        //   5115: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   5118: ldc_w 'MEDICARE'
        //   5121: invokevirtual equals : (Ljava/lang/Object;)Z
        //   5124: ifeq -> 5222
        //   5127: aload #18
        //   5129: aload_1
        //   5130: aload #5
        //   5132: aload_2
        //   5133: aload_3
        //   5134: aload #7
        //   5136: aload #17
        //   5138: new java/lang/StringBuilder
        //   5141: dup
        //   5142: invokespecial <init> : ()V
        //   5145: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Medicare_ABN_'
        //   5148: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5151: iload #8
        //   5153: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   5156: ldc '_'
        //   5158: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5161: aload #43
        //   5163: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5166: ldc '.pdf'
        //   5168: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5171: invokevirtual toString : ()Ljava/lang/String;
        //   5174: iload #8
        //   5176: aload #43
        //   5178: invokevirtual GETINPUT : (Ljavax/servlet/http/HttpServletRequest;Ljavax/servlet/http/HttpServletResponse;Ljava/io/PrintWriter;Ljava/sql/Connection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
        //   5181: new java/lang/StringBuilder
        //   5184: dup
        //   5185: invokespecial <init> : ()V
        //   5188: ldc_w '/sftpdrive/AdmissionBundlePdf/concho/Result_'
        //   5191: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5194: iload #8
        //   5196: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   5199: ldc '_'
        //   5201: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5204: aload #43
        //   5206: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5209: ldc '.pdf'
        //   5211: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5214: invokevirtual toString : ()Ljava/lang/String;
        //   5217: astore #17
        //   5219: goto -> 5260
        //   5222: new java/lang/StringBuilder
        //   5225: dup
        //   5226: invokespecial <init> : ()V
        //   5229: ldc_w '/sftpdrive/AdmissionBundlePdf/concho/Result_'
        //   5232: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5235: iload #8
        //   5237: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   5240: ldc '_'
        //   5242: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5245: aload #43
        //   5247: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5250: ldc '.pdf'
        //   5252: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5255: invokevirtual toString : ()Ljava/lang/String;
        //   5258: astore #17
        //   5260: ldc ''
        //   5262: astore #144
        //   5264: aload #17
        //   5266: astore #144
        //   5268: new java/lang/StringBuilder
        //   5271: dup
        //   5272: invokespecial <init> : ()V
        //   5275: ldc '/sftpdrive/AdmissionBundlePdf/'
        //   5277: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5280: aload #9
        //   5282: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5285: ldc '/'
        //   5287: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5290: aload #23
        //   5292: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5295: aload #24
        //   5297: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5300: iload #138
        //   5302: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   5305: ldc '_'
        //   5307: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5310: aload #14
        //   5312: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5315: ldc '.pdf'
        //   5317: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5320: invokevirtual toString : ()Ljava/lang/String;
        //   5323: astore #145
        //   5325: new java/io/FileOutputStream
        //   5328: dup
        //   5329: new java/io/File
        //   5332: dup
        //   5333: aload #145
        //   5335: invokespecial <init> : (Ljava/lang/String;)V
        //   5338: invokespecial <init> : (Ljava/io/File;)V
        //   5341: astore #146
        //   5343: new com/itextpdf/text/pdf/PdfReader
        //   5346: dup
        //   5347: aload #144
        //   5349: invokespecial <init> : (Ljava/lang/String;)V
        //   5352: astore #147
        //   5354: new com/itextpdf/text/pdf/PdfStamper
        //   5357: dup
        //   5358: aload #147
        //   5360: aload #146
        //   5362: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   5365: astore #148
        //   5367: new md/GenerateBarCode
        //   5370: dup
        //   5371: invokespecial <init> : ()V
        //   5374: astore #149
        //   5376: aload #149
        //   5378: aload_1
        //   5379: aload_2
        //   5380: aload_3
        //   5381: aload #4
        //   5383: aload #6
        //   5385: aload #7
        //   5387: iload #8
        //   5389: aload #43
        //   5391: invokevirtual GetBarCode : (Ljavax/servlet/http/HttpServletRequest;Ljava/io/PrintWriter;Ljava/sql/Connection;Ljavax/servlet/ServletContext;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;
        //   5394: astore #150
        //   5396: aload #150
        //   5398: invokestatic getInstance : (Ljava/lang/String;)Lcom/itextpdf/text/Image;
        //   5401: astore #151
        //   5403: aload #151
        //   5405: ldc 150.0
        //   5407: ldc 30.0
        //   5409: invokevirtual scaleAbsolute : (FF)V
        //   5412: iconst_1
        //   5413: istore #152
        //   5415: iload #152
        //   5417: aload #147
        //   5419: invokevirtual getNumberOfPages : ()I
        //   5422: if_icmpgt -> 9665
        //   5425: iload #152
        //   5427: iconst_1
        //   5428: if_icmpne -> 7875
        //   5431: aload #148
        //   5433: iload #152
        //   5435: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   5438: astore #153
        //   5440: aload #153
        //   5442: invokevirtual beginText : ()V
        //   5445: aload #153
        //   5447: ldc 'Times-Roman'
        //   5449: ldc 'Cp1257'
        //   5451: iconst_1
        //   5452: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5455: ldc 10.0
        //   5457: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5460: aload #153
        //   5462: ldc 105.0
        //   5464: ldc 650.0
        //   5466: invokevirtual setTextMatrix : (FF)V
        //   5469: aload #153
        //   5471: aload #46
        //   5473: invokevirtual showText : (Ljava/lang/String;)V
        //   5476: aload #153
        //   5478: invokevirtual endText : ()V
        //   5481: aload #153
        //   5483: invokevirtual beginText : ()V
        //   5486: aload #153
        //   5488: ldc 'Times-Roman'
        //   5490: ldc 'Cp1257'
        //   5492: iconst_1
        //   5493: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5496: ldc 10.0
        //   5498: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5501: aload #153
        //   5503: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5506: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5509: aload #153
        //   5511: ldc 500.0
        //   5513: ldc 650.0
        //   5515: invokevirtual setTextMatrix : (FF)V
        //   5518: aload #153
        //   5520: aload #16
        //   5522: invokevirtual showText : (Ljava/lang/String;)V
        //   5525: aload #153
        //   5527: invokevirtual endText : ()V
        //   5530: aload #153
        //   5532: invokevirtual beginText : ()V
        //   5535: aload #153
        //   5537: ldc 'Times-Roman'
        //   5539: ldc 'Cp1257'
        //   5541: iconst_1
        //   5542: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5545: ldc 10.0
        //   5547: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5550: aload #153
        //   5552: ldc 105.0
        //   5554: ldc 605.0
        //   5556: invokevirtual setTextMatrix : (FF)V
        //   5559: aload #153
        //   5561: aload #24
        //   5563: invokevirtual showText : (Ljava/lang/String;)V
        //   5566: aload #153
        //   5568: invokevirtual endText : ()V
        //   5571: aload #153
        //   5573: invokevirtual beginText : ()V
        //   5576: aload #153
        //   5578: ldc 'Times-Roman'
        //   5580: ldc 'Cp1257'
        //   5582: iconst_1
        //   5583: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5586: ldc 10.0
        //   5588: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5591: aload #153
        //   5593: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5596: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5599: aload #153
        //   5601: ldc 285.0
        //   5603: ldc 605.0
        //   5605: invokevirtual setTextMatrix : (FF)V
        //   5608: aload #153
        //   5610: aload #22
        //   5612: invokevirtual showText : (Ljava/lang/String;)V
        //   5615: aload #153
        //   5617: invokevirtual endText : ()V
        //   5620: aload #153
        //   5622: invokevirtual beginText : ()V
        //   5625: aload #153
        //   5627: ldc 'Times-Roman'
        //   5629: ldc 'Cp1257'
        //   5631: iconst_1
        //   5632: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5635: ldc 10.0
        //   5637: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5640: aload #153
        //   5642: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5645: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5648: aload #153
        //   5650: ldc 440.0
        //   5652: ldc 605.0
        //   5654: invokevirtual setTextMatrix : (FF)V
        //   5657: aload #153
        //   5659: aload #25
        //   5661: invokevirtual showText : (Ljava/lang/String;)V
        //   5664: aload #153
        //   5666: invokevirtual endText : ()V
        //   5669: aload #153
        //   5671: invokevirtual beginText : ()V
        //   5674: aload #153
        //   5676: ldc 'Times-Roman'
        //   5678: ldc 'Cp1257'
        //   5680: iconst_1
        //   5681: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5684: ldc 10.0
        //   5686: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5689: aload #153
        //   5691: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5694: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5697: aload #153
        //   5699: ldc 510.0
        //   5701: ldc 605.0
        //   5703: invokevirtual setTextMatrix : (FF)V
        //   5706: aload #153
        //   5708: new java/lang/StringBuilder
        //   5711: dup
        //   5712: invokespecial <init> : ()V
        //   5715: ldc 'Title: '
        //   5717: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5720: aload #21
        //   5722: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   5725: invokevirtual toString : ()Ljava/lang/String;
        //   5728: invokevirtual showText : (Ljava/lang/String;)V
        //   5731: aload #153
        //   5733: invokevirtual endText : ()V
        //   5736: aload #153
        //   5738: invokevirtual beginText : ()V
        //   5741: aload #153
        //   5743: ldc 'Times-Roman'
        //   5745: ldc 'Cp1257'
        //   5747: iconst_1
        //   5748: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5751: ldc 10.0
        //   5753: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5756: aload #153
        //   5758: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5761: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5764: aload #153
        //   5766: ldc 105.0
        //   5768: ldc 580.0
        //   5770: invokevirtual setTextMatrix : (FF)V
        //   5773: aload #153
        //   5775: aload #49
        //   5777: invokevirtual showText : (Ljava/lang/String;)V
        //   5780: aload #153
        //   5782: invokevirtual endText : ()V
        //   5785: aload #153
        //   5787: invokevirtual beginText : ()V
        //   5790: aload #153
        //   5792: ldc 'Times-Roman'
        //   5794: ldc 'Cp1257'
        //   5796: iconst_1
        //   5797: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5800: ldc 10.0
        //   5802: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5805: aload #153
        //   5807: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5810: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5813: aload #153
        //   5815: ldc 300.0
        //   5817: ldc 580.0
        //   5819: invokevirtual setTextMatrix : (FF)V
        //   5822: aload #153
        //   5824: aload #50
        //   5826: invokevirtual showText : (Ljava/lang/String;)V
        //   5829: aload #153
        //   5831: invokevirtual endText : ()V
        //   5834: aload #153
        //   5836: invokevirtual beginText : ()V
        //   5839: aload #153
        //   5841: ldc 'Times-Roman'
        //   5843: ldc 'Cp1257'
        //   5845: iconst_1
        //   5846: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5849: ldc 10.0
        //   5851: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5854: aload #153
        //   5856: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5859: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5862: aload #153
        //   5864: ldc 105.0
        //   5866: ldc_w 545.0
        //   5869: invokevirtual setTextMatrix : (FF)V
        //   5872: aload #153
        //   5874: aload #37
        //   5876: invokevirtual showText : (Ljava/lang/String;)V
        //   5879: aload #153
        //   5881: invokevirtual endText : ()V
        //   5884: aload #153
        //   5886: invokevirtual beginText : ()V
        //   5889: aload #153
        //   5891: ldc 'Times-Roman'
        //   5893: ldc 'Cp1257'
        //   5895: iconst_1
        //   5896: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5899: ldc 10.0
        //   5901: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5904: aload #153
        //   5906: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5909: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5912: aload #153
        //   5914: ldc 210.0
        //   5916: ldc_w 545.0
        //   5919: invokevirtual setTextMatrix : (FF)V
        //   5922: aload #153
        //   5924: aload #27
        //   5926: invokevirtual showText : (Ljava/lang/String;)V
        //   5929: aload #153
        //   5931: invokevirtual endText : ()V
        //   5934: aload #153
        //   5936: invokevirtual beginText : ()V
        //   5939: aload #153
        //   5941: ldc 'Times-Roman'
        //   5943: ldc 'Cp1257'
        //   5945: iconst_1
        //   5946: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5949: ldc 10.0
        //   5951: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5954: aload #153
        //   5956: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5959: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5962: aload #153
        //   5964: ldc_w 310.0
        //   5967: ldc_w 545.0
        //   5970: invokevirtual setTextMatrix : (FF)V
        //   5973: aload #153
        //   5975: aload #28
        //   5977: invokevirtual showText : (Ljava/lang/String;)V
        //   5980: aload #153
        //   5982: invokevirtual endText : ()V
        //   5985: aload #153
        //   5987: invokevirtual beginText : ()V
        //   5990: aload #153
        //   5992: ldc 'Times-Roman'
        //   5994: ldc 'Cp1257'
        //   5996: iconst_1
        //   5997: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6000: ldc 10.0
        //   6002: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6005: aload #153
        //   6007: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6010: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6013: aload #153
        //   6015: ldc 365.0
        //   6017: ldc_w 545.0
        //   6020: invokevirtual setTextMatrix : (FF)V
        //   6023: aload #153
        //   6025: aload #29
        //   6027: invokevirtual showText : (Ljava/lang/String;)V
        //   6030: aload #153
        //   6032: invokevirtual endText : ()V
        //   6035: aload #153
        //   6037: invokevirtual beginText : ()V
        //   6040: aload #153
        //   6042: ldc 'Times-Roman'
        //   6044: ldc 'Cp1257'
        //   6046: iconst_1
        //   6047: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6050: ldc 10.0
        //   6052: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6055: aload #153
        //   6057: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6060: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6063: aload #153
        //   6065: ldc_w 425.0
        //   6068: ldc_w 545.0
        //   6071: invokevirtual setTextMatrix : (FF)V
        //   6074: aload #153
        //   6076: aload #26
        //   6078: invokevirtual showText : (Ljava/lang/String;)V
        //   6081: aload #153
        //   6083: invokevirtual endText : ()V
        //   6086: aload #153
        //   6088: invokevirtual beginText : ()V
        //   6091: aload #153
        //   6093: ldc 'Times-Roman'
        //   6095: ldc 'Cp1257'
        //   6097: iconst_1
        //   6098: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6101: ldc 10.0
        //   6103: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6106: aload #153
        //   6108: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6111: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6114: aload #153
        //   6116: ldc 50.0
        //   6118: ldc_w 515.0
        //   6121: invokevirtual setTextMatrix : (FF)V
        //   6124: aload #153
        //   6126: aload #32
        //   6128: invokevirtual showText : (Ljava/lang/String;)V
        //   6131: aload #153
        //   6133: invokevirtual endText : ()V
        //   6136: aload #153
        //   6138: invokevirtual beginText : ()V
        //   6141: aload #153
        //   6143: ldc 'Times-Roman'
        //   6145: ldc 'Cp1257'
        //   6147: iconst_1
        //   6148: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6151: ldc 10.0
        //   6153: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6156: aload #153
        //   6158: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6161: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6164: aload #153
        //   6166: ldc_w 310.0
        //   6169: ldc_w 515.0
        //   6172: invokevirtual setTextMatrix : (FF)V
        //   6175: aload #153
        //   6177: aload #33
        //   6179: invokevirtual showText : (Ljava/lang/String;)V
        //   6182: aload #153
        //   6184: invokevirtual endText : ()V
        //   6187: aload #153
        //   6189: invokevirtual beginText : ()V
        //   6192: aload #153
        //   6194: ldc 'Times-Roman'
        //   6196: ldc 'Cp1257'
        //   6198: iconst_1
        //   6199: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6202: ldc 10.0
        //   6204: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6207: aload #153
        //   6209: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6212: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6215: aload #153
        //   6217: ldc_w 100.0
        //   6220: ldc 490.0
        //   6222: invokevirtual setTextMatrix : (FF)V
        //   6225: aload #153
        //   6227: ldc ''
        //   6229: invokevirtual showText : (Ljava/lang/String;)V
        //   6232: aload #153
        //   6234: invokevirtual endText : ()V
        //   6237: aload #153
        //   6239: invokevirtual beginText : ()V
        //   6242: aload #153
        //   6244: ldc 'Times-Roman'
        //   6246: ldc 'Cp1257'
        //   6248: iconst_1
        //   6249: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6252: ldc 10.0
        //   6254: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6257: aload #153
        //   6259: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6262: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6265: aload #153
        //   6267: ldc_w 230.0
        //   6270: ldc 490.0
        //   6272: invokevirtual setTextMatrix : (FF)V
        //   6275: aload #153
        //   6277: aload #31
        //   6279: invokevirtual showText : (Ljava/lang/String;)V
        //   6282: aload #153
        //   6284: invokevirtual endText : ()V
        //   6287: aload #153
        //   6289: invokevirtual beginText : ()V
        //   6292: aload #153
        //   6294: ldc 'Times-Roman'
        //   6296: ldc 'Cp1257'
        //   6298: iconst_1
        //   6299: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6302: ldc 10.0
        //   6304: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6307: aload #153
        //   6309: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6312: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6315: aload #153
        //   6317: ldc 375.0
        //   6319: ldc 490.0
        //   6321: invokevirtual setTextMatrix : (FF)V
        //   6324: aload #153
        //   6326: aload #30
        //   6328: invokevirtual showText : (Ljava/lang/String;)V
        //   6331: aload #153
        //   6333: invokevirtual endText : ()V
        //   6336: aload #153
        //   6338: invokevirtual beginText : ()V
        //   6341: aload #153
        //   6343: ldc 'Times-Roman'
        //   6345: ldc 'Cp1257'
        //   6347: iconst_1
        //   6348: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6351: ldc 10.0
        //   6353: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6356: aload #153
        //   6358: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6361: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6364: aload #153
        //   6366: ldc_w 100.0
        //   6369: ldc 460.0
        //   6371: invokevirtual setTextMatrix : (FF)V
        //   6374: aload #153
        //   6376: aload #39
        //   6378: invokevirtual showText : (Ljava/lang/String;)V
        //   6381: aload #153
        //   6383: invokevirtual endText : ()V
        //   6386: aload #153
        //   6388: invokevirtual beginText : ()V
        //   6391: aload #153
        //   6393: ldc 'Times-Roman'
        //   6395: ldc 'Cp1257'
        //   6397: iconst_1
        //   6398: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6401: ldc 10.0
        //   6403: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6406: aload #153
        //   6408: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6411: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6414: aload #153
        //   6416: ldc_w 230.0
        //   6419: ldc 460.0
        //   6421: invokevirtual setTextMatrix : (FF)V
        //   6424: aload #153
        //   6426: aload #38
        //   6428: invokevirtual showText : (Ljava/lang/String;)V
        //   6431: aload #153
        //   6433: invokevirtual endText : ()V
        //   6436: aload #153
        //   6438: invokevirtual beginText : ()V
        //   6441: aload #153
        //   6443: ldc 'Times-Roman'
        //   6445: ldc 'Cp1257'
        //   6447: iconst_1
        //   6448: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6451: ldc 10.0
        //   6453: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6456: aload #153
        //   6458: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6461: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6464: aload #153
        //   6466: ldc 400.0
        //   6468: ldc 460.0
        //   6470: invokevirtual setTextMatrix : (FF)V
        //   6473: aload #153
        //   6475: aload #40
        //   6477: invokevirtual showText : (Ljava/lang/String;)V
        //   6480: aload #153
        //   6482: invokevirtual endText : ()V
        //   6485: aload #153
        //   6487: invokevirtual beginText : ()V
        //   6490: aload #153
        //   6492: ldc 'Times-Roman'
        //   6494: ldc 'Cp1257'
        //   6496: iconst_1
        //   6497: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6500: ldc 10.0
        //   6502: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6505: aload #153
        //   6507: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6510: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6513: aload #153
        //   6515: ldc 110.0
        //   6517: ldc 430.0
        //   6519: invokevirtual setTextMatrix : (FF)V
        //   6522: aload #153
        //   6524: aload #41
        //   6526: invokevirtual showText : (Ljava/lang/String;)V
        //   6529: aload #153
        //   6531: invokevirtual endText : ()V
        //   6534: aload #153
        //   6536: invokevirtual beginText : ()V
        //   6539: aload #153
        //   6541: ldc 'Times-Roman'
        //   6543: ldc 'Cp1257'
        //   6545: iconst_1
        //   6546: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6549: ldc 10.0
        //   6551: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6554: aload #153
        //   6556: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6559: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6562: aload #153
        //   6564: ldc_w 320.0
        //   6567: ldc 430.0
        //   6569: invokevirtual setTextMatrix : (FF)V
        //   6572: aload #153
        //   6574: aload #42
        //   6576: invokevirtual showText : (Ljava/lang/String;)V
        //   6579: aload #153
        //   6581: invokevirtual endText : ()V
        //   6584: aload #153
        //   6586: invokevirtual beginText : ()V
        //   6589: aload #153
        //   6591: ldc 'Times-Roman'
        //   6593: ldc 'Cp1257'
        //   6595: iconst_1
        //   6596: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6599: ldc 10.0
        //   6601: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6604: aload #153
        //   6606: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6609: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6612: aload #153
        //   6614: ldc 200.0
        //   6616: ldc 385.0
        //   6618: invokevirtual setTextMatrix : (FF)V
        //   6621: aload #153
        //   6623: aload #69
        //   6625: invokevirtual showText : (Ljava/lang/String;)V
        //   6628: aload #153
        //   6630: invokevirtual endText : ()V
        //   6633: aload #153
        //   6635: invokevirtual beginText : ()V
        //   6638: aload #153
        //   6640: ldc 'Times-Roman'
        //   6642: ldc 'Cp1257'
        //   6644: iconst_1
        //   6645: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6648: ldc 10.0
        //   6650: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6653: aload #153
        //   6655: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6658: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6661: aload #153
        //   6663: ldc 450.0
        //   6665: ldc 385.0
        //   6667: invokevirtual setTextMatrix : (FF)V
        //   6670: aload #153
        //   6672: aload #71
        //   6674: invokevirtual showText : (Ljava/lang/String;)V
        //   6677: aload #153
        //   6679: invokevirtual endText : ()V
        //   6682: aload #153
        //   6684: invokevirtual beginText : ()V
        //   6687: aload #153
        //   6689: ldc 'Times-Roman'
        //   6691: ldc 'Cp1257'
        //   6693: iconst_1
        //   6694: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6697: ldc 10.0
        //   6699: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6702: aload #153
        //   6704: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6707: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6710: aload #153
        //   6712: ldc 60.0
        //   6714: ldc 360.0
        //   6716: invokevirtual setTextMatrix : (FF)V
        //   6719: aload #153
        //   6721: aload #72
        //   6723: invokevirtual showText : (Ljava/lang/String;)V
        //   6726: aload #153
        //   6728: invokevirtual endText : ()V
        //   6731: aload #153
        //   6733: invokevirtual beginText : ()V
        //   6736: aload #153
        //   6738: ldc 'Times-Roman'
        //   6740: ldc 'Cp1257'
        //   6742: iconst_1
        //   6743: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6746: ldc 10.0
        //   6748: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6751: aload #153
        //   6753: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6756: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6759: aload #153
        //   6761: ldc 280.0
        //   6763: ldc 360.0
        //   6765: invokevirtual setTextMatrix : (FF)V
        //   6768: aload #153
        //   6770: aload #73
        //   6772: invokevirtual showText : (Ljava/lang/String;)V
        //   6775: aload #153
        //   6777: invokevirtual endText : ()V
        //   6780: aload #153
        //   6782: invokevirtual beginText : ()V
        //   6785: aload #153
        //   6787: ldc 'Times-Roman'
        //   6789: ldc 'Cp1257'
        //   6791: iconst_1
        //   6792: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6795: ldc 10.0
        //   6797: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6800: aload #153
        //   6802: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6805: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6808: aload #153
        //   6810: ldc 420.0
        //   6812: ldc 360.0
        //   6814: invokevirtual setTextMatrix : (FF)V
        //   6817: aload #153
        //   6819: aload #74
        //   6821: invokevirtual showText : (Ljava/lang/String;)V
        //   6824: aload #153
        //   6826: invokevirtual endText : ()V
        //   6829: aload #153
        //   6831: invokevirtual beginText : ()V
        //   6834: aload #153
        //   6836: ldc 'Times-Roman'
        //   6838: ldc 'Cp1257'
        //   6840: iconst_1
        //   6841: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6844: ldc 10.0
        //   6846: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6849: aload #153
        //   6851: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6854: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6857: aload #153
        //   6859: ldc 60.0
        //   6861: ldc 335.0
        //   6863: invokevirtual setTextMatrix : (FF)V
        //   6866: aload #153
        //   6868: aload #75
        //   6870: invokevirtual showText : (Ljava/lang/String;)V
        //   6873: aload #153
        //   6875: invokevirtual endText : ()V
        //   6878: aload #153
        //   6880: invokevirtual beginText : ()V
        //   6883: aload #153
        //   6885: ldc 'Times-Roman'
        //   6887: ldc 'Cp1257'
        //   6889: iconst_1
        //   6890: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6893: ldc 8.0
        //   6895: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6898: aload #153
        //   6900: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6903: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6906: aload #153
        //   6908: ldc 220.0
        //   6910: ldc 335.0
        //   6912: invokevirtual setTextMatrix : (FF)V
        //   6915: aload #153
        //   6917: aload #76
        //   6919: invokevirtual showText : (Ljava/lang/String;)V
        //   6922: aload #153
        //   6924: invokevirtual endText : ()V
        //   6927: aload #153
        //   6929: invokevirtual beginText : ()V
        //   6932: aload #153
        //   6934: ldc 'Times-Roman'
        //   6936: ldc 'Cp1257'
        //   6938: iconst_1
        //   6939: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6942: ldc 10.0
        //   6944: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6947: aload #153
        //   6949: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6952: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6955: aload #153
        //   6957: ldc 420.0
        //   6959: ldc 335.0
        //   6961: invokevirtual setTextMatrix : (FF)V
        //   6964: aload #153
        //   6966: aload #33
        //   6968: invokevirtual showText : (Ljava/lang/String;)V
        //   6971: aload #153
        //   6973: invokevirtual endText : ()V
        //   6976: aload #153
        //   6978: invokevirtual beginText : ()V
        //   6981: aload #153
        //   6983: ldc 'Times-Roman'
        //   6985: ldc 'Cp1257'
        //   6987: iconst_1
        //   6988: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6991: ldc 10.0
        //   6993: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6996: aload #153
        //   6998: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7001: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7004: aload #153
        //   7006: ldc 60.0
        //   7008: ldc_w 307.0
        //   7011: invokevirtual setTextMatrix : (FF)V
        //   7014: aload #153
        //   7016: aload #77
        //   7018: invokevirtual showText : (Ljava/lang/String;)V
        //   7021: aload #153
        //   7023: invokevirtual endText : ()V
        //   7026: aload #153
        //   7028: invokevirtual beginText : ()V
        //   7031: aload #153
        //   7033: ldc 'Times-Roman'
        //   7035: ldc 'Cp1257'
        //   7037: iconst_1
        //   7038: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7041: ldc 10.0
        //   7043: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7046: aload #153
        //   7048: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7051: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7054: aload #153
        //   7056: ldc 160.0
        //   7058: ldc_w 307.0
        //   7061: invokevirtual setTextMatrix : (FF)V
        //   7064: aload #153
        //   7066: aload #78
        //   7068: invokevirtual showText : (Ljava/lang/String;)V
        //   7071: aload #153
        //   7073: invokevirtual endText : ()V
        //   7076: aload #153
        //   7078: invokevirtual beginText : ()V
        //   7081: aload #153
        //   7083: ldc 'Times-Roman'
        //   7085: ldc 'Cp1257'
        //   7087: iconst_1
        //   7088: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7091: ldc 10.0
        //   7093: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7096: aload #153
        //   7098: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7101: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7104: aload #153
        //   7106: ldc 270.0
        //   7108: ldc_w 307.0
        //   7111: invokevirtual setTextMatrix : (FF)V
        //   7114: aload #153
        //   7116: aload #79
        //   7118: invokevirtual showText : (Ljava/lang/String;)V
        //   7121: aload #153
        //   7123: invokevirtual endText : ()V
        //   7126: aload #153
        //   7128: invokevirtual beginText : ()V
        //   7131: aload #153
        //   7133: ldc 'Times-Roman'
        //   7135: ldc 'Cp1257'
        //   7137: iconst_1
        //   7138: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7141: ldc 10.0
        //   7143: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7146: aload #153
        //   7148: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7151: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7154: aload #153
        //   7156: ldc 460.0
        //   7158: ldc_w 307.0
        //   7161: invokevirtual setTextMatrix : (FF)V
        //   7164: aload #153
        //   7166: aload #31
        //   7168: invokevirtual showText : (Ljava/lang/String;)V
        //   7171: aload #153
        //   7173: invokevirtual endText : ()V
        //   7176: aload #153
        //   7178: invokevirtual beginText : ()V
        //   7181: aload #153
        //   7183: ldc 'Times-Roman'
        //   7185: ldc 'Cp1257'
        //   7187: iconst_1
        //   7188: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7191: ldc 10.0
        //   7193: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7196: aload #153
        //   7198: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7201: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7204: aload #153
        //   7206: ldc 60.0
        //   7208: ldc_w 282.0
        //   7211: invokevirtual setTextMatrix : (FF)V
        //   7214: aload #153
        //   7216: aload #80
        //   7218: invokevirtual showText : (Ljava/lang/String;)V
        //   7221: aload #153
        //   7223: invokevirtual endText : ()V
        //   7226: aload #153
        //   7228: invokevirtual beginText : ()V
        //   7231: aload #153
        //   7233: ldc 'Times-Roman'
        //   7235: ldc 'Cp1257'
        //   7237: iconst_1
        //   7238: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7241: ldc 10.0
        //   7243: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7246: aload #153
        //   7248: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7251: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7254: aload #153
        //   7256: ldc 170.0
        //   7258: ldc_w 282.0
        //   7261: invokevirtual setTextMatrix : (FF)V
        //   7264: aload #153
        //   7266: aload #81
        //   7268: invokevirtual showText : (Ljava/lang/String;)V
        //   7271: aload #153
        //   7273: invokevirtual endText : ()V
        //   7276: aload #153
        //   7278: invokevirtual beginText : ()V
        //   7281: aload #153
        //   7283: ldc 'Times-Roman'
        //   7285: ldc 'Cp1257'
        //   7287: iconst_1
        //   7288: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7291: ldc 10.0
        //   7293: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7296: aload #153
        //   7298: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7301: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7304: aload #153
        //   7306: ldc 285.0
        //   7308: ldc_w 282.0
        //   7311: invokevirtual setTextMatrix : (FF)V
        //   7314: aload #153
        //   7316: aload #82
        //   7318: invokevirtual showText : (Ljava/lang/String;)V
        //   7321: aload #153
        //   7323: invokevirtual endText : ()V
        //   7326: aload #153
        //   7328: invokevirtual beginText : ()V
        //   7331: aload #153
        //   7333: ldc 'Times-Roman'
        //   7335: ldc 'Cp1257'
        //   7337: iconst_1
        //   7338: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7341: ldc 10.0
        //   7343: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7346: aload #153
        //   7348: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7351: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7354: aload #153
        //   7356: ldc 445.0
        //   7358: ldc_w 282.0
        //   7361: invokevirtual setTextMatrix : (FF)V
        //   7364: aload #153
        //   7366: aload #83
        //   7368: invokevirtual showText : (Ljava/lang/String;)V
        //   7371: aload #153
        //   7373: invokevirtual endText : ()V
        //   7376: aload #153
        //   7378: invokevirtual beginText : ()V
        //   7381: aload #153
        //   7383: ldc 'Times-Roman'
        //   7385: ldc 'Cp1257'
        //   7387: iconst_1
        //   7388: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7391: ldc 10.0
        //   7393: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7396: aload #153
        //   7398: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7401: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7404: aload #153
        //   7406: ldc 60.0
        //   7408: ldc_w 255.0
        //   7411: invokevirtual setTextMatrix : (FF)V
        //   7414: aload #153
        //   7416: aload #84
        //   7418: invokevirtual showText : (Ljava/lang/String;)V
        //   7421: aload #153
        //   7423: invokevirtual endText : ()V
        //   7426: aload #153
        //   7428: invokevirtual beginText : ()V
        //   7431: aload #153
        //   7433: ldc 'Times-Roman'
        //   7435: ldc 'Cp1257'
        //   7437: iconst_1
        //   7438: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7441: ldc 10.0
        //   7443: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7446: aload #153
        //   7448: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7451: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7454: aload #153
        //   7456: ldc 260.0
        //   7458: ldc_w 255.0
        //   7461: invokevirtual setTextMatrix : (FF)V
        //   7464: aload #153
        //   7466: aload #85
        //   7468: invokevirtual showText : (Ljava/lang/String;)V
        //   7471: aload #153
        //   7473: invokevirtual endText : ()V
        //   7476: aload #153
        //   7478: invokevirtual beginText : ()V
        //   7481: aload #153
        //   7483: ldc 'Times-Roman'
        //   7485: ldc 'Cp1257'
        //   7487: iconst_1
        //   7488: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7491: ldc 10.0
        //   7493: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7496: aload #153
        //   7498: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7501: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7504: aload #153
        //   7506: ldc 445.0
        //   7508: ldc_w 255.0
        //   7511: invokevirtual setTextMatrix : (FF)V
        //   7514: aload #153
        //   7516: aload #86
        //   7518: invokevirtual showText : (Ljava/lang/String;)V
        //   7521: aload #153
        //   7523: invokevirtual endText : ()V
        //   7526: aload #153
        //   7528: invokevirtual beginText : ()V
        //   7531: aload #153
        //   7533: ldc 'Times-Roman'
        //   7535: ldc 'Cp1257'
        //   7537: iconst_1
        //   7538: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7541: ldc 10.0
        //   7543: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7546: aload #153
        //   7548: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7551: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7554: aload #153
        //   7556: ldc 60.0
        //   7558: ldc_w 227.0
        //   7561: invokevirtual setTextMatrix : (FF)V
        //   7564: aload #153
        //   7566: aload #89
        //   7568: invokevirtual showText : (Ljava/lang/String;)V
        //   7571: aload #153
        //   7573: invokevirtual endText : ()V
        //   7576: aload #153
        //   7578: invokevirtual beginText : ()V
        //   7581: aload #153
        //   7583: ldc 'Times-Roman'
        //   7585: ldc 'Cp1257'
        //   7587: iconst_1
        //   7588: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7591: ldc 10.0
        //   7593: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7596: aload #153
        //   7598: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7601: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7604: aload #153
        //   7606: ldc 260.0
        //   7608: ldc_w 227.0
        //   7611: invokevirtual setTextMatrix : (FF)V
        //   7614: aload #153
        //   7616: aload #87
        //   7618: invokevirtual showText : (Ljava/lang/String;)V
        //   7621: aload #153
        //   7623: invokevirtual endText : ()V
        //   7626: aload #153
        //   7628: invokevirtual beginText : ()V
        //   7631: aload #153
        //   7633: ldc 'Times-Roman'
        //   7635: ldc 'Cp1257'
        //   7637: iconst_1
        //   7638: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7641: ldc 10.0
        //   7643: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7646: aload #153
        //   7648: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7651: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7654: aload #153
        //   7656: ldc 420.0
        //   7658: ldc_w 227.0
        //   7661: invokevirtual setTextMatrix : (FF)V
        //   7664: aload #153
        //   7666: aload #88
        //   7668: invokevirtual showText : (Ljava/lang/String;)V
        //   7671: aload #153
        //   7673: invokevirtual endText : ()V
        //   7676: aload #153
        //   7678: invokevirtual beginText : ()V
        //   7681: aload #153
        //   7683: ldc 'Times-Roman'
        //   7685: ldc 'Cp1257'
        //   7687: iconst_1
        //   7688: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7691: ldc 10.0
        //   7693: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7696: aload #153
        //   7698: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7701: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7704: aload #153
        //   7706: ldc 60.0
        //   7708: ldc_w 185.0
        //   7711: invokevirtual setTextMatrix : (FF)V
        //   7714: aload #153
        //   7716: aload #90
        //   7718: invokevirtual showText : (Ljava/lang/String;)V
        //   7721: aload #153
        //   7723: invokevirtual endText : ()V
        //   7726: aload #153
        //   7728: invokevirtual beginText : ()V
        //   7731: aload #153
        //   7733: ldc 'Times-Roman'
        //   7735: ldc 'Cp1257'
        //   7737: iconst_1
        //   7738: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7741: ldc 10.0
        //   7743: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7746: aload #153
        //   7748: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7751: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7754: aload #153
        //   7756: ldc 225.0
        //   7758: ldc_w 185.0
        //   7761: invokevirtual setTextMatrix : (FF)V
        //   7764: aload #153
        //   7766: aload #91
        //   7768: invokevirtual showText : (Ljava/lang/String;)V
        //   7771: aload #153
        //   7773: invokevirtual endText : ()V
        //   7776: aload #153
        //   7778: invokevirtual beginText : ()V
        //   7781: aload #153
        //   7783: ldc 'Times-Roman'
        //   7785: ldc 'Cp1257'
        //   7787: iconst_1
        //   7788: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7791: ldc 10.0
        //   7793: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7796: aload #153
        //   7798: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7801: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7804: aload #153
        //   7806: ldc 380.0
        //   7808: ldc_w 185.0
        //   7811: invokevirtual setTextMatrix : (FF)V
        //   7814: aload #153
        //   7816: aload #92
        //   7818: invokevirtual showText : (Ljava/lang/String;)V
        //   7821: aload #153
        //   7823: invokevirtual endText : ()V
        //   7826: aload #153
        //   7828: invokevirtual beginText : ()V
        //   7831: aload #153
        //   7833: ldc 'Times-Roman'
        //   7835: ldc 'Cp1257'
        //   7837: iconst_1
        //   7838: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7841: ldc 10.0
        //   7843: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7846: aload #153
        //   7848: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7851: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7854: aload #153
        //   7856: ldc 450.0
        //   7858: ldc 105.0
        //   7860: invokevirtual setTextMatrix : (FF)V
        //   7863: aload #153
        //   7865: aload #15
        //   7867: invokevirtual showText : (Ljava/lang/String;)V
        //   7870: aload #153
        //   7872: invokevirtual endText : ()V
        //   7875: iload #152
        //   7877: iconst_2
        //   7878: if_icmpne -> 8423
        //   7881: aload #148
        //   7883: iload #152
        //   7885: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7888: astore #153
        //   7890: aload #153
        //   7892: invokevirtual beginText : ()V
        //   7895: aload #153
        //   7897: ldc 'Times-Roman'
        //   7899: ldc 'Cp1257'
        //   7901: iconst_1
        //   7902: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7905: ldc 10.0
        //   7907: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7910: aload #153
        //   7912: ldc_w 100.0
        //   7915: ldc_w 675.0
        //   7918: invokevirtual setTextMatrix : (FF)V
        //   7921: aload #153
        //   7923: aload #15
        //   7925: invokevirtual showText : (Ljava/lang/String;)V
        //   7928: aload #153
        //   7930: invokevirtual endText : ()V
        //   7933: aload #153
        //   7935: invokevirtual beginText : ()V
        //   7938: aload #153
        //   7940: ldc 'Times-Roman'
        //   7942: ldc 'Cp1257'
        //   7944: iconst_1
        //   7945: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7948: ldc 10.0
        //   7950: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7953: aload #153
        //   7955: ldc_w 425.0
        //   7958: ldc_w 675.0
        //   7961: invokevirtual setTextMatrix : (FF)V
        //   7964: aload #153
        //   7966: aload #29
        //   7968: invokevirtual showText : (Ljava/lang/String;)V
        //   7971: aload #153
        //   7973: invokevirtual endText : ()V
        //   7976: aload #153
        //   7978: invokevirtual beginText : ()V
        //   7981: aload #153
        //   7983: ldc 'Times-Roman'
        //   7985: ldc 'Cp1257'
        //   7987: iconst_1
        //   7988: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7991: ldc 10.0
        //   7993: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7996: aload #153
        //   7998: ldc_w 100.0
        //   8001: ldc 640.0
        //   8003: invokevirtual setTextMatrix : (FF)V
        //   8006: aload #153
        //   8008: new java/lang/StringBuilder
        //   8011: dup
        //   8012: invokespecial <init> : ()V
        //   8015: aload #22
        //   8017: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8020: ldc ' '
        //   8022: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8025: aload #25
        //   8027: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8030: ldc ' '
        //   8032: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8035: aload #24
        //   8037: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8040: invokevirtual toString : ()Ljava/lang/String;
        //   8043: invokevirtual showText : (Ljava/lang/String;)V
        //   8046: aload #153
        //   8048: invokevirtual endText : ()V
        //   8051: aload #153
        //   8053: invokevirtual beginText : ()V
        //   8056: aload #153
        //   8058: ldc 'Times-Roman'
        //   8060: ldc 'Cp1257'
        //   8062: iconst_1
        //   8063: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8066: ldc 10.0
        //   8068: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8071: aload #153
        //   8073: ldc_w 425.0
        //   8076: ldc 640.0
        //   8078: invokevirtual setTextMatrix : (FF)V
        //   8081: aload #153
        //   8083: aload #27
        //   8085: invokevirtual showText : (Ljava/lang/String;)V
        //   8088: aload #153
        //   8090: invokevirtual endText : ()V
        //   8093: aload #153
        //   8095: invokevirtual beginText : ()V
        //   8098: aload #153
        //   8100: ldc 'Times-Roman'
        //   8102: ldc 'Cp1257'
        //   8104: iconst_1
        //   8105: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8108: ldc 10.0
        //   8110: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8113: aload #153
        //   8115: ldc 450.0
        //   8117: ldc 605.0
        //   8119: invokevirtual setTextMatrix : (FF)V
        //   8122: aload #153
        //   8124: aload #56
        //   8126: invokevirtual showText : (Ljava/lang/String;)V
        //   8129: aload #153
        //   8131: invokevirtual endText : ()V
        //   8134: aload #153
        //   8136: invokevirtual beginText : ()V
        //   8139: aload #153
        //   8141: ldc 'Times-Roman'
        //   8143: ldc 'Cp1257'
        //   8145: iconst_1
        //   8146: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8149: ldc 10.0
        //   8151: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8154: aload #153
        //   8156: ldc 450.0
        //   8158: ldc 570.0
        //   8160: invokevirtual setTextMatrix : (FF)V
        //   8163: aload #153
        //   8165: aload #63
        //   8167: invokevirtual showText : (Ljava/lang/String;)V
        //   8170: aload #153
        //   8172: invokevirtual endText : ()V
        //   8175: aload #153
        //   8177: invokevirtual beginText : ()V
        //   8180: aload #153
        //   8182: ldc 'Times-Roman'
        //   8184: ldc 'Cp1257'
        //   8186: iconst_1
        //   8187: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8190: ldc 10.0
        //   8192: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8195: aload #153
        //   8197: ldc 450.0
        //   8199: ldc 535.0
        //   8201: invokevirtual setTextMatrix : (FF)V
        //   8204: aload #153
        //   8206: ldc ''
        //   8208: invokevirtual showText : (Ljava/lang/String;)V
        //   8211: aload #153
        //   8213: invokevirtual endText : ()V
        //   8216: aload #153
        //   8218: invokevirtual beginText : ()V
        //   8221: aload #153
        //   8223: ldc 'Times-Roman'
        //   8225: ldc 'Cp1257'
        //   8227: iconst_1
        //   8228: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8231: ldc 10.0
        //   8233: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8236: aload #153
        //   8238: ldc 450.0
        //   8240: ldc 500.0
        //   8242: invokevirtual setTextMatrix : (FF)V
        //   8245: aload #153
        //   8247: ldc ''
        //   8249: invokevirtual showText : (Ljava/lang/String;)V
        //   8252: aload #153
        //   8254: invokevirtual endText : ()V
        //   8257: aload #153
        //   8259: invokevirtual beginText : ()V
        //   8262: aload #153
        //   8264: ldc 'Times-Roman'
        //   8266: ldc 'Cp1257'
        //   8268: iconst_1
        //   8269: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8272: ldc 10.0
        //   8274: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8277: aload #153
        //   8279: ldc 450.0
        //   8281: ldc 465.0
        //   8283: invokevirtual setTextMatrix : (FF)V
        //   8286: aload #153
        //   8288: aload #51
        //   8290: invokevirtual showText : (Ljava/lang/String;)V
        //   8293: aload #153
        //   8295: invokevirtual endText : ()V
        //   8298: aload #153
        //   8300: invokevirtual beginText : ()V
        //   8303: aload #153
        //   8305: ldc 'Times-Roman'
        //   8307: ldc 'Cp1257'
        //   8309: iconst_1
        //   8310: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8313: ldc 10.0
        //   8315: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8318: aload #153
        //   8320: ldc 180.0
        //   8322: ldc 435.0
        //   8324: invokevirtual setTextMatrix : (FF)V
        //   8327: aload #153
        //   8329: aload #53
        //   8331: invokevirtual showText : (Ljava/lang/String;)V
        //   8334: aload #153
        //   8336: invokevirtual endText : ()V
        //   8339: aload #153
        //   8341: invokevirtual beginText : ()V
        //   8344: aload #153
        //   8346: ldc 'Times-Roman'
        //   8348: ldc 'Cp1257'
        //   8350: iconst_1
        //   8351: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8354: ldc 10.0
        //   8356: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8359: aload #153
        //   8361: ldc 450.0
        //   8363: ldc_w 310.0
        //   8366: invokevirtual setTextMatrix : (FF)V
        //   8369: aload #153
        //   8371: ldc ''
        //   8373: invokevirtual showText : (Ljava/lang/String;)V
        //   8376: aload #153
        //   8378: invokevirtual endText : ()V
        //   8381: aload #153
        //   8383: invokevirtual beginText : ()V
        //   8386: aload #153
        //   8388: ldc 'Times-Roman'
        //   8390: ldc 'Cp1257'
        //   8392: iconst_1
        //   8393: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8396: ldc 10.0
        //   8398: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8401: aload #153
        //   8403: ldc 450.0
        //   8405: ldc_w 265.0
        //   8408: invokevirtual setTextMatrix : (FF)V
        //   8411: aload #153
        //   8413: aload #55
        //   8415: invokevirtual showText : (Ljava/lang/String;)V
        //   8418: aload #153
        //   8420: invokevirtual endText : ()V
        //   8423: iload #152
        //   8425: iconst_3
        //   8426: if_icmpne -> 8555
        //   8429: aload #148
        //   8431: iload #152
        //   8433: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8436: astore #153
        //   8438: aload #153
        //   8440: invokevirtual beginText : ()V
        //   8443: aload #153
        //   8445: ldc 'Times-Roman'
        //   8447: ldc 'Cp1257'
        //   8449: iconst_1
        //   8450: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8453: ldc 10.0
        //   8455: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8458: aload #153
        //   8460: ldc_w 100.0
        //   8463: ldc 250.0
        //   8465: invokevirtual setTextMatrix : (FF)V
        //   8468: aload #153
        //   8470: new java/lang/StringBuilder
        //   8473: dup
        //   8474: invokespecial <init> : ()V
        //   8477: aload #22
        //   8479: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8482: ldc ' '
        //   8484: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8487: aload #25
        //   8489: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8492: ldc ' '
        //   8494: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8497: aload #24
        //   8499: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8502: invokevirtual toString : ()Ljava/lang/String;
        //   8505: invokevirtual showText : (Ljava/lang/String;)V
        //   8508: aload #153
        //   8510: invokevirtual endText : ()V
        //   8513: aload #153
        //   8515: invokevirtual beginText : ()V
        //   8518: aload #153
        //   8520: ldc 'Times-Roman'
        //   8522: ldc 'Cp1257'
        //   8524: iconst_1
        //   8525: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8528: ldc 10.0
        //   8530: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8533: aload #153
        //   8535: ldc_w 425.0
        //   8538: ldc 210.0
        //   8540: invokevirtual setTextMatrix : (FF)V
        //   8543: aload #153
        //   8545: aload #15
        //   8547: invokevirtual showText : (Ljava/lang/String;)V
        //   8550: aload #153
        //   8552: invokevirtual endText : ()V
        //   8555: iload #152
        //   8557: iconst_4
        //   8558: if_icmpne -> 8670
        //   8561: aload #148
        //   8563: iload #152
        //   8565: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8568: astore #153
        //   8570: aload #153
        //   8572: invokevirtual beginText : ()V
        //   8575: aload #153
        //   8577: ldc 'Times-Roman'
        //   8579: ldc 'Cp1257'
        //   8581: iconst_1
        //   8582: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8585: ldc 10.0
        //   8587: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8590: aload #153
        //   8592: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8595: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8598: aload #153
        //   8600: ldc 325.0
        //   8602: ldc_w 145.0
        //   8605: invokevirtual setTextMatrix : (FF)V
        //   8608: aload #153
        //   8610: aload #15
        //   8612: invokevirtual showText : (Ljava/lang/String;)V
        //   8615: aload #153
        //   8617: invokevirtual endText : ()V
        //   8620: aload #153
        //   8622: invokevirtual beginText : ()V
        //   8625: aload #153
        //   8627: ldc 'Times-Roman'
        //   8629: ldc 'Cp1257'
        //   8631: iconst_1
        //   8632: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8635: ldc 10.0
        //   8637: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8640: aload #153
        //   8642: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8645: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8648: aload #153
        //   8650: ldc 340.0
        //   8652: ldc_w 100.0
        //   8655: invokevirtual setTextMatrix : (FF)V
        //   8658: aload #153
        //   8660: aload #15
        //   8662: invokevirtual showText : (Ljava/lang/String;)V
        //   8665: aload #153
        //   8667: invokevirtual endText : ()V
        //   8670: iload #152
        //   8672: iconst_5
        //   8673: if_icmpne -> 8866
        //   8676: aload #148
        //   8678: iload #152
        //   8680: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8683: astore #153
        //   8685: aload #153
        //   8687: invokevirtual beginText : ()V
        //   8690: aload #153
        //   8692: ldc 'Times-Roman'
        //   8694: ldc 'Cp1257'
        //   8696: iconst_1
        //   8697: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8700: ldc 10.0
        //   8702: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8705: aload #153
        //   8707: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8710: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8713: aload #153
        //   8715: ldc_w 100.0
        //   8718: ldc 170.0
        //   8720: invokevirtual setTextMatrix : (FF)V
        //   8723: aload #153
        //   8725: new java/lang/StringBuilder
        //   8728: dup
        //   8729: invokespecial <init> : ()V
        //   8732: aload #22
        //   8734: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8737: ldc ' '
        //   8739: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8742: aload #25
        //   8744: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8747: ldc ' '
        //   8749: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8752: aload #24
        //   8754: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8757: invokevirtual toString : ()Ljava/lang/String;
        //   8760: invokevirtual showText : (Ljava/lang/String;)V
        //   8763: aload #153
        //   8765: invokevirtual endText : ()V
        //   8768: aload #153
        //   8770: invokevirtual beginText : ()V
        //   8773: aload #153
        //   8775: ldc 'Times-Roman'
        //   8777: ldc 'Cp1257'
        //   8779: iconst_1
        //   8780: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8783: ldc 10.0
        //   8785: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8788: aload #153
        //   8790: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8793: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8796: aload #153
        //   8798: ldc 430.0
        //   8800: ldc 120.0
        //   8802: invokevirtual setTextMatrix : (FF)V
        //   8805: aload #153
        //   8807: aload #15
        //   8809: invokevirtual showText : (Ljava/lang/String;)V
        //   8812: aload #153
        //   8814: invokevirtual endText : ()V
        //   8817: aload #153
        //   8819: invokevirtual beginText : ()V
        //   8822: aload #153
        //   8824: ldc 'Times-Roman'
        //   8826: ldc 'Cp1257'
        //   8828: iconst_1
        //   8829: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8832: ldc 10.0
        //   8834: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8837: aload #153
        //   8839: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8842: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8845: aload #153
        //   8847: ldc 430.0
        //   8849: ldc 75.0
        //   8851: invokevirtual setTextMatrix : (FF)V
        //   8854: aload #153
        //   8856: aload #15
        //   8858: invokevirtual showText : (Ljava/lang/String;)V
        //   8861: aload #153
        //   8863: invokevirtual endText : ()V
        //   8866: iload #152
        //   8868: bipush #6
        //   8870: if_icmpne -> 8932
        //   8873: aload #148
        //   8875: iload #152
        //   8877: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8880: astore #153
        //   8882: aload #153
        //   8884: invokevirtual beginText : ()V
        //   8887: aload #153
        //   8889: ldc 'Times-Roman'
        //   8891: ldc 'Cp1257'
        //   8893: iconst_1
        //   8894: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8897: ldc 10.0
        //   8899: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8902: aload #153
        //   8904: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8907: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8910: aload #153
        //   8912: ldc_w 425.0
        //   8915: ldc 385.0
        //   8917: invokevirtual setTextMatrix : (FF)V
        //   8920: aload #153
        //   8922: aload #15
        //   8924: invokevirtual showText : (Ljava/lang/String;)V
        //   8927: aload #153
        //   8929: invokevirtual endText : ()V
        //   8932: iload #152
        //   8934: bipush #7
        //   8936: if_icmpne -> 9080
        //   8939: aload #148
        //   8941: iload #152
        //   8943: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8946: astore #153
        //   8948: aload #153
        //   8950: invokevirtual beginText : ()V
        //   8953: aload #153
        //   8955: ldc 'Times-Roman'
        //   8957: ldc 'Cp1257'
        //   8959: iconst_1
        //   8960: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8963: ldc 10.0
        //   8965: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8968: aload #153
        //   8970: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8973: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8976: aload #153
        //   8978: ldc_w 140.0
        //   8981: ldc 120.0
        //   8983: invokevirtual setTextMatrix : (FF)V
        //   8986: aload #153
        //   8988: new java/lang/StringBuilder
        //   8991: dup
        //   8992: invokespecial <init> : ()V
        //   8995: aload #22
        //   8997: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9000: ldc ' '
        //   9002: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9005: aload #25
        //   9007: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9010: ldc ' '
        //   9012: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9015: aload #24
        //   9017: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9020: invokevirtual toString : ()Ljava/lang/String;
        //   9023: invokevirtual showText : (Ljava/lang/String;)V
        //   9026: aload #153
        //   9028: invokevirtual endText : ()V
        //   9031: aload #153
        //   9033: invokevirtual beginText : ()V
        //   9036: aload #153
        //   9038: ldc 'Times-Roman'
        //   9040: ldc 'Cp1257'
        //   9042: iconst_1
        //   9043: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9046: ldc 10.0
        //   9048: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9051: aload #153
        //   9053: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9056: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9059: aload #153
        //   9061: ldc 450.0
        //   9063: ldc 80.0
        //   9065: invokevirtual setTextMatrix : (FF)V
        //   9068: aload #153
        //   9070: aload #15
        //   9072: invokevirtual showText : (Ljava/lang/String;)V
        //   9075: aload #153
        //   9077: invokevirtual endText : ()V
        //   9080: iload #152
        //   9082: bipush #11
        //   9084: if_icmpne -> 9145
        //   9087: aload #148
        //   9089: iload #152
        //   9091: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   9094: astore #153
        //   9096: aload #153
        //   9098: invokevirtual beginText : ()V
        //   9101: aload #153
        //   9103: ldc 'Times-Roman'
        //   9105: ldc 'Cp1257'
        //   9107: iconst_1
        //   9108: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9111: ldc 10.0
        //   9113: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9116: aload #153
        //   9118: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9121: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9124: aload #153
        //   9126: ldc 450.0
        //   9128: ldc 280.0
        //   9130: invokevirtual setTextMatrix : (FF)V
        //   9133: aload #153
        //   9135: aload #15
        //   9137: invokevirtual showText : (Ljava/lang/String;)V
        //   9140: aload #153
        //   9142: invokevirtual endText : ()V
        //   9145: iload #152
        //   9147: bipush #12
        //   9149: if_icmpne -> 9659
        //   9152: aload #148
        //   9154: iload #152
        //   9156: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   9159: astore #153
        //   9161: aload #153
        //   9163: invokevirtual beginText : ()V
        //   9166: aload #153
        //   9168: ldc 'Times-Roman'
        //   9170: ldc 'Cp1257'
        //   9172: iconst_1
        //   9173: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9176: ldc 10.0
        //   9178: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9181: aload #153
        //   9183: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9186: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9189: aload #153
        //   9191: ldc 270.0
        //   9193: ldc 605.0
        //   9195: invokevirtual setTextMatrix : (FF)V
        //   9198: aload #153
        //   9200: aload #109
        //   9202: invokevirtual showText : (Ljava/lang/String;)V
        //   9205: aload #153
        //   9207: invokevirtual endText : ()V
        //   9210: aload #153
        //   9212: invokevirtual beginText : ()V
        //   9215: aload #153
        //   9217: ldc 'Times-Roman'
        //   9219: ldc 'Cp1257'
        //   9221: iconst_1
        //   9222: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9225: ldc 10.0
        //   9227: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9230: aload #153
        //   9232: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9235: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9238: aload #153
        //   9240: ldc_w 410.0
        //   9243: ldc 605.0
        //   9245: invokevirtual setTextMatrix : (FF)V
        //   9248: aload #153
        //   9250: aload #114
        //   9252: invokevirtual showText : (Ljava/lang/String;)V
        //   9255: aload #153
        //   9257: invokevirtual endText : ()V
        //   9260: aload #153
        //   9262: invokevirtual beginText : ()V
        //   9265: aload #153
        //   9267: ldc 'Times-Roman'
        //   9269: ldc 'Cp1257'
        //   9271: iconst_1
        //   9272: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9275: ldc 10.0
        //   9277: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9280: aload #153
        //   9282: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9285: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9288: aload #153
        //   9290: ldc 270.0
        //   9292: ldc_w 592.0
        //   9295: invokevirtual setTextMatrix : (FF)V
        //   9298: aload #153
        //   9300: aload #113
        //   9302: invokevirtual showText : (Ljava/lang/String;)V
        //   9305: aload #153
        //   9307: invokevirtual endText : ()V
        //   9310: aload #153
        //   9312: invokevirtual beginText : ()V
        //   9315: aload #153
        //   9317: ldc 'Times-Roman'
        //   9319: ldc 'Cp1257'
        //   9321: iconst_1
        //   9322: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9325: ldc 10.0
        //   9327: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9330: aload #153
        //   9332: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9335: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9338: aload #153
        //   9340: ldc 270.0
        //   9342: ldc_w 577.0
        //   9345: invokevirtual setTextMatrix : (FF)V
        //   9348: aload #153
        //   9350: aload #116
        //   9352: invokevirtual showText : (Ljava/lang/String;)V
        //   9355: aload #153
        //   9357: invokevirtual endText : ()V
        //   9360: aload #153
        //   9362: invokevirtual beginText : ()V
        //   9365: aload #153
        //   9367: ldc 'Times-Roman'
        //   9369: ldc 'Cp1257'
        //   9371: iconst_1
        //   9372: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9375: ldc 10.0
        //   9377: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9380: aload #153
        //   9382: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9385: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9388: aload #153
        //   9390: ldc 270.0
        //   9392: ldc_w 548.0
        //   9395: invokevirtual setTextMatrix : (FF)V
        //   9398: aload #153
        //   9400: aload #111
        //   9402: invokevirtual showText : (Ljava/lang/String;)V
        //   9405: aload #153
        //   9407: invokevirtual endText : ()V
        //   9410: aload #153
        //   9412: invokevirtual beginText : ()V
        //   9415: aload #153
        //   9417: ldc 'Times-Roman'
        //   9419: ldc 'Cp1257'
        //   9421: iconst_1
        //   9422: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9425: ldc 10.0
        //   9427: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9430: aload #153
        //   9432: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9435: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9438: aload #153
        //   9440: ldc 400.0
        //   9442: ldc_w 548.0
        //   9445: invokevirtual setTextMatrix : (FF)V
        //   9448: aload #153
        //   9450: aload #115
        //   9452: invokevirtual showText : (Ljava/lang/String;)V
        //   9455: aload #153
        //   9457: invokevirtual endText : ()V
        //   9460: aload #153
        //   9462: invokevirtual beginText : ()V
        //   9465: aload #153
        //   9467: ldc 'Times-Roman'
        //   9469: ldc 'Cp1257'
        //   9471: iconst_1
        //   9472: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9475: ldc 10.0
        //   9477: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9480: aload #153
        //   9482: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9485: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9488: aload #153
        //   9490: ldc 270.0
        //   9492: ldc_w 533.0
        //   9495: invokevirtual setTextMatrix : (FF)V
        //   9498: aload #153
        //   9500: aload #124
        //   9502: invokevirtual showText : (Ljava/lang/String;)V
        //   9505: aload #153
        //   9507: invokevirtual endText : ()V
        //   9510: aload #153
        //   9512: invokevirtual beginText : ()V
        //   9515: aload #153
        //   9517: ldc 'Times-Roman'
        //   9519: ldc 'Cp1257'
        //   9521: iconst_1
        //   9522: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9525: ldc 10.0
        //   9527: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9530: aload #153
        //   9532: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9535: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9538: aload #153
        //   9540: ldc 400.0
        //   9542: ldc_w 533.0
        //   9545: invokevirtual setTextMatrix : (FF)V
        //   9548: aload #153
        //   9550: aload #126
        //   9552: invokevirtual showText : (Ljava/lang/String;)V
        //   9555: aload #153
        //   9557: invokevirtual endText : ()V
        //   9560: aload #153
        //   9562: invokevirtual beginText : ()V
        //   9565: aload #153
        //   9567: ldc 'Times-Roman'
        //   9569: ldc 'Cp1257'
        //   9571: iconst_1
        //   9572: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9575: ldc 10.0
        //   9577: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9580: aload #153
        //   9582: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9585: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9588: aload #153
        //   9590: ldc 80.0
        //   9592: ldc_w 519.0
        //   9595: invokevirtual setTextMatrix : (FF)V
        //   9598: aload #153
        //   9600: aload #133
        //   9602: invokevirtual showText : (Ljava/lang/String;)V
        //   9605: aload #153
        //   9607: invokevirtual endText : ()V
        //   9610: aload #153
        //   9612: invokevirtual beginText : ()V
        //   9615: aload #153
        //   9617: ldc 'Times-Roman'
        //   9619: ldc 'Cp1257'
        //   9621: iconst_1
        //   9622: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   9625: ldc 10.0
        //   9627: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   9630: aload #153
        //   9632: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   9635: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   9638: aload #153
        //   9640: ldc 240.0
        //   9642: ldc 490.0
        //   9644: invokevirtual setTextMatrix : (FF)V
        //   9647: aload #153
        //   9649: aload #135
        //   9651: invokevirtual showText : (Ljava/lang/String;)V
        //   9654: aload #153
        //   9656: invokevirtual endText : ()V
        //   9659: iinc #152, 1
        //   9662: goto -> 5415
        //   9665: aload #148
        //   9667: invokevirtual close : ()V
        //   9670: new java/io/File
        //   9673: dup
        //   9674: aload #145
        //   9676: invokespecial <init> : (Ljava/lang/String;)V
        //   9679: astore #152
        //   9681: aload #5
        //   9683: ldc 'application/pdf'
        //   9685: invokeinterface setContentType : (Ljava/lang/String;)V
        //   9690: aload #5
        //   9692: ldc 'Content-Disposition'
        //   9694: new java/lang/StringBuilder
        //   9697: dup
        //   9698: invokespecial <init> : ()V
        //   9701: ldc 'inline; filename='
        //   9703: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9706: aload #23
        //   9708: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9711: aload #24
        //   9713: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9716: iload #138
        //   9718: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   9721: ldc '_'
        //   9723: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9726: aload #14
        //   9728: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9731: ldc '.pdf'
        //   9733: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9736: invokevirtual toString : ()Ljava/lang/String;
        //   9739: invokeinterface addHeader : (Ljava/lang/String;Ljava/lang/String;)V
        //   9744: aload #5
        //   9746: aload #152
        //   9748: invokevirtual length : ()J
        //   9751: l2i
        //   9752: invokeinterface setContentLength : (I)V
        //   9757: new java/io/FileInputStream
        //   9760: dup
        //   9761: aload #152
        //   9763: invokespecial <init> : (Ljava/io/File;)V
        //   9766: astore #153
        //   9768: aload #5
        //   9770: invokeinterface getOutputStream : ()Ljavax/servlet/ServletOutputStream;
        //   9775: astore #154
        //   9777: aload #153
        //   9779: invokevirtual read : ()I
        //   9782: dup
        //   9783: istore #155
        //   9785: iconst_m1
        //   9786: if_icmpeq -> 9799
        //   9789: aload #154
        //   9791: iload #155
        //   9793: invokevirtual write : (I)V
        //   9796: goto -> 9777
        //   9799: new java/io/File
        //   9802: dup
        //   9803: new java/lang/StringBuilder
        //   9806: dup
        //   9807: invokespecial <init> : ()V
        //   9810: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Prompt_Pay_Agreement_'
        //   9813: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9816: iload #8
        //   9818: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   9821: ldc '_'
        //   9823: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9826: aload #43
        //   9828: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9831: ldc '.pdf'
        //   9833: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9836: invokevirtual toString : ()Ljava/lang/String;
        //   9839: invokespecial <init> : (Ljava/lang/String;)V
        //   9842: astore #156
        //   9844: aload #156
        //   9846: invokevirtual delete : ()Z
        //   9849: pop
        //   9850: new java/io/File
        //   9853: dup
        //   9854: new java/lang/StringBuilder
        //   9857: dup
        //   9858: invokespecial <init> : ()V
        //   9861: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Medicaid_ABN_'
        //   9864: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9867: iload #8
        //   9869: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   9872: ldc '_'
        //   9874: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9877: aload #43
        //   9879: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9882: ldc '.pdf'
        //   9884: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9887: invokevirtual toString : ()Ljava/lang/String;
        //   9890: invokespecial <init> : (Ljava/lang/String;)V
        //   9893: astore #156
        //   9895: aload #156
        //   9897: invokevirtual delete : ()Z
        //   9900: pop
        //   9901: new java/io/File
        //   9904: dup
        //   9905: new java/lang/StringBuilder
        //   9908: dup
        //   9909: invokespecial <init> : ()V
        //   9912: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Medicare_ABN_'
        //   9915: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9918: iload #8
        //   9920: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   9923: ldc '_'
        //   9925: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9928: aload #43
        //   9930: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9933: ldc '.pdf'
        //   9935: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9938: invokevirtual toString : ()Ljava/lang/String;
        //   9941: invokespecial <init> : (Ljava/lang/String;)V
        //   9944: astore #156
        //   9946: aload #156
        //   9948: invokevirtual delete : ()Z
        //   9951: pop
        //   9952: new java/io/File
        //   9955: dup
        //   9956: new java/lang/StringBuilder
        //   9959: dup
        //   9960: invokespecial <init> : ()V
        //   9963: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ConchoPdfs/TempDir/Benefit_appeal_'
        //   9966: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9969: iload #8
        //   9971: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   9974: ldc '_'
        //   9976: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9979: aload #43
        //   9981: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9984: ldc '.pdf'
        //   9986: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9989: invokevirtual toString : ()Ljava/lang/String;
        //   9992: invokespecial <init> : (Ljava/lang/String;)V
        //   9995: astore #156
        //   9997: aload #156
        //   9999: invokevirtual delete : ()Z
        //   10002: pop
        //   10003: goto -> 10081
        //   10006: astore #139
        //   10008: aload_2
        //   10009: aload #139
        //   10011: invokevirtual getMessage : ()Ljava/lang/String;
        //   10014: invokevirtual println : (Ljava/lang/String;)V
        //   10017: ldc ''
        //   10019: astore #140
        //   10021: iconst_0
        //   10022: istore #141
        //   10024: iload #141
        //   10026: aload #139
        //   10028: invokevirtual getStackTrace : ()[Ljava/lang/StackTraceElement;
        //   10031: arraylength
        //   10032: if_icmpge -> 10075
        //   10035: new java/lang/StringBuilder
        //   10038: dup
        //   10039: invokespecial <init> : ()V
        //   10042: aload #140
        //   10044: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   10047: aload #139
        //   10049: invokevirtual getStackTrace : ()[Ljava/lang/StackTraceElement;
        //   10052: iload #141
        //   10054: aaload
        //   10055: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   10058: ldc_w '<br>'
        //   10061: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   10064: invokevirtual toString : ()Ljava/lang/String;
        //   10067: astore #140
        //   10069: iinc #141, 1
        //   10072: goto -> 10024
        //   10075: aload_2
        //   10076: aload #140
        //   10078: invokevirtual println : (Ljava/lang/String;)V
        //   10081: return
        // Line number table:
        //   Java source line number -> byte code offset
        //   #8377	-> 0
        //   #8378	-> 3
        //   #8379	-> 6
        //   #8380	-> 10
        //   #8381	-> 13
        //   #8382	-> 17
        //   #8383	-> 21
        //   #8384	-> 25
        //   #8385	-> 29
        //   #8386	-> 38
        //   #8387	-> 43
        //   #8388	-> 48
        //   #8389	-> 52
        //   #8390	-> 56
        //   #8391	-> 60
        //   #8392	-> 64
        //   #8393	-> 68
        //   #8394	-> 72
        //   #8395	-> 76
        //   #8396	-> 80
        //   #8397	-> 84
        //   #8398	-> 88
        //   #8399	-> 92
        //   #8400	-> 96
        //   #8401	-> 100
        //   #8402	-> 104
        //   #8403	-> 108
        //   #8404	-> 112
        //   #8405	-> 116
        //   #8406	-> 120
        //   #8407	-> 124
        //   #8408	-> 128
        //   #8409	-> 132
        //   #8410	-> 136
        //   #8411	-> 140
        //   #8412	-> 143
        //   #8413	-> 147
        //   #8414	-> 151
        //   #8415	-> 154
        //   #8416	-> 157
        //   #8417	-> 161
        //   #8418	-> 165
        //   #8419	-> 169
        //   #8420	-> 173
        //   #8421	-> 177
        //   #8422	-> 181
        //   #8423	-> 185
        //   #8424	-> 189
        //   #8425	-> 193
        //   #8426	-> 197
        //   #8427	-> 201
        //   #8428	-> 205
        //   #8429	-> 209
        //   #8430	-> 213
        //   #8431	-> 217
        //   #8432	-> 221
        //   #8433	-> 225
        //   #8434	-> 229
        //   #8435	-> 233
        //   #8436	-> 236
        //   #8437	-> 240
        //   #8438	-> 243
        //   #8439	-> 247
        //   #8440	-> 251
        //   #8441	-> 255
        //   #8442	-> 259
        //   #8443	-> 263
        //   #8444	-> 267
        //   #8445	-> 271
        //   #8446	-> 275
        //   #8447	-> 279
        //   #8448	-> 283
        //   #8449	-> 287
        //   #8450	-> 291
        //   #8451	-> 295
        //   #8452	-> 299
        //   #8453	-> 303
        //   #8454	-> 307
        //   #8455	-> 311
        //   #8456	-> 315
        //   #8457	-> 319
        //   #8458	-> 323
        //   #8459	-> 327
        //   #8460	-> 331
        //   #8461	-> 334
        //   #8462	-> 338
        //   #8463	-> 342
        //   #8464	-> 346
        //   #8465	-> 350
        //   #8466	-> 354
        //   #8467	-> 358
        //   #8468	-> 362
        //   #8469	-> 366
        //   #8470	-> 370
        //   #8471	-> 374
        //   #8472	-> 378
        //   #8473	-> 382
        //   #8474	-> 386
        //   #8475	-> 390
        //   #8476	-> 394
        //   #8477	-> 398
        //   #8478	-> 402
        //   #8479	-> 406
        //   #8480	-> 410
        //   #8481	-> 414
        //   #8482	-> 418
        //   #8483	-> 422
        //   #8484	-> 426
        //   #8485	-> 430
        //   #8486	-> 434
        //   #8487	-> 438
        //   #8488	-> 442
        //   #8489	-> 446
        //   #8490	-> 450
        //   #8491	-> 454
        //   #8492	-> 458
        //   #8493	-> 462
        //   #8494	-> 466
        //   #8495	-> 470
        //   #8496	-> 474
        //   #8497	-> 478
        //   #8498	-> 482
        //   #8499	-> 486
        //   #8500	-> 490
        //   #8501	-> 494
        //   #8502	-> 498
        //   #8503	-> 502
        //   #8504	-> 505
        //   #8505	-> 508
        //   #8507	-> 524
        //   #8508	-> 528
        //   #8509	-> 536
        //   #8510	-> 547
        //   #8511	-> 557
        //   #8512	-> 567
        //   #8513	-> 577
        //   #8515	-> 587
        //   #8516	-> 594
        //   #8518	-> 601
        //   #8519	-> 634
        //   #8520	-> 642
        //   #8521	-> 653
        //   #8522	-> 663
        //   #8523	-> 667
        //   #8524	-> 680
        //   #8525	-> 693
        //   #8526	-> 704
        //   #8527	-> 717
        //   #8528	-> 730
        //   #8529	-> 740
        //   #8530	-> 751
        //   #8531	-> 762
        //   #8532	-> 773
        //   #8533	-> 784
        //   #8534	-> 795
        //   #8535	-> 806
        //   #8536	-> 817
        //   #8537	-> 828
        //   #8538	-> 839
        //   #8539	-> 850
        //   #8540	-> 861
        //   #8541	-> 872
        //   #8542	-> 883
        //   #8543	-> 894
        //   #8544	-> 905
        //   #8545	-> 916
        //   #8546	-> 927
        //   #8547	-> 938
        //   #8549	-> 952
        //   #8550	-> 959
        //   #8551	-> 966
        //   #8552	-> 988
        //   #8553	-> 996
        //   #8554	-> 1007
        //   #8555	-> 1017
        //   #8557	-> 1027
        //   #8558	-> 1034
        //   #8559	-> 1041
        //   #8560	-> 1073
        //   #8561	-> 1081
        //   #8562	-> 1092
        //   #8563	-> 1102
        //   #8565	-> 1115
        //   #8566	-> 1122
        //   #8570	-> 1129
        //   #8567	-> 1132
        //   #8568	-> 1134
        //   #8569	-> 1161
        //   #8572	-> 1167
        //   #8573	-> 1201
        //   #8574	-> 1209
        //   #8575	-> 1220
        //   #8576	-> 1230
        //   #8577	-> 1240
        //   #8578	-> 1250
        //   #8579	-> 1260
        //   #8580	-> 1270
        //   #8581	-> 1280
        //   #8582	-> 1291
        //   #8583	-> 1302
        //   #8584	-> 1313
        //   #8585	-> 1324
        //   #8586	-> 1335
        //   #8587	-> 1346
        //   #8588	-> 1357
        //   #8589	-> 1368
        //   #8590	-> 1379
        //   #8591	-> 1390
        //   #8592	-> 1401
        //   #8593	-> 1412
        //   #8595	-> 1426
        //   #8596	-> 1433
        //   #8599	-> 1440
        //   #8597	-> 1443
        //   #8598	-> 1445
        //   #8600	-> 1473
        //   #8601	-> 1479
        //   #8602	-> 1511
        //   #8603	-> 1519
        //   #8604	-> 1530
        //   #8605	-> 1540
        //   #8606	-> 1550
        //   #8607	-> 1560
        //   #8608	-> 1565
        //   #8610	-> 1573
        //   #8612	-> 1577
        //   #8613	-> 1582
        //   #8615	-> 1590
        //   #8617	-> 1594
        //   #8618	-> 1604
        //   #8619	-> 1614
        //   #8620	-> 1624
        //   #8621	-> 1635
        //   #8622	-> 1646
        //   #8623	-> 1657
        //   #8624	-> 1668
        //   #8625	-> 1679
        //   #8626	-> 1690
        //   #8627	-> 1701
        //   #8628	-> 1712
        //   #8629	-> 1723
        //   #8630	-> 1734
        //   #8631	-> 1745
        //   #8632	-> 1756
        //   #8633	-> 1767
        //   #8634	-> 1778
        //   #8636	-> 1792
        //   #8637	-> 1799
        //   #8639	-> 1806
        //   #8640	-> 1816
        //   #8641	-> 1850
        //   #8642	-> 1858
        //   #8643	-> 1869
        //   #8644	-> 1879
        //   #8646	-> 1889
        //   #8647	-> 1896
        //   #8649	-> 1903
        //   #8650	-> 1935
        //   #8651	-> 1943
        //   #8652	-> 1954
        //   #8653	-> 1964
        //   #8654	-> 1974
        //   #8655	-> 1984
        //   #8656	-> 1994
        //   #8657	-> 2004
        //   #8658	-> 2014
        //   #8660	-> 2028
        //   #8661	-> 2035
        //   #8662	-> 2042
        //   #8663	-> 2074
        //   #8664	-> 2082
        //   #8665	-> 2093
        //   #8666	-> 2103
        //   #8667	-> 2114
        //   #8669	-> 2121
        //   #8671	-> 2125
        //   #8672	-> 2136
        //   #8674	-> 2143
        //   #8676	-> 2147
        //   #8677	-> 2158
        //   #8679	-> 2165
        //   #8681	-> 2169
        //   #8682	-> 2180
        //   #8684	-> 2187
        //   #8686	-> 2191
        //   #8687	-> 2202
        //   #8689	-> 2209
        //   #8691	-> 2213
        //   #8692	-> 2225
        //   #8694	-> 2232
        //   #8696	-> 2236
        //   #8697	-> 2248
        //   #8699	-> 2255
        //   #8701	-> 2259
        //   #8702	-> 2271
        //   #8704	-> 2278
        //   #8706	-> 2282
        //   #8707	-> 2294
        //   #8709	-> 2301
        //   #8711	-> 2305
        //   #8712	-> 2317
        //   #8713	-> 2321
        //   #8715	-> 2328
        //   #8716	-> 2332
        //   #8718	-> 2343
        //   #8719	-> 2355
        //   #8721	-> 2362
        //   #8723	-> 2366
        //   #8724	-> 2378
        //   #8725	-> 2382
        //   #8727	-> 2389
        //   #8728	-> 2393
        //   #8730	-> 2404
        //   #8731	-> 2416
        //   #8732	-> 2420
        //   #8734	-> 2427
        //   #8735	-> 2431
        //   #8737	-> 2442
        //   #8738	-> 2454
        //   #8739	-> 2458
        //   #8741	-> 2465
        //   #8742	-> 2469
        //   #8744	-> 2480
        //   #8745	-> 2492
        //   #8746	-> 2496
        //   #8748	-> 2503
        //   #8749	-> 2507
        //   #8751	-> 2518
        //   #8752	-> 2530
        //   #8753	-> 2534
        //   #8755	-> 2541
        //   #8756	-> 2545
        //   #8758	-> 2556
        //   #8759	-> 2582
        //   #8761	-> 2589
        //   #8763	-> 2600
        //   #8764	-> 2626
        //   #8766	-> 2633
        //   #8768	-> 2644
        //   #8769	-> 2670
        //   #8771	-> 2677
        //   #8774	-> 2691
        //   #8775	-> 2698
        //   #8776	-> 2705
        //   #8777	-> 2709
        //   #8778	-> 2713
        //   #8779	-> 2718
        //   #8780	-> 2756
        //   #8781	-> 2774
        //   #8782	-> 2785
        //   #8783	-> 2798
        //   #8784	-> 2811
        //   #8785	-> 2817
        //   #8786	-> 2826
        //   #8787	-> 2831
        //   #8788	-> 2846
        //   #8789	-> 2854
        //   #8790	-> 2864
        //   #8791	-> 2871
        //   #8792	-> 2876
        //   #8793	-> 2881
        //   #8794	-> 2896
        //   #8795	-> 2904
        //   #8796	-> 2914
        //   #8797	-> 2954
        //   #8783	-> 2959
        //   #8800	-> 2965
        //   #8801	-> 2970
        //   #8802	-> 2975
        //   #8803	-> 3013
        //   #8804	-> 3031
        //   #8805	-> 3042
        //   #8806	-> 3055
        //   #8807	-> 3068
        //   #8808	-> 3074
        //   #8809	-> 3083
        //   #8810	-> 3088
        //   #8811	-> 3103
        //   #8812	-> 3111
        //   #8813	-> 3120
        //   #8814	-> 3150
        //   #8815	-> 3155
        //   #8816	-> 3160
        //   #8817	-> 3175
        //   #8818	-> 3183
        //   #8819	-> 3192
        //   #8820	-> 3222
        //   #8821	-> 3227
        //   #8822	-> 3232
        //   #8823	-> 3247
        //   #8824	-> 3255
        //   #8825	-> 3264
        //   #8826	-> 3299
        //   #8827	-> 3304
        //   #8828	-> 3309
        //   #8829	-> 3324
        //   #8830	-> 3332
        //   #8831	-> 3342
        //   #8832	-> 3377
        //   #8833	-> 3382
        //   #8834	-> 3387
        //   #8835	-> 3402
        //   #8836	-> 3410
        //   #8837	-> 3420
        //   #8838	-> 3445
        //   #8839	-> 3450
        //   #8840	-> 3455
        //   #8841	-> 3470
        //   #8842	-> 3478
        //   #8843	-> 3487
        //   #8844	-> 3494
        //   #8845	-> 3499
        //   #8846	-> 3504
        //   #8847	-> 3519
        //   #8848	-> 3527
        //   #8849	-> 3536
        //   #8850	-> 3576
        //   #8806	-> 3581
        //   #8853	-> 3587
        //   #8854	-> 3592
        //   #8855	-> 3597
        //   #8856	-> 3635
        //   #8857	-> 3653
        //   #8858	-> 3664
        //   #8859	-> 3677
        //   #8860	-> 3690
        //   #8861	-> 3696
        //   #8862	-> 3705
        //   #8863	-> 3710
        //   #8864	-> 3725
        //   #8865	-> 3733
        //   #8866	-> 3742
        //   #8867	-> 3772
        //   #8868	-> 3777
        //   #8869	-> 3782
        //   #8870	-> 3797
        //   #8871	-> 3805
        //   #8872	-> 3814
        //   #8873	-> 3844
        //   #8874	-> 3849
        //   #8875	-> 3854
        //   #8876	-> 3869
        //   #8877	-> 3877
        //   #8878	-> 3886
        //   #8879	-> 3921
        //   #8880	-> 3926
        //   #8881	-> 3931
        //   #8882	-> 3946
        //   #8883	-> 3954
        //   #8884	-> 3964
        //   #8885	-> 3999
        //   #8886	-> 4004
        //   #8887	-> 4009
        //   #8888	-> 4024
        //   #8889	-> 4032
        //   #8890	-> 4042
        //   #8891	-> 4067
        //   #8892	-> 4072
        //   #8893	-> 4077
        //   #8894	-> 4092
        //   #8895	-> 4100
        //   #8896	-> 4109
        //   #8897	-> 4116
        //   #8898	-> 4121
        //   #8899	-> 4126
        //   #8900	-> 4141
        //   #8901	-> 4149
        //   #8902	-> 4158
        //   #8903	-> 4198
        //   #8859	-> 4203
        //   #8906	-> 4209
        //   #8907	-> 4214
        //   #8908	-> 4219
        //   #8909	-> 4257
        //   #8910	-> 4275
        //   #8911	-> 4286
        //   #8912	-> 4299
        //   #8913	-> 4312
        //   #8914	-> 4318
        //   #8915	-> 4327
        //   #8916	-> 4332
        //   #8917	-> 4347
        //   #8918	-> 4355
        //   #8919	-> 4364
        //   #8920	-> 4404
        //   #8921	-> 4409
        //   #8922	-> 4414
        //   #8923	-> 4429
        //   #8924	-> 4437
        //   #8925	-> 4446
        //   #8926	-> 4453
        //   #8927	-> 4458
        //   #8928	-> 4463
        //   #8929	-> 4478
        //   #8930	-> 4486
        //   #8931	-> 4496
        //   #8932	-> 4503
        //   #8933	-> 4508
        //   #8934	-> 4513
        //   #8935	-> 4528
        //   #8936	-> 4536
        //   #8937	-> 4546
        //   #8938	-> 4553
        //   #8939	-> 4558
        //   #8940	-> 4563
        //   #8941	-> 4578
        //   #8942	-> 4586
        //   #8943	-> 4596
        //   #8944	-> 4603
        //   #8945	-> 4608
        //   #8946	-> 4613
        //   #8947	-> 4628
        //   #8948	-> 4636
        //   #8949	-> 4645
        //   #8950	-> 4652
        //   #8951	-> 4657
        //   #8952	-> 4662
        //   #8953	-> 4677
        //   #8954	-> 4685
        //   #8955	-> 4694
        //   #8956	-> 4734
        //   #8957	-> 4739
        //   #8958	-> 4744
        //   #8959	-> 4759
        //   #8960	-> 4767
        //   #8961	-> 4777
        //   #8962	-> 4784
        //   #8912	-> 4789
        //   #8965	-> 4795
        //   #8966	-> 4800
        //   #8967	-> 4805
        //   #8968	-> 4860
        //   #8970	-> 4901
        //   #8971	-> 4906
        //   #8972	-> 4960
        //   #8973	-> 4998
        //   #8974	-> 5015
        //   #8975	-> 5069
        //   #8976	-> 5110
        //   #8977	-> 5127
        //   #8978	-> 5181
        //   #8980	-> 5222
        //   #8983	-> 5260
        //   #8984	-> 5264
        //   #8985	-> 5268
        //   #8986	-> 5325
        //   #8987	-> 5343
        //   #8988	-> 5354
        //   #8989	-> 5367
        //   #8990	-> 5376
        //   #8991	-> 5396
        //   #8992	-> 5403
        //   #8993	-> 5412
        //   #8994	-> 5425
        //   #8995	-> 5431
        //   #8996	-> 5440
        //   #8997	-> 5445
        //   #8998	-> 5460
        //   #8999	-> 5469
        //   #9000	-> 5476
        //   #9001	-> 5481
        //   #9002	-> 5486
        //   #9003	-> 5501
        //   #9004	-> 5509
        //   #9005	-> 5518
        //   #9006	-> 5525
        //   #9007	-> 5530
        //   #9008	-> 5535
        //   #9009	-> 5550
        //   #9010	-> 5559
        //   #9011	-> 5566
        //   #9012	-> 5571
        //   #9013	-> 5576
        //   #9014	-> 5591
        //   #9015	-> 5599
        //   #9016	-> 5608
        //   #9017	-> 5615
        //   #9018	-> 5620
        //   #9019	-> 5625
        //   #9020	-> 5640
        //   #9021	-> 5648
        //   #9022	-> 5657
        //   #9023	-> 5664
        //   #9024	-> 5669
        //   #9025	-> 5674
        //   #9026	-> 5689
        //   #9027	-> 5697
        //   #9028	-> 5706
        //   #9029	-> 5731
        //   #9030	-> 5736
        //   #9031	-> 5741
        //   #9032	-> 5756
        //   #9033	-> 5764
        //   #9034	-> 5773
        //   #9035	-> 5780
        //   #9036	-> 5785
        //   #9037	-> 5790
        //   #9038	-> 5805
        //   #9039	-> 5813
        //   #9040	-> 5822
        //   #9041	-> 5829
        //   #9042	-> 5834
        //   #9043	-> 5839
        //   #9044	-> 5854
        //   #9045	-> 5862
        //   #9046	-> 5872
        //   #9047	-> 5879
        //   #9048	-> 5884
        //   #9049	-> 5889
        //   #9050	-> 5904
        //   #9051	-> 5912
        //   #9052	-> 5922
        //   #9053	-> 5929
        //   #9054	-> 5934
        //   #9055	-> 5939
        //   #9056	-> 5954
        //   #9057	-> 5962
        //   #9058	-> 5973
        //   #9059	-> 5980
        //   #9060	-> 5985
        //   #9061	-> 5990
        //   #9062	-> 6005
        //   #9063	-> 6013
        //   #9064	-> 6023
        //   #9065	-> 6030
        //   #9066	-> 6035
        //   #9067	-> 6040
        //   #9068	-> 6055
        //   #9069	-> 6063
        //   #9070	-> 6074
        //   #9071	-> 6081
        //   #9072	-> 6086
        //   #9073	-> 6091
        //   #9074	-> 6106
        //   #9075	-> 6114
        //   #9076	-> 6124
        //   #9077	-> 6131
        //   #9078	-> 6136
        //   #9079	-> 6141
        //   #9080	-> 6156
        //   #9081	-> 6164
        //   #9082	-> 6175
        //   #9083	-> 6182
        //   #9084	-> 6187
        //   #9085	-> 6192
        //   #9086	-> 6207
        //   #9087	-> 6215
        //   #9088	-> 6225
        //   #9089	-> 6232
        //   #9090	-> 6237
        //   #9091	-> 6242
        //   #9092	-> 6257
        //   #9093	-> 6265
        //   #9094	-> 6275
        //   #9095	-> 6282
        //   #9096	-> 6287
        //   #9097	-> 6292
        //   #9098	-> 6307
        //   #9099	-> 6315
        //   #9100	-> 6324
        //   #9101	-> 6331
        //   #9102	-> 6336
        //   #9103	-> 6341
        //   #9104	-> 6356
        //   #9105	-> 6364
        //   #9106	-> 6374
        //   #9107	-> 6381
        //   #9108	-> 6386
        //   #9109	-> 6391
        //   #9110	-> 6406
        //   #9111	-> 6414
        //   #9112	-> 6424
        //   #9113	-> 6431
        //   #9114	-> 6436
        //   #9115	-> 6441
        //   #9116	-> 6456
        //   #9117	-> 6464
        //   #9118	-> 6473
        //   #9119	-> 6480
        //   #9120	-> 6485
        //   #9121	-> 6490
        //   #9122	-> 6505
        //   #9123	-> 6513
        //   #9124	-> 6522
        //   #9125	-> 6529
        //   #9126	-> 6534
        //   #9127	-> 6539
        //   #9128	-> 6554
        //   #9129	-> 6562
        //   #9130	-> 6572
        //   #9131	-> 6579
        //   #9132	-> 6584
        //   #9133	-> 6589
        //   #9134	-> 6604
        //   #9135	-> 6612
        //   #9136	-> 6621
        //   #9137	-> 6628
        //   #9138	-> 6633
        //   #9139	-> 6638
        //   #9140	-> 6653
        //   #9141	-> 6661
        //   #9142	-> 6670
        //   #9143	-> 6677
        //   #9144	-> 6682
        //   #9145	-> 6687
        //   #9146	-> 6702
        //   #9147	-> 6710
        //   #9148	-> 6719
        //   #9149	-> 6726
        //   #9150	-> 6731
        //   #9151	-> 6736
        //   #9152	-> 6751
        //   #9153	-> 6759
        //   #9154	-> 6768
        //   #9155	-> 6775
        //   #9156	-> 6780
        //   #9157	-> 6785
        //   #9158	-> 6800
        //   #9159	-> 6808
        //   #9160	-> 6817
        //   #9161	-> 6824
        //   #9162	-> 6829
        //   #9163	-> 6834
        //   #9164	-> 6849
        //   #9165	-> 6857
        //   #9166	-> 6866
        //   #9167	-> 6873
        //   #9168	-> 6878
        //   #9169	-> 6883
        //   #9170	-> 6898
        //   #9171	-> 6906
        //   #9172	-> 6915
        //   #9173	-> 6922
        //   #9174	-> 6927
        //   #9175	-> 6932
        //   #9176	-> 6947
        //   #9177	-> 6955
        //   #9178	-> 6964
        //   #9179	-> 6971
        //   #9180	-> 6976
        //   #9181	-> 6981
        //   #9182	-> 6996
        //   #9183	-> 7004
        //   #9184	-> 7014
        //   #9185	-> 7021
        //   #9186	-> 7026
        //   #9187	-> 7031
        //   #9188	-> 7046
        //   #9189	-> 7054
        //   #9190	-> 7064
        //   #9191	-> 7071
        //   #9192	-> 7076
        //   #9193	-> 7081
        //   #9194	-> 7096
        //   #9195	-> 7104
        //   #9196	-> 7114
        //   #9197	-> 7121
        //   #9198	-> 7126
        //   #9199	-> 7131
        //   #9200	-> 7146
        //   #9201	-> 7154
        //   #9202	-> 7164
        //   #9203	-> 7171
        //   #9204	-> 7176
        //   #9205	-> 7181
        //   #9206	-> 7196
        //   #9207	-> 7204
        //   #9208	-> 7214
        //   #9209	-> 7221
        //   #9210	-> 7226
        //   #9211	-> 7231
        //   #9212	-> 7246
        //   #9213	-> 7254
        //   #9214	-> 7264
        //   #9215	-> 7271
        //   #9216	-> 7276
        //   #9217	-> 7281
        //   #9218	-> 7296
        //   #9219	-> 7304
        //   #9220	-> 7314
        //   #9221	-> 7321
        //   #9222	-> 7326
        //   #9223	-> 7331
        //   #9224	-> 7346
        //   #9225	-> 7354
        //   #9226	-> 7364
        //   #9227	-> 7371
        //   #9228	-> 7376
        //   #9229	-> 7381
        //   #9230	-> 7396
        //   #9231	-> 7404
        //   #9232	-> 7414
        //   #9233	-> 7421
        //   #9234	-> 7426
        //   #9235	-> 7431
        //   #9236	-> 7446
        //   #9237	-> 7454
        //   #9238	-> 7464
        //   #9239	-> 7471
        //   #9240	-> 7476
        //   #9241	-> 7481
        //   #9242	-> 7496
        //   #9243	-> 7504
        //   #9244	-> 7514
        //   #9245	-> 7521
        //   #9246	-> 7526
        //   #9247	-> 7531
        //   #9248	-> 7546
        //   #9249	-> 7554
        //   #9250	-> 7564
        //   #9251	-> 7571
        //   #9252	-> 7576
        //   #9253	-> 7581
        //   #9254	-> 7596
        //   #9255	-> 7604
        //   #9256	-> 7614
        //   #9257	-> 7621
        //   #9258	-> 7626
        //   #9259	-> 7631
        //   #9260	-> 7646
        //   #9261	-> 7654
        //   #9262	-> 7664
        //   #9263	-> 7671
        //   #9264	-> 7676
        //   #9265	-> 7681
        //   #9266	-> 7696
        //   #9267	-> 7704
        //   #9268	-> 7714
        //   #9269	-> 7721
        //   #9270	-> 7726
        //   #9271	-> 7731
        //   #9272	-> 7746
        //   #9273	-> 7754
        //   #9274	-> 7764
        //   #9275	-> 7771
        //   #9276	-> 7776
        //   #9277	-> 7781
        //   #9278	-> 7796
        //   #9279	-> 7804
        //   #9280	-> 7814
        //   #9281	-> 7821
        //   #9282	-> 7826
        //   #9283	-> 7831
        //   #9284	-> 7846
        //   #9285	-> 7854
        //   #9286	-> 7863
        //   #9287	-> 7870
        //   #9289	-> 7875
        //   #9290	-> 7881
        //   #9291	-> 7890
        //   #9292	-> 7895
        //   #9293	-> 7910
        //   #9294	-> 7921
        //   #9295	-> 7928
        //   #9296	-> 7933
        //   #9297	-> 7938
        //   #9298	-> 7953
        //   #9299	-> 7964
        //   #9300	-> 7971
        //   #9301	-> 7976
        //   #9302	-> 7981
        //   #9303	-> 7996
        //   #9304	-> 8006
        //   #9305	-> 8046
        //   #9306	-> 8051
        //   #9307	-> 8056
        //   #9308	-> 8071
        //   #9309	-> 8081
        //   #9310	-> 8088
        //   #9311	-> 8093
        //   #9312	-> 8098
        //   #9313	-> 8113
        //   #9314	-> 8122
        //   #9315	-> 8129
        //   #9316	-> 8134
        //   #9317	-> 8139
        //   #9318	-> 8154
        //   #9319	-> 8163
        //   #9320	-> 8170
        //   #9321	-> 8175
        //   #9322	-> 8180
        //   #9323	-> 8195
        //   #9324	-> 8204
        //   #9325	-> 8211
        //   #9326	-> 8216
        //   #9327	-> 8221
        //   #9328	-> 8236
        //   #9329	-> 8245
        //   #9330	-> 8252
        //   #9331	-> 8257
        //   #9332	-> 8262
        //   #9333	-> 8277
        //   #9334	-> 8286
        //   #9335	-> 8293
        //   #9336	-> 8298
        //   #9337	-> 8303
        //   #9338	-> 8318
        //   #9339	-> 8327
        //   #9340	-> 8334
        //   #9341	-> 8339
        //   #9342	-> 8344
        //   #9343	-> 8359
        //   #9344	-> 8369
        //   #9345	-> 8376
        //   #9346	-> 8381
        //   #9347	-> 8386
        //   #9348	-> 8401
        //   #9349	-> 8411
        //   #9350	-> 8418
        //   #9352	-> 8423
        //   #9353	-> 8429
        //   #9354	-> 8438
        //   #9355	-> 8443
        //   #9356	-> 8458
        //   #9357	-> 8468
        //   #9358	-> 8508
        //   #9359	-> 8513
        //   #9360	-> 8518
        //   #9361	-> 8533
        //   #9362	-> 8543
        //   #9363	-> 8550
        //   #9365	-> 8555
        //   #9366	-> 8561
        //   #9367	-> 8570
        //   #9368	-> 8575
        //   #9369	-> 8590
        //   #9370	-> 8598
        //   #9371	-> 8608
        //   #9372	-> 8615
        //   #9373	-> 8620
        //   #9374	-> 8625
        //   #9375	-> 8640
        //   #9376	-> 8648
        //   #9377	-> 8658
        //   #9378	-> 8665
        //   #9380	-> 8670
        //   #9381	-> 8676
        //   #9382	-> 8685
        //   #9383	-> 8690
        //   #9384	-> 8705
        //   #9385	-> 8713
        //   #9386	-> 8723
        //   #9387	-> 8763
        //   #9388	-> 8768
        //   #9389	-> 8773
        //   #9390	-> 8788
        //   #9391	-> 8796
        //   #9392	-> 8805
        //   #9393	-> 8812
        //   #9394	-> 8817
        //   #9395	-> 8822
        //   #9396	-> 8837
        //   #9397	-> 8845
        //   #9398	-> 8854
        //   #9399	-> 8861
        //   #9401	-> 8866
        //   #9402	-> 8873
        //   #9403	-> 8882
        //   #9404	-> 8887
        //   #9405	-> 8902
        //   #9406	-> 8910
        //   #9407	-> 8920
        //   #9408	-> 8927
        //   #9410	-> 8932
        //   #9411	-> 8939
        //   #9412	-> 8948
        //   #9413	-> 8953
        //   #9414	-> 8968
        //   #9415	-> 8976
        //   #9416	-> 8986
        //   #9417	-> 9026
        //   #9418	-> 9031
        //   #9419	-> 9036
        //   #9420	-> 9051
        //   #9421	-> 9059
        //   #9422	-> 9068
        //   #9423	-> 9075
        //   #9425	-> 9080
        //   #9426	-> 9087
        //   #9427	-> 9096
        //   #9428	-> 9101
        //   #9429	-> 9116
        //   #9430	-> 9124
        //   #9431	-> 9133
        //   #9432	-> 9140
        //   #9434	-> 9145
        //   #9435	-> 9152
        //   #9436	-> 9161
        //   #9437	-> 9166
        //   #9438	-> 9181
        //   #9439	-> 9189
        //   #9440	-> 9198
        //   #9441	-> 9205
        //   #9442	-> 9210
        //   #9443	-> 9215
        //   #9444	-> 9230
        //   #9445	-> 9238
        //   #9446	-> 9248
        //   #9447	-> 9255
        //   #9448	-> 9260
        //   #9449	-> 9265
        //   #9450	-> 9280
        //   #9451	-> 9288
        //   #9452	-> 9298
        //   #9453	-> 9305
        //   #9454	-> 9310
        //   #9455	-> 9315
        //   #9456	-> 9330
        //   #9457	-> 9338
        //   #9458	-> 9348
        //   #9459	-> 9355
        //   #9460	-> 9360
        //   #9461	-> 9365
        //   #9462	-> 9380
        //   #9463	-> 9388
        //   #9464	-> 9398
        //   #9465	-> 9405
        //   #9466	-> 9410
        //   #9467	-> 9415
        //   #9468	-> 9430
        //   #9469	-> 9438
        //   #9470	-> 9448
        //   #9471	-> 9455
        //   #9472	-> 9460
        //   #9473	-> 9465
        //   #9474	-> 9480
        //   #9475	-> 9488
        //   #9476	-> 9498
        //   #9477	-> 9505
        //   #9478	-> 9510
        //   #9479	-> 9515
        //   #9480	-> 9530
        //   #9481	-> 9538
        //   #9482	-> 9548
        //   #9483	-> 9555
        //   #9484	-> 9560
        //   #9485	-> 9565
        //   #9486	-> 9580
        //   #9487	-> 9588
        //   #9488	-> 9598
        //   #9489	-> 9605
        //   #9490	-> 9610
        //   #9491	-> 9615
        //   #9492	-> 9630
        //   #9493	-> 9638
        //   #9494	-> 9647
        //   #9495	-> 9654
        //   #8993	-> 9659
        //   #9498	-> 9665
        //   #9499	-> 9670
        //   #9500	-> 9681
        //   #9501	-> 9690
        //   #9502	-> 9744
        //   #9503	-> 9757
        //   #9504	-> 9768
        //   #9506	-> 9777
        //   #9507	-> 9789
        //   #9509	-> 9799
        //   #9510	-> 9844
        //   #9511	-> 9850
        //   #9512	-> 9895
        //   #9513	-> 9901
        //   #9514	-> 9946
        //   #9515	-> 9952
        //   #9516	-> 9997
        //   #9524	-> 10003
        //   #9517	-> 10006
        //   #9518	-> 10008
        //   #9519	-> 10017
        //   #9520	-> 10021
        //   #9521	-> 10035
        //   #9520	-> 10069
        //   #9523	-> 10075
        //   #9525	-> 10081
        // Local variable table:
        //   start	length	slot	name	descriptor
        //   1134	33	139	e	Ljava/lang/Exception;
        //   1445	28	139	e	Ljava/lang/Exception;
        //   2826	133	145	pdfContentByte	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   2801	164	144	i	I
        //   3083	498	145	pdfContentByte	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   3058	529	144	i	I
        //   3705	498	145	pdfContentByte	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   3680	529	144	i	I
        //   4327	462	145	pdfContentByte	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   4302	493	144	i	I
        //   5440	2435	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7890	533	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8438	117	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8570	100	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8685	181	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8882	50	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8948	132	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   9096	49	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   9161	498	153	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   5415	4250	152	j	I
        //   2709	7294	139	inputFilePathTmp	Ljava/lang/String;
        //   2713	7290	140	outputFilePathTmp	Ljava/lang/String;
        //   2774	7229	141	fos1	Ljava/io/OutputStream;
        //   2785	7218	142	pdfReader1	Lcom/itextpdf/text/pdf/PdfReader;
        //   2798	7205	143	pdfStamper1	Lcom/itextpdf/text/pdf/PdfStamper;
        //   5264	4739	144	inputFilePath	Ljava/lang/String;
        //   5325	4678	145	outputFilePath	Ljava/lang/String;
        //   5343	4660	146	fos2	Ljava/io/OutputStream;
        //   5354	4649	147	pdfReader2	Lcom/itextpdf/text/pdf/PdfReader;
        //   5367	4636	148	pdfStamper2	Lcom/itextpdf/text/pdf/PdfStamper;
        //   5376	4627	149	barCode	Lmd/GenerateBarCode;
        //   5396	4607	150	BarCodeFilePath	Ljava/lang/String;
        //   5403	4600	151	image	Lcom/itextpdf/text/Image;
        //   9681	322	152	pdfFile	Ljava/io/File;
        //   9768	235	153	fileInputStream	Ljava/io/FileInputStream;
        //   9777	226	154	responseOutputStream	Ljava/io/OutputStream;
        //   9785	218	155	bytes	I
        //   9844	159	156	File	Ljava/io/File;
        //   10024	51	141	k	I
        //   10021	60	140	str	Ljava/lang/String;
        //   10008	73	139	e	Ljava/lang/Exception;
        //   0	10082	0	this	Lmd/DownloadBundle;
        //   0	10082	1	request	Ljavax/servlet/http/HttpServletRequest;
        //   0	10082	2	out	Ljava/io/PrintWriter;
        //   0	10082	3	conn	Ljava/sql/Connection;
        //   0	10082	4	servletContext	Ljavax/servlet/ServletContext;
        //   0	10082	5	response	Ljavax/servlet/http/HttpServletResponse;
        //   0	10082	6	UserId	Ljava/lang/String;
        //   0	10082	7	Database	Ljava/lang/String;
        //   0	10082	8	ClientId	I
        //   0	10082	9	DirectoryName	Ljava/lang/String;
        //   3	10079	10	stmt	Ljava/sql/Statement;
        //   6	10076	11	rset	Ljava/sql/ResultSet;
        //   10	10072	12	Query	Ljava/lang/String;
        //   13	10069	13	PatientRegId	I
        //   17	10065	14	DateTime	Ljava/lang/String;
        //   21	10061	15	Date	Ljava/lang/String;
        //   25	10057	16	Time	Ljava/lang/String;
        //   29	10053	17	ResultPdf	Ljava/lang/String;
        //   38	10044	18	mergePdf	Lmd/MergePdf;
        //   43	10039	19	Path1	Ljava/lang/String;
        //   48	10034	20	Path2	Ljava/lang/String;
        //   52	10030	21	Title	Ljava/lang/String;
        //   56	10026	22	FirstName	Ljava/lang/String;
        //   60	10022	23	FirstNameNoSpaces	Ljava/lang/String;
        //   64	10018	24	LastName	Ljava/lang/String;
        //   68	10014	25	MiddleInitial	Ljava/lang/String;
        //   72	10010	26	MaritalStatus	Ljava/lang/String;
        //   76	10006	27	DOB	Ljava/lang/String;
        //   80	10002	28	Age	Ljava/lang/String;
        //   84	9998	29	gender	Ljava/lang/String;
        //   88	9994	30	Email	Ljava/lang/String;
        //   92	9990	31	PhNumber	Ljava/lang/String;
        //   96	9986	32	Address	Ljava/lang/String;
        //   100	9982	33	CityStateZip	Ljava/lang/String;
        //   104	9978	34	State	Ljava/lang/String;
        //   108	9974	35	Country	Ljava/lang/String;
        //   112	9970	36	ZipCode	Ljava/lang/String;
        //   116	9966	37	SSN	Ljava/lang/String;
        //   120	9962	38	Occupation	Ljava/lang/String;
        //   124	9958	39	Employer	Ljava/lang/String;
        //   128	9954	40	EmpContact	Ljava/lang/String;
        //   132	9950	41	PriCarePhy	Ljava/lang/String;
        //   136	9946	42	ReasonVisit	Ljava/lang/String;
        //   140	9942	43	MRN	Ljava/lang/String;
        //   143	9939	44	ClientIndex	I
        //   147	9935	45	ClientName	Ljava/lang/String;
        //   151	9931	46	DOS	Ljava/lang/String;
        //   154	9928	47	DoctorId	Ljava/lang/String;
        //   157	9925	48	DoctorName	Ljava/lang/String;
        //   161	9921	49	Ethnicity	Ljava/lang/String;
        //   165	9917	50	Race	Ljava/lang/String;
        //   169	9913	51	TravellingChk	Ljava/lang/String;
        //   173	9909	52	TravelWhen	Ljava/lang/String;
        //   177	9905	53	TravelWhere	Ljava/lang/String;
        //   181	9901	54	TravelHowLong	Ljava/lang/String;
        //   185	9897	55	COVIDExposedChk	Ljava/lang/String;
        //   189	9893	56	SympFever	Ljava/lang/String;
        //   193	9889	57	SympBodyAches	Ljava/lang/String;
        //   197	9885	58	SympSoreThroat	Ljava/lang/String;
        //   201	9881	59	SympFatigue	Ljava/lang/String;
        //   205	9877	60	SympRash	Ljava/lang/String;
        //   209	9873	61	SympVomiting	Ljava/lang/String;
        //   213	9869	62	SympDiarrhea	Ljava/lang/String;
        //   217	9865	63	SympCough	Ljava/lang/String;
        //   221	9861	64	SympRunnyNose	Ljava/lang/String;
        //   225	9857	65	SympNausea	Ljava/lang/String;
        //   229	9853	66	SympFluSymptoms	Ljava/lang/String;
        //   233	9849	67	SympEyeConjunctivitis	Ljava/lang/String;
        //   236	9846	68	WorkersCompPolicy	I
        //   240	9842	69	WorkersCompPolicyString	Ljava/lang/String;
        //   243	9839	70	MotorVehAccident	I
        //   247	9835	71	MotorVehAccidentString	Ljava/lang/String;
        //   251	9831	72	PriInsurance	Ljava/lang/String;
        //   255	9827	73	MemId	Ljava/lang/String;
        //   259	9823	74	GrpNumber	Ljava/lang/String;
        //   263	9819	75	PriInsuranceName	Ljava/lang/String;
        //   267	9815	76	AddressIfDifferent	Ljava/lang/String;
        //   271	9811	77	PrimaryDOB	Ljava/lang/String;
        //   275	9807	78	PrimarySSN	Ljava/lang/String;
        //   279	9803	79	PatientRelationtoPrimary	Ljava/lang/String;
        //   283	9799	80	PrimaryOccupation	Ljava/lang/String;
        //   287	9795	81	PrimaryEmployer	Ljava/lang/String;
        //   291	9791	82	EmployerAddress	Ljava/lang/String;
        //   295	9787	83	EmployerPhone	Ljava/lang/String;
        //   299	9783	84	SecondryInsurance	Ljava/lang/String;
        //   303	9779	85	SubscriberName	Ljava/lang/String;
        //   307	9775	86	SubscriberDOB	Ljava/lang/String;
        //   311	9771	87	MemberID_2	Ljava/lang/String;
        //   315	9767	88	GroupNumber_2	Ljava/lang/String;
        //   319	9763	89	PatientRelationshiptoSecondry	Ljava/lang/String;
        //   323	9759	90	NextofKinName	Ljava/lang/String;
        //   327	9755	91	RelationToPatientER	Ljava/lang/String;
        //   331	9751	92	PhoneNumberER	Ljava/lang/String;
        //   334	9748	93	LeaveMessageER	I
        //   338	9744	94	AddressER	Ljava/lang/String;
        //   342	9740	95	CityER	Ljava/lang/String;
        //   346	9736	96	StateER	Ljava/lang/String;
        //   350	9732	97	LeaveMessageERString	Ljava/lang/String;
        //   354	9728	98	CityStateZipER	Ljava/lang/String;
        //   358	9724	99	CountryER	Ljava/lang/String;
        //   362	9720	100	ZipCodeER	Ljava/lang/String;
        //   366	9716	101	DateConcent	Ljava/lang/String;
        //   370	9712	102	WitnessConcent	Ljava/lang/String;
        //   374	9708	103	PatientBehalfConcent	Ljava/lang/String;
        //   378	9704	104	RelativeSignConcent	Ljava/lang/String;
        //   382	9700	105	DateConcent2	Ljava/lang/String;
        //   386	9696	106	WitnessConcent2	Ljava/lang/String;
        //   390	9692	107	PatientSignConcent	Ljava/lang/String;
        //   394	9688	108	ReturnPatient	Ljava/lang/String;
        //   398	9684	109	Google	Ljava/lang/String;
        //   402	9680	110	MapSearch	Ljava/lang/String;
        //   406	9676	111	Billboard	Ljava/lang/String;
        //   410	9672	112	OnlineReview	Ljava/lang/String;
        //   414	9668	113	TV	Ljava/lang/String;
        //   418	9664	114	Website	Ljava/lang/String;
        //   422	9660	115	BuildingSignDriveBy	Ljava/lang/String;
        //   426	9656	116	Facebook	Ljava/lang/String;
        //   430	9652	117	School	Ljava/lang/String;
        //   434	9648	118	School_text	Ljava/lang/String;
        //   438	9644	119	Twitter	Ljava/lang/String;
        //   442	9640	120	Magazine	Ljava/lang/String;
        //   446	9636	121	Magazine_text	Ljava/lang/String;
        //   450	9632	122	Newspaper	Ljava/lang/String;
        //   454	9628	123	Newspaper_text	Ljava/lang/String;
        //   458	9624	124	FamilyFriend	Ljava/lang/String;
        //   462	9620	125	FamilyFriend_text	Ljava/lang/String;
        //   466	9616	126	UrgentCare	Ljava/lang/String;
        //   470	9612	127	UrgentCare_text	Ljava/lang/String;
        //   474	9608	128	CommunityEvent	Ljava/lang/String;
        //   478	9604	129	CommunityEvent_text	Ljava/lang/String;
        //   482	9600	130	Work	Ljava/lang/String;
        //   486	9596	131	Work_text	Ljava/lang/String;
        //   490	9592	132	Physician	Ljava/lang/String;
        //   494	9588	133	Physician_text	Ljava/lang/String;
        //   498	9584	134	Other	Ljava/lang/String;
        //   502	9580	135	Other_text	Ljava/lang/String;
        //   505	9577	136	SelfPayChk	I
        //   508	9574	137	VerifyChkBox	I
        //   524	9558	138	ID	I
        // Exception table:
        //   from	to	target	type
        //   524	10003	10006	java/lang/Exception
        //   601	1129	1132	java/lang/Exception
        //   1167	1440	1443	java/lang/Exception
    }

    void GETINPUTLongView(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        // Byte code:
        //   0: aconst_null
        //   1: astore #10
        //   3: aconst_null
        //   4: astore #11
        //   6: ldc ''
        //   8: astore #12
        //   10: iconst_0
        //   11: istore #13
        //   13: ldc ''
        //   15: astore #14
        //   17: ldc ''
        //   19: astore #15
        //   21: ldc ''
        //   23: astore #16
        //   25: ldc ''
        //   27: astore #17
        //   29: new md/MergePdf
        //   32: dup
        //   33: invokespecial <init> : ()V
        //   36: astore #18
        //   38: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/'
        //   41: astore #19
        //   43: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/'
        //   46: astore #20
        //   48: ldc ''
        //   50: astore #21
        //   52: ldc ''
        //   54: astore #22
        //   56: ldc ''
        //   58: astore #23
        //   60: ldc ''
        //   62: astore #24
        //   64: ldc ''
        //   66: astore #25
        //   68: ldc ''
        //   70: astore #26
        //   72: ldc ''
        //   74: astore #27
        //   76: ldc ''
        //   78: astore #28
        //   80: ldc ''
        //   82: astore #29
        //   84: ldc ''
        //   86: astore #30
        //   88: ldc ''
        //   90: astore #31
        //   92: ldc ''
        //   94: astore #32
        //   96: ldc ''
        //   98: astore #33
        //   100: ldc ''
        //   102: astore #34
        //   104: ldc ''
        //   106: astore #35
        //   108: ldc ''
        //   110: astore #36
        //   112: ldc ''
        //   114: astore #37
        //   116: ldc ''
        //   118: astore #38
        //   120: ldc ''
        //   122: astore #39
        //   124: ldc ''
        //   126: astore #40
        //   128: ldc ''
        //   130: astore #41
        //   132: ldc ''
        //   134: astore #42
        //   136: ldc ''
        //   138: astore #43
        //   140: iconst_0
        //   141: istore #44
        //   143: ldc ''
        //   145: astore #45
        //   147: ldc ''
        //   149: astore #46
        //   151: aconst_null
        //   152: astore #47
        //   154: aconst_null
        //   155: astore #48
        //   157: ldc ''
        //   159: astore #49
        //   161: ldc ''
        //   163: astore #50
        //   165: ldc ''
        //   167: astore #51
        //   169: ldc ''
        //   171: astore #52
        //   173: ldc ''
        //   175: astore #53
        //   177: ldc ''
        //   179: astore #54
        //   181: ldc ''
        //   183: astore #55
        //   185: ldc ''
        //   187: astore #56
        //   189: ldc ''
        //   191: astore #57
        //   193: ldc ''
        //   195: astore #58
        //   197: ldc ''
        //   199: astore #59
        //   201: ldc ''
        //   203: astore #60
        //   205: ldc ''
        //   207: astore #61
        //   209: ldc ''
        //   211: astore #62
        //   213: ldc ''
        //   215: astore #63
        //   217: ldc ''
        //   219: astore #64
        //   221: ldc ''
        //   223: astore #65
        //   225: ldc ''
        //   227: astore #66
        //   229: ldc ''
        //   231: astore #67
        //   233: iconst_0
        //   234: istore #68
        //   236: ldc 'Is this a workercomp policy: YES/NO'
        //   238: astore #69
        //   240: iconst_0
        //   241: istore #70
        //   243: ldc 'Is this a Motor Vehicle Accident : YES/NO'
        //   245: astore #71
        //   247: ldc ''
        //   249: astore #72
        //   251: ldc ''
        //   253: astore #73
        //   255: ldc ''
        //   257: astore #74
        //   259: ldc ''
        //   261: astore #75
        //   263: ldc ''
        //   265: astore #76
        //   267: ldc ''
        //   269: astore #77
        //   271: ldc ''
        //   273: astore #78
        //   275: ldc ''
        //   277: astore #79
        //   279: ldc ''
        //   281: astore #80
        //   283: ldc ''
        //   285: astore #81
        //   287: ldc ''
        //   289: astore #82
        //   291: ldc ''
        //   293: astore #83
        //   295: ldc ''
        //   297: astore #84
        //   299: ldc ''
        //   301: astore #85
        //   303: ldc ''
        //   305: astore #86
        //   307: ldc ''
        //   309: astore #87
        //   311: ldc ''
        //   313: astore #88
        //   315: ldc ''
        //   317: astore #89
        //   319: ldc ''
        //   321: astore #90
        //   323: ldc ''
        //   325: astore #91
        //   327: ldc ''
        //   329: astore #92
        //   331: iconst_0
        //   332: istore #93
        //   334: ldc ''
        //   336: astore #94
        //   338: ldc ''
        //   340: astore #95
        //   342: ldc ''
        //   344: astore #96
        //   346: ldc ''
        //   348: astore #97
        //   350: ldc ''
        //   352: astore #98
        //   354: ldc ''
        //   356: astore #99
        //   358: ldc ''
        //   360: astore #100
        //   362: ldc ''
        //   364: astore #101
        //   366: ldc ''
        //   368: astore #102
        //   370: ldc ''
        //   372: astore #103
        //   374: ldc ''
        //   376: astore #104
        //   378: ldc ''
        //   380: astore #105
        //   382: ldc ''
        //   384: astore #106
        //   386: ldc ''
        //   388: astore #107
        //   390: ldc ''
        //   392: astore #108
        //   394: ldc ''
        //   396: astore #109
        //   398: ldc ''
        //   400: astore #110
        //   402: ldc ''
        //   404: astore #111
        //   406: ldc ''
        //   408: astore #112
        //   410: ldc ''
        //   412: astore #113
        //   414: ldc ''
        //   416: astore #114
        //   418: ldc ''
        //   420: astore #115
        //   422: ldc ''
        //   424: astore #116
        //   426: ldc ''
        //   428: astore #117
        //   430: ldc ''
        //   432: astore #118
        //   434: ldc ''
        //   436: astore #119
        //   438: ldc ''
        //   440: astore #120
        //   442: ldc ''
        //   444: astore #121
        //   446: ldc ''
        //   448: astore #122
        //   450: ldc ''
        //   452: astore #123
        //   454: ldc ''
        //   456: astore #124
        //   458: ldc ''
        //   460: astore #125
        //   462: ldc ''
        //   464: astore #126
        //   466: ldc ''
        //   468: astore #127
        //   470: ldc ''
        //   472: astore #128
        //   474: ldc ''
        //   476: astore #129
        //   478: ldc ''
        //   480: astore #130
        //   482: ldc ''
        //   484: astore #131
        //   486: ldc ''
        //   488: astore #132
        //   490: ldc ''
        //   492: astore #133
        //   494: ldc ''
        //   496: astore #134
        //   498: ldc ''
        //   500: astore #135
        //   502: iconst_0
        //   503: istore #136
        //   505: iconst_0
        //   506: istore #137
        //   508: aload_1
        //   509: ldc 'ID'
        //   511: invokeinterface getParameter : (Ljava/lang/String;)Ljava/lang/String;
        //   516: invokevirtual trim : ()Ljava/lang/String;
        //   519: invokestatic parseInt : (Ljava/lang/String;)I
        //   522: istore #138
        //   524: ldc 'select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')'
        //   526: astore #12
        //   528: aload_3
        //   529: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   534: astore #10
        //   536: aload #10
        //   538: aload #12
        //   540: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   545: astore #11
        //   547: aload #11
        //   549: invokeinterface next : ()Z
        //   554: ifeq -> 587
        //   557: aload #11
        //   559: iconst_1
        //   560: invokeinterface getString : (I)Ljava/lang/String;
        //   565: astore #14
        //   567: aload #11
        //   569: iconst_2
        //   570: invokeinterface getString : (I)Ljava/lang/String;
        //   575: astore #15
        //   577: aload #11
        //   579: iconst_3
        //   580: invokeinterface getString : (I)Ljava/lang/String;
        //   585: astore #16
        //   587: aload #11
        //   589: invokeinterface close : ()V
        //   594: aload #10
        //   596: invokeinterface close : ()V
        //   601: new java/lang/StringBuilder
        //   604: dup
        //   605: invokespecial <init> : ()V
        //   608: ldc_w ' Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-'),  CASE WHEN Ethnicity = 1 THEN 'Hispanic or Latino' WHEN Ethnicity = 2 THEN ' Non Hispanic or Latino' WHEN Ethnicity = 3 THEN 'Others' ELSE 'Others' END  From '
        //   611: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   614: aload #7
        //   616: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   619: ldc '.PatientReg Where ID = '
        //   621: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   624: iload #138
        //   626: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   629: invokevirtual toString : ()Ljava/lang/String;
        //   632: astore #12
        //   634: aload_3
        //   635: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   640: astore #10
        //   642: aload #10
        //   644: aload #12
        //   646: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   651: astore #11
        //   653: aload #11
        //   655: invokeinterface next : ()Z
        //   660: ifeq -> 952
        //   663: iload #138
        //   665: istore #13
        //   667: aload #11
        //   669: iconst_1
        //   670: invokeinterface getString : (I)Ljava/lang/String;
        //   675: invokevirtual trim : ()Ljava/lang/String;
        //   678: astore #24
        //   680: aload #11
        //   682: iconst_2
        //   683: invokeinterface getString : (I)Ljava/lang/String;
        //   688: invokevirtual trim : ()Ljava/lang/String;
        //   691: astore #22
        //   693: aload #22
        //   695: ldc '\s+'
        //   697: ldc ''
        //   699: invokevirtual replaceAll : (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        //   702: astore #23
        //   704: aload #11
        //   706: iconst_3
        //   707: invokeinterface getString : (I)Ljava/lang/String;
        //   712: invokevirtual trim : ()Ljava/lang/String;
        //   715: astore #25
        //   717: aload #11
        //   719: iconst_4
        //   720: invokeinterface getString : (I)Ljava/lang/String;
        //   725: invokevirtual trim : ()Ljava/lang/String;
        //   728: astore #21
        //   730: aload #11
        //   732: iconst_5
        //   733: invokeinterface getString : (I)Ljava/lang/String;
        //   738: astore #26
        //   740: aload #11
        //   742: bipush #6
        //   744: invokeinterface getString : (I)Ljava/lang/String;
        //   749: astore #27
        //   751: aload #11
        //   753: bipush #7
        //   755: invokeinterface getString : (I)Ljava/lang/String;
        //   760: astore #28
        //   762: aload #11
        //   764: bipush #8
        //   766: invokeinterface getString : (I)Ljava/lang/String;
        //   771: astore #29
        //   773: aload #11
        //   775: bipush #9
        //   777: invokeinterface getString : (I)Ljava/lang/String;
        //   782: astore #32
        //   784: aload #11
        //   786: bipush #10
        //   788: invokeinterface getString : (I)Ljava/lang/String;
        //   793: astore #33
        //   795: aload #11
        //   797: bipush #11
        //   799: invokeinterface getString : (I)Ljava/lang/String;
        //   804: astore #31
        //   806: aload #11
        //   808: bipush #12
        //   810: invokeinterface getString : (I)Ljava/lang/String;
        //   815: astore #37
        //   817: aload #11
        //   819: bipush #13
        //   821: invokeinterface getString : (I)Ljava/lang/String;
        //   826: astore #38
        //   828: aload #11
        //   830: bipush #14
        //   832: invokeinterface getString : (I)Ljava/lang/String;
        //   837: astore #39
        //   839: aload #11
        //   841: bipush #15
        //   843: invokeinterface getString : (I)Ljava/lang/String;
        //   848: astore #40
        //   850: aload #11
        //   852: bipush #16
        //   854: invokeinterface getString : (I)Ljava/lang/String;
        //   859: astore #41
        //   861: aload #11
        //   863: bipush #17
        //   865: invokeinterface getString : (I)Ljava/lang/String;
        //   870: astore #30
        //   872: aload #11
        //   874: bipush #18
        //   876: invokeinterface getString : (I)Ljava/lang/String;
        //   881: astore #42
        //   883: aload #11
        //   885: bipush #19
        //   887: invokeinterface getInt : (I)I
        //   892: istore #136
        //   894: aload #11
        //   896: bipush #20
        //   898: invokeinterface getString : (I)Ljava/lang/String;
        //   903: astore #43
        //   905: aload #11
        //   907: bipush #21
        //   909: invokeinterface getInt : (I)I
        //   914: istore #44
        //   916: aload #11
        //   918: bipush #22
        //   920: invokeinterface getString : (I)Ljava/lang/String;
        //   925: astore #46
        //   927: aload #11
        //   929: bipush #23
        //   931: invokeinterface getString : (I)Ljava/lang/String;
        //   936: astore #47
        //   938: aload #11
        //   940: bipush #24
        //   942: invokeinterface getString : (I)Ljava/lang/String;
        //   947: astore #49
        //   949: goto -> 653
        //   952: aload #11
        //   954: invokeinterface close : ()V
        //   959: aload #10
        //   961: invokeinterface close : ()V
        //   966: new java/lang/StringBuilder
        //   969: dup
        //   970: invokespecial <init> : ()V
        //   973: ldc 'Select name from oe.clients where Id = '
        //   975: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   978: iload #8
        //   980: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   983: invokevirtual toString : ()Ljava/lang/String;
        //   986: astore #12
        //   988: aload_3
        //   989: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   994: astore #10
        //   996: aload #10
        //   998: aload #12
        //   1000: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1005: astore #11
        //   1007: aload #11
        //   1009: invokeinterface next : ()Z
        //   1014: ifeq -> 1027
        //   1017: aload #11
        //   1019: iconst_1
        //   1020: invokeinterface getString : (I)Ljava/lang/String;
        //   1025: astore #45
        //   1027: aload #11
        //   1029: invokeinterface close : ()V
        //   1034: aload #10
        //   1036: invokeinterface close : ()V
        //   1041: aload #47
        //   1043: ldc '-'
        //   1045: invokevirtual equals : (Ljava/lang/Object;)Z
        //   1048: ifne -> 1142
        //   1051: new java/lang/StringBuilder
        //   1054: dup
        //   1055: invokespecial <init> : ()V
        //   1058: ldc 'Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from '
        //   1060: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1063: aload #7
        //   1065: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1068: ldc '.DoctorsList where Id = '
        //   1070: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1073: aload #47
        //   1075: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1078: invokevirtual toString : ()Ljava/lang/String;
        //   1081: astore #12
        //   1083: aload_3
        //   1084: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1089: astore #10
        //   1091: aload #10
        //   1093: aload #12
        //   1095: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1100: astore #11
        //   1102: aload #11
        //   1104: invokeinterface next : ()Z
        //   1109: ifeq -> 1125
        //   1112: aload #11
        //   1114: iconst_1
        //   1115: invokeinterface getString : (I)Ljava/lang/String;
        //   1120: astore #48
        //   1122: goto -> 1102
        //   1125: aload #11
        //   1127: invokeinterface close : ()V
        //   1132: aload #10
        //   1134: invokeinterface close : ()V
        //   1139: goto -> 1146
        //   1142: ldc ''
        //   1144: astore #48
        //   1146: goto -> 1184
        //   1149: astore #139
        //   1151: aload_2
        //   1152: new java/lang/StringBuilder
        //   1155: dup
        //   1156: invokespecial <init> : ()V
        //   1159: ldc 'Error In PateintReg:--'
        //   1161: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1164: aload #139
        //   1166: invokevirtual getMessage : ()Ljava/lang/String;
        //   1169: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1172: invokevirtual toString : ()Ljava/lang/String;
        //   1175: invokevirtual println : (Ljava/lang/String;)V
        //   1178: aload_2
        //   1179: aload #12
        //   1181: invokevirtual println : (Ljava/lang/String;)V
        //   1184: new java/lang/StringBuilder
        //   1187: dup
        //   1188: invokespecial <init> : ()V
        //   1191: ldc_w ' Select CASE WHEN TravellingChk = 1 THEN 'YES' WHEN TravellingChk = 0 THEN 'NO' ELSE 'NO' END, IFNULL(DATE_FORMAT(TravelWhen,'%m/%d/%Y'),''),  IFNULL(TravelWhere,''), IFNULL(TravelHowLong,''), CASE WHEN COVIDExposedChk = 1 THEN 'YES' WHEN COVIDExposedChk = 0 THEN 'NO' ELSE 'NO' END,  CASE WHEN SympFever = 1 THEN 'YES' ELSE '' END, CASE WHEN SympBodyAches = 1 THEN 'YES' ELSE '' END, CASE WHEN SympSoreThroat = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympFatigue = 1 THEN 'YES' ELSE '' END,CASE WHEN SympRash = 1 THEN 'YES' ELSE '' END, CASE WHEN SympVomiting = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympDiarrhea = 1 THEN 'YES' ELSE '' END, CASE WHEN SympCough = 1 THEN 'YES' ELSE '' END, CASE WHEN SympRunnyNose = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympNausea = 1 THEN 'YES' ELSE '' END, CASE WHEN SympFluSymptoms = 1 THEN 'YES' ELSE '' END, CASE WHEN SympEyeConjunctivitis = 1 THEN 'YES' ELSE '' END,  CASE WHEN Race = 1 THEN 'African American' WHEN Race = 2 THEN 'American Indian or Alska Native' WHEN Race = 3 THEN 'Asian' WHEN Race = 4 THEN 'Native Hawaiian or Other Pacific Islander'  WHEN Race = 5 THEN 'White' WHEN Race = 6 THEN 'Others' ELSE 'Others' END  from '
        //   1194: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1197: aload #7
        //   1199: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1202: ldc_w '.PatientReg_Details where PatientRegId = '
        //   1205: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1208: iload #13
        //   1210: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   1213: invokevirtual toString : ()Ljava/lang/String;
        //   1216: astore #12
        //   1218: aload_3
        //   1219: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1224: astore #10
        //   1226: aload #10
        //   1228: aload #12
        //   1230: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1235: astore #11
        //   1237: aload #11
        //   1239: invokeinterface next : ()Z
        //   1244: ifeq -> 1443
        //   1247: aload #11
        //   1249: iconst_1
        //   1250: invokeinterface getString : (I)Ljava/lang/String;
        //   1255: astore #51
        //   1257: aload #11
        //   1259: iconst_2
        //   1260: invokeinterface getString : (I)Ljava/lang/String;
        //   1265: astore #52
        //   1267: aload #11
        //   1269: iconst_3
        //   1270: invokeinterface getString : (I)Ljava/lang/String;
        //   1275: astore #53
        //   1277: aload #11
        //   1279: iconst_4
        //   1280: invokeinterface getString : (I)Ljava/lang/String;
        //   1285: astore #54
        //   1287: aload #11
        //   1289: iconst_5
        //   1290: invokeinterface getString : (I)Ljava/lang/String;
        //   1295: astore #55
        //   1297: aload #11
        //   1299: bipush #6
        //   1301: invokeinterface getString : (I)Ljava/lang/String;
        //   1306: astore #56
        //   1308: aload #11
        //   1310: bipush #7
        //   1312: invokeinterface getString : (I)Ljava/lang/String;
        //   1317: astore #57
        //   1319: aload #11
        //   1321: bipush #8
        //   1323: invokeinterface getString : (I)Ljava/lang/String;
        //   1328: astore #58
        //   1330: aload #11
        //   1332: bipush #9
        //   1334: invokeinterface getString : (I)Ljava/lang/String;
        //   1339: astore #59
        //   1341: aload #11
        //   1343: bipush #10
        //   1345: invokeinterface getString : (I)Ljava/lang/String;
        //   1350: astore #60
        //   1352: aload #11
        //   1354: bipush #11
        //   1356: invokeinterface getString : (I)Ljava/lang/String;
        //   1361: astore #61
        //   1363: aload #11
        //   1365: bipush #12
        //   1367: invokeinterface getString : (I)Ljava/lang/String;
        //   1372: astore #62
        //   1374: aload #11
        //   1376: bipush #13
        //   1378: invokeinterface getString : (I)Ljava/lang/String;
        //   1383: astore #63
        //   1385: aload #11
        //   1387: bipush #14
        //   1389: invokeinterface getString : (I)Ljava/lang/String;
        //   1394: astore #64
        //   1396: aload #11
        //   1398: bipush #15
        //   1400: invokeinterface getString : (I)Ljava/lang/String;
        //   1405: astore #65
        //   1407: aload #11
        //   1409: bipush #16
        //   1411: invokeinterface getString : (I)Ljava/lang/String;
        //   1416: astore #66
        //   1418: aload #11
        //   1420: bipush #17
        //   1422: invokeinterface getString : (I)Ljava/lang/String;
        //   1427: astore #67
        //   1429: aload #11
        //   1431: bipush #18
        //   1433: invokeinterface getString : (I)Ljava/lang/String;
        //   1438: astore #50
        //   1440: goto -> 1237
        //   1443: aload #11
        //   1445: invokeinterface close : ()V
        //   1450: aload #10
        //   1452: invokeinterface close : ()V
        //   1457: goto -> 1490
        //   1460: astore #139
        //   1462: aload_2
        //   1463: new java/lang/StringBuilder
        //   1466: dup
        //   1467: invokespecial <init> : ()V
        //   1470: ldc_w 'Error in getting PatientReg_Details Table : '
        //   1473: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1476: aload #139
        //   1478: invokevirtual getMessage : ()Ljava/lang/String;
        //   1481: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1484: invokevirtual toString : ()Ljava/lang/String;
        //   1487: invokevirtual println : (Ljava/lang/String;)V
        //   1490: iload #136
        //   1492: iconst_1
        //   1493: if_icmpne -> 1823
        //   1496: new java/lang/StringBuilder
        //   1499: dup
        //   1500: invokespecial <init> : ()V
        //   1503: ldc ' Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from '
        //   1505: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1508: aload #7
        //   1510: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1513: ldc '.InsuranceInfo  where PatientRegId = '
        //   1515: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1518: iload #138
        //   1520: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   1523: invokevirtual toString : ()Ljava/lang/String;
        //   1526: astore #12
        //   1528: aload_3
        //   1529: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1534: astore #10
        //   1536: aload #10
        //   1538: aload #12
        //   1540: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1545: astore #11
        //   1547: aload #11
        //   1549: invokeinterface next : ()Z
        //   1554: ifeq -> 1809
        //   1557: aload #11
        //   1559: iconst_1
        //   1560: invokeinterface getInt : (I)I
        //   1565: istore #68
        //   1567: aload #11
        //   1569: iconst_2
        //   1570: invokeinterface getInt : (I)I
        //   1575: istore #70
        //   1577: iload #68
        //   1579: ifne -> 1590
        //   1582: ldc_w 'NO'
        //   1585: astore #69
        //   1587: goto -> 1594
        //   1590: ldc 'YES'
        //   1592: astore #69
        //   1594: iload #70
        //   1596: ifne -> 1607
        //   1599: ldc_w 'NO'
        //   1602: astore #71
        //   1604: goto -> 1611
        //   1607: ldc 'YES'
        //   1609: astore #71
        //   1611: aload #11
        //   1613: iconst_3
        //   1614: invokeinterface getString : (I)Ljava/lang/String;
        //   1619: astore #72
        //   1621: aload #11
        //   1623: iconst_4
        //   1624: invokeinterface getString : (I)Ljava/lang/String;
        //   1629: astore #73
        //   1631: aload #11
        //   1633: iconst_5
        //   1634: invokeinterface getString : (I)Ljava/lang/String;
        //   1639: astore #74
        //   1641: aload #11
        //   1643: bipush #6
        //   1645: invokeinterface getString : (I)Ljava/lang/String;
        //   1650: astore #75
        //   1652: aload #11
        //   1654: bipush #7
        //   1656: invokeinterface getString : (I)Ljava/lang/String;
        //   1661: astore #76
        //   1663: aload #11
        //   1665: bipush #8
        //   1667: invokeinterface getString : (I)Ljava/lang/String;
        //   1672: astore #77
        //   1674: aload #11
        //   1676: bipush #9
        //   1678: invokeinterface getString : (I)Ljava/lang/String;
        //   1683: astore #78
        //   1685: aload #11
        //   1687: bipush #10
        //   1689: invokeinterface getString : (I)Ljava/lang/String;
        //   1694: astore #79
        //   1696: aload #11
        //   1698: bipush #11
        //   1700: invokeinterface getString : (I)Ljava/lang/String;
        //   1705: astore #80
        //   1707: aload #11
        //   1709: bipush #12
        //   1711: invokeinterface getString : (I)Ljava/lang/String;
        //   1716: astore #81
        //   1718: aload #11
        //   1720: bipush #13
        //   1722: invokeinterface getString : (I)Ljava/lang/String;
        //   1727: astore #82
        //   1729: aload #11
        //   1731: bipush #14
        //   1733: invokeinterface getString : (I)Ljava/lang/String;
        //   1738: astore #83
        //   1740: aload #11
        //   1742: bipush #15
        //   1744: invokeinterface getString : (I)Ljava/lang/String;
        //   1749: astore #84
        //   1751: aload #11
        //   1753: bipush #16
        //   1755: invokeinterface getString : (I)Ljava/lang/String;
        //   1760: astore #85
        //   1762: aload #11
        //   1764: bipush #17
        //   1766: invokeinterface getString : (I)Ljava/lang/String;
        //   1771: astore #86
        //   1773: aload #11
        //   1775: bipush #18
        //   1777: invokeinterface getString : (I)Ljava/lang/String;
        //   1782: astore #89
        //   1784: aload #11
        //   1786: bipush #19
        //   1788: invokeinterface getString : (I)Ljava/lang/String;
        //   1793: astore #87
        //   1795: aload #11
        //   1797: bipush #20
        //   1799: invokeinterface getString : (I)Ljava/lang/String;
        //   1804: astore #88
        //   1806: goto -> 1547
        //   1809: aload #11
        //   1811: invokeinterface close : ()V
        //   1816: aload #10
        //   1818: invokeinterface close : ()V
        //   1823: aload #75
        //   1825: ldc ''
        //   1827: invokevirtual equals : (Ljava/lang/Object;)Z
        //   1830: ifne -> 1920
        //   1833: new java/lang/StringBuilder
        //   1836: dup
        //   1837: invokespecial <init> : ()V
        //   1840: ldc_w 'Select IFNULL(PayerName,'') from '
        //   1843: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1846: aload #7
        //   1848: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1851: ldc_w '.ProfessionalPayers where Id = '
        //   1854: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1857: aload #75
        //   1859: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1862: invokevirtual toString : ()Ljava/lang/String;
        //   1865: astore #12
        //   1867: aload_3
        //   1868: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1873: astore #10
        //   1875: aload #10
        //   1877: aload #12
        //   1879: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1884: astore #11
        //   1886: aload #11
        //   1888: invokeinterface next : ()Z
        //   1893: ifeq -> 1906
        //   1896: aload #11
        //   1898: iconst_1
        //   1899: invokeinterface getString : (I)Ljava/lang/String;
        //   1904: astore #75
        //   1906: aload #11
        //   1908: invokeinterface close : ()V
        //   1913: aload #10
        //   1915: invokeinterface close : ()V
        //   1920: aload #84
        //   1922: ldc ''
        //   1924: invokevirtual equals : (Ljava/lang/Object;)Z
        //   1927: ifne -> 2017
        //   1930: new java/lang/StringBuilder
        //   1933: dup
        //   1934: invokespecial <init> : ()V
        //   1937: ldc_w 'Select IFNULL(PayerName,'') from '
        //   1940: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1943: aload #7
        //   1945: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1948: ldc_w '.ProfessionalPayers where Id = '
        //   1951: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1954: aload #84
        //   1956: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   1959: invokevirtual toString : ()Ljava/lang/String;
        //   1962: astore #12
        //   1964: aload_3
        //   1965: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   1970: astore #10
        //   1972: aload #10
        //   1974: aload #12
        //   1976: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   1981: astore #11
        //   1983: aload #11
        //   1985: invokeinterface next : ()Z
        //   1990: ifeq -> 2003
        //   1993: aload #11
        //   1995: iconst_1
        //   1996: invokeinterface getString : (I)Ljava/lang/String;
        //   2001: astore #84
        //   2003: aload #11
        //   2005: invokeinterface close : ()V
        //   2010: aload #10
        //   2012: invokeinterface close : ()V
        //   2017: new java/lang/StringBuilder
        //   2020: dup
        //   2021: invokespecial <init> : ()V
        //   2024: ldc 'Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from '
        //   2026: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2029: aload #7
        //   2031: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2034: ldc '.EmergencyInfo where PatientRegId = '
        //   2036: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2039: iload #138
        //   2041: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   2044: invokevirtual toString : ()Ljava/lang/String;
        //   2047: astore #12
        //   2049: aload_3
        //   2050: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   2055: astore #10
        //   2057: aload #10
        //   2059: aload #12
        //   2061: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   2066: astore #11
        //   2068: aload #11
        //   2070: invokeinterface next : ()Z
        //   2075: ifeq -> 2142
        //   2078: aload #11
        //   2080: iconst_1
        //   2081: invokeinterface getString : (I)Ljava/lang/String;
        //   2086: astore #90
        //   2088: aload #11
        //   2090: iconst_2
        //   2091: invokeinterface getString : (I)Ljava/lang/String;
        //   2096: astore #91
        //   2098: aload #11
        //   2100: iconst_3
        //   2101: invokeinterface getString : (I)Ljava/lang/String;
        //   2106: astore #92
        //   2108: aload #11
        //   2110: iconst_4
        //   2111: invokeinterface getString : (I)Ljava/lang/String;
        //   2116: astore #97
        //   2118: aload #11
        //   2120: iconst_5
        //   2121: invokeinterface getString : (I)Ljava/lang/String;
        //   2126: astore #94
        //   2128: aload #11
        //   2130: bipush #6
        //   2132: invokeinterface getString : (I)Ljava/lang/String;
        //   2137: astore #98
        //   2139: goto -> 2068
        //   2142: aload #11
        //   2144: invokeinterface close : ()V
        //   2149: aload #10
        //   2151: invokeinterface close : ()V
        //   2156: new java/lang/StringBuilder
        //   2159: dup
        //   2160: invokespecial <init> : ()V
        //   2163: ldc ' Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from '
        //   2165: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2168: aload #7
        //   2170: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2173: ldc '.RandomCheckInfo where PatientRegId = '
        //   2175: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2178: iload #138
        //   2180: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   2183: invokevirtual toString : ()Ljava/lang/String;
        //   2186: astore #12
        //   2188: aload_3
        //   2189: invokeinterface createStatement : ()Ljava/sql/Statement;
        //   2194: astore #10
        //   2196: aload #10
        //   2198: aload #12
        //   2200: invokeinterface executeQuery : (Ljava/lang/String;)Ljava/sql/ResultSet;
        //   2205: astore #11
        //   2207: aload #11
        //   2209: invokeinterface next : ()Z
        //   2214: ifeq -> 2805
        //   2217: aload #11
        //   2219: iconst_1
        //   2220: invokeinterface getInt : (I)I
        //   2225: ifne -> 2235
        //   2228: ldc ''
        //   2230: astore #108
        //   2232: goto -> 2239
        //   2235: ldc 'YES'
        //   2237: astore #108
        //   2239: aload #11
        //   2241: iconst_2
        //   2242: invokeinterface getInt : (I)I
        //   2247: ifne -> 2257
        //   2250: ldc ''
        //   2252: astore #109
        //   2254: goto -> 2261
        //   2257: ldc 'YES'
        //   2259: astore #109
        //   2261: aload #11
        //   2263: iconst_3
        //   2264: invokeinterface getInt : (I)I
        //   2269: ifne -> 2279
        //   2272: ldc ''
        //   2274: astore #110
        //   2276: goto -> 2283
        //   2279: ldc 'YES'
        //   2281: astore #110
        //   2283: aload #11
        //   2285: iconst_4
        //   2286: invokeinterface getInt : (I)I
        //   2291: ifne -> 2301
        //   2294: ldc ''
        //   2296: astore #111
        //   2298: goto -> 2305
        //   2301: ldc 'YES'
        //   2303: astore #111
        //   2305: aload #11
        //   2307: iconst_5
        //   2308: invokeinterface getInt : (I)I
        //   2313: ifne -> 2323
        //   2316: ldc ''
        //   2318: astore #112
        //   2320: goto -> 2327
        //   2323: ldc 'YES'
        //   2325: astore #112
        //   2327: aload #11
        //   2329: bipush #6
        //   2331: invokeinterface getInt : (I)I
        //   2336: ifne -> 2346
        //   2339: ldc ''
        //   2341: astore #113
        //   2343: goto -> 2350
        //   2346: ldc 'YES'
        //   2348: astore #113
        //   2350: aload #11
        //   2352: bipush #7
        //   2354: invokeinterface getInt : (I)I
        //   2359: ifne -> 2369
        //   2362: ldc ''
        //   2364: astore #114
        //   2366: goto -> 2373
        //   2369: ldc 'YES'
        //   2371: astore #114
        //   2373: aload #11
        //   2375: bipush #8
        //   2377: invokeinterface getInt : (I)I
        //   2382: ifne -> 2392
        //   2385: ldc ''
        //   2387: astore #115
        //   2389: goto -> 2396
        //   2392: ldc 'YES'
        //   2394: astore #115
        //   2396: aload #11
        //   2398: bipush #9
        //   2400: invokeinterface getInt : (I)I
        //   2405: ifne -> 2415
        //   2408: ldc ''
        //   2410: astore #116
        //   2412: goto -> 2419
        //   2415: ldc 'YES'
        //   2417: astore #116
        //   2419: aload #11
        //   2421: bipush #10
        //   2423: invokeinterface getInt : (I)I
        //   2428: ifne -> 2442
        //   2431: ldc ''
        //   2433: astore #117
        //   2435: ldc ''
        //   2437: astore #118
        //   2439: goto -> 2457
        //   2442: ldc 'YES'
        //   2444: astore #117
        //   2446: aload #11
        //   2448: bipush #11
        //   2450: invokeinterface getString : (I)Ljava/lang/String;
        //   2455: astore #118
        //   2457: aload #11
        //   2459: bipush #12
        //   2461: invokeinterface getInt : (I)I
        //   2466: ifne -> 2476
        //   2469: ldc ''
        //   2471: astore #119
        //   2473: goto -> 2480
        //   2476: ldc 'YES'
        //   2478: astore #119
        //   2480: aload #11
        //   2482: bipush #13
        //   2484: invokeinterface getInt : (I)I
        //   2489: ifne -> 2503
        //   2492: ldc ''
        //   2494: astore #120
        //   2496: ldc ''
        //   2498: astore #121
        //   2500: goto -> 2518
        //   2503: ldc 'YES'
        //   2505: astore #120
        //   2507: aload #11
        //   2509: bipush #14
        //   2511: invokeinterface getString : (I)Ljava/lang/String;
        //   2516: astore #121
        //   2518: aload #11
        //   2520: bipush #15
        //   2522: invokeinterface getInt : (I)I
        //   2527: ifne -> 2541
        //   2530: ldc ''
        //   2532: astore #122
        //   2534: ldc ''
        //   2536: astore #123
        //   2538: goto -> 2556
        //   2541: ldc 'YES'
        //   2543: astore #122
        //   2545: aload #11
        //   2547: bipush #16
        //   2549: invokeinterface getString : (I)Ljava/lang/String;
        //   2554: astore #123
        //   2556: aload #11
        //   2558: bipush #17
        //   2560: invokeinterface getInt : (I)I
        //   2565: ifne -> 2579
        //   2568: ldc ''
        //   2570: astore #124
        //   2572: ldc ''
        //   2574: astore #125
        //   2576: goto -> 2594
        //   2579: ldc 'YES'
        //   2581: astore #124
        //   2583: aload #11
        //   2585: bipush #18
        //   2587: invokeinterface getString : (I)Ljava/lang/String;
        //   2592: astore #125
        //   2594: aload #11
        //   2596: bipush #19
        //   2598: invokeinterface getInt : (I)I
        //   2603: ifne -> 2617
        //   2606: ldc ''
        //   2608: astore #126
        //   2610: ldc ''
        //   2612: astore #127
        //   2614: goto -> 2632
        //   2617: ldc 'YES'
        //   2619: astore #126
        //   2621: aload #11
        //   2623: bipush #20
        //   2625: invokeinterface getString : (I)Ljava/lang/String;
        //   2630: astore #127
        //   2632: aload #11
        //   2634: bipush #21
        //   2636: invokeinterface getInt : (I)I
        //   2641: ifne -> 2655
        //   2644: ldc ''
        //   2646: astore #128
        //   2648: ldc ''
        //   2650: astore #129
        //   2652: goto -> 2670
        //   2655: ldc 'YES'
        //   2657: astore #128
        //   2659: aload #11
        //   2661: bipush #22
        //   2663: invokeinterface getString : (I)Ljava/lang/String;
        //   2668: astore #129
        //   2670: aload #11
        //   2672: bipush #23
        //   2674: invokeinterface getString : (I)Ljava/lang/String;
        //   2679: ldc ''
        //   2681: if_acmpeq -> 2696
        //   2684: aload #11
        //   2686: bipush #23
        //   2688: invokeinterface getString : (I)Ljava/lang/String;
        //   2693: ifnonnull -> 2703
        //   2696: ldc ''
        //   2698: astore #131
        //   2700: goto -> 2714
        //   2703: aload #11
        //   2705: bipush #23
        //   2707: invokeinterface getString : (I)Ljava/lang/String;
        //   2712: astore #131
        //   2714: aload #11
        //   2716: bipush #24
        //   2718: invokeinterface getString : (I)Ljava/lang/String;
        //   2723: ldc ''
        //   2725: if_acmpeq -> 2740
        //   2728: aload #11
        //   2730: bipush #24
        //   2732: invokeinterface getString : (I)Ljava/lang/String;
        //   2737: ifnonnull -> 2747
        //   2740: ldc ''
        //   2742: astore #133
        //   2744: goto -> 2758
        //   2747: aload #11
        //   2749: bipush #24
        //   2751: invokeinterface getString : (I)Ljava/lang/String;
        //   2756: astore #133
        //   2758: aload #11
        //   2760: bipush #25
        //   2762: invokeinterface getString : (I)Ljava/lang/String;
        //   2767: ldc ''
        //   2769: if_acmpeq -> 2784
        //   2772: aload #11
        //   2774: bipush #25
        //   2776: invokeinterface getString : (I)Ljava/lang/String;
        //   2781: ifnonnull -> 2791
        //   2784: ldc ''
        //   2786: astore #135
        //   2788: goto -> 2207
        //   2791: aload #11
        //   2793: bipush #25
        //   2795: invokeinterface getString : (I)Ljava/lang/String;
        //   2800: astore #135
        //   2802: goto -> 2207
        //   2805: aload #11
        //   2807: invokeinterface close : ()V
        //   2812: aload #10
        //   2814: invokeinterface close : ()V
        //   2819: ldc ''
        //   2821: astore #139
        //   2823: aload #108
        //   2825: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   2828: ldc 'YES'
        //   2830: invokevirtual equals : (Ljava/lang/Object;)Z
        //   2833: ifeq -> 2859
        //   2836: new java/lang/StringBuilder
        //   2839: dup
        //   2840: invokespecial <init> : ()V
        //   2843: aload #139
        //   2845: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2848: ldc_w 'Return Patient, '
        //   2851: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2854: invokevirtual toString : ()Ljava/lang/String;
        //   2857: astore #139
        //   2859: aload #109
        //   2861: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   2864: ldc 'YES'
        //   2866: invokevirtual equals : (Ljava/lang/Object;)Z
        //   2869: ifeq -> 2895
        //   2872: new java/lang/StringBuilder
        //   2875: dup
        //   2876: invokespecial <init> : ()V
        //   2879: aload #139
        //   2881: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2884: ldc_w 'Google, '
        //   2887: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2890: invokevirtual toString : ()Ljava/lang/String;
        //   2893: astore #139
        //   2895: aload #110
        //   2897: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   2900: ldc 'YES'
        //   2902: invokevirtual equals : (Ljava/lang/Object;)Z
        //   2905: ifeq -> 2931
        //   2908: new java/lang/StringBuilder
        //   2911: dup
        //   2912: invokespecial <init> : ()V
        //   2915: aload #139
        //   2917: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2920: ldc_w 'Map Search, '
        //   2923: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2926: invokevirtual toString : ()Ljava/lang/String;
        //   2929: astore #139
        //   2931: aload #112
        //   2933: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   2936: ldc 'YES'
        //   2938: invokevirtual equals : (Ljava/lang/Object;)Z
        //   2941: ifeq -> 2967
        //   2944: new java/lang/StringBuilder
        //   2947: dup
        //   2948: invokespecial <init> : ()V
        //   2951: aload #139
        //   2953: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2956: ldc_w 'Online Review, '
        //   2959: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2962: invokevirtual toString : ()Ljava/lang/String;
        //   2965: astore #139
        //   2967: aload #113
        //   2969: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   2972: ldc 'YES'
        //   2974: invokevirtual equals : (Ljava/lang/Object;)Z
        //   2977: ifeq -> 3003
        //   2980: new java/lang/StringBuilder
        //   2983: dup
        //   2984: invokespecial <init> : ()V
        //   2987: aload #139
        //   2989: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2992: ldc_w 'TV, '
        //   2995: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   2998: invokevirtual toString : ()Ljava/lang/String;
        //   3001: astore #139
        //   3003: aload #114
        //   3005: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3008: ldc 'YES'
        //   3010: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3013: ifeq -> 3039
        //   3016: new java/lang/StringBuilder
        //   3019: dup
        //   3020: invokespecial <init> : ()V
        //   3023: aload #139
        //   3025: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3028: ldc_w 'Website, '
        //   3031: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3034: invokevirtual toString : ()Ljava/lang/String;
        //   3037: astore #139
        //   3039: aload #115
        //   3041: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3044: ldc 'YES'
        //   3046: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3049: ifeq -> 3075
        //   3052: new java/lang/StringBuilder
        //   3055: dup
        //   3056: invokespecial <init> : ()V
        //   3059: aload #139
        //   3061: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3064: ldc_w 'Building Sign, '
        //   3067: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3070: invokevirtual toString : ()Ljava/lang/String;
        //   3073: astore #139
        //   3075: aload #116
        //   3077: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3080: ldc 'YES'
        //   3082: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3085: ifeq -> 3111
        //   3088: new java/lang/StringBuilder
        //   3091: dup
        //   3092: invokespecial <init> : ()V
        //   3095: aload #139
        //   3097: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3100: ldc_w 'Facebook, '
        //   3103: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3106: invokevirtual toString : ()Ljava/lang/String;
        //   3109: astore #139
        //   3111: aload #117
        //   3113: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3116: ldc 'YES'
        //   3118: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3121: ifeq -> 3147
        //   3124: new java/lang/StringBuilder
        //   3127: dup
        //   3128: invokespecial <init> : ()V
        //   3131: aload #139
        //   3133: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3136: ldc_w 'School, '
        //   3139: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3142: invokevirtual toString : ()Ljava/lang/String;
        //   3145: astore #139
        //   3147: aload #119
        //   3149: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3152: ldc 'YES'
        //   3154: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3157: ifeq -> 3183
        //   3160: new java/lang/StringBuilder
        //   3163: dup
        //   3164: invokespecial <init> : ()V
        //   3167: aload #139
        //   3169: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3172: ldc_w 'Twitter, '
        //   3175: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3178: invokevirtual toString : ()Ljava/lang/String;
        //   3181: astore #139
        //   3183: aload #120
        //   3185: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3188: ldc 'YES'
        //   3190: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3193: ifeq -> 3219
        //   3196: new java/lang/StringBuilder
        //   3199: dup
        //   3200: invokespecial <init> : ()V
        //   3203: aload #139
        //   3205: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3208: ldc_w 'Magazine, '
        //   3211: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3214: invokevirtual toString : ()Ljava/lang/String;
        //   3217: astore #139
        //   3219: aload #122
        //   3221: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3224: ldc 'YES'
        //   3226: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3229: ifeq -> 3255
        //   3232: new java/lang/StringBuilder
        //   3235: dup
        //   3236: invokespecial <init> : ()V
        //   3239: aload #139
        //   3241: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3244: ldc_w 'Newspaper, '
        //   3247: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3250: invokevirtual toString : ()Ljava/lang/String;
        //   3253: astore #139
        //   3255: aload #124
        //   3257: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3260: ldc 'YES'
        //   3262: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3265: ifeq -> 3291
        //   3268: new java/lang/StringBuilder
        //   3271: dup
        //   3272: invokespecial <init> : ()V
        //   3275: aload #139
        //   3277: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3280: ldc_w 'Friend / Family, '
        //   3283: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3286: invokevirtual toString : ()Ljava/lang/String;
        //   3289: astore #139
        //   3291: aload #126
        //   3293: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3296: ldc 'YES'
        //   3298: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3301: ifeq -> 3327
        //   3304: new java/lang/StringBuilder
        //   3307: dup
        //   3308: invokespecial <init> : ()V
        //   3311: aload #139
        //   3313: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3316: ldc_w 'Urgent Care, '
        //   3319: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3322: invokevirtual toString : ()Ljava/lang/String;
        //   3325: astore #139
        //   3327: aload #128
        //   3329: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3332: ldc 'YES'
        //   3334: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3337: ifeq -> 3363
        //   3340: new java/lang/StringBuilder
        //   3343: dup
        //   3344: invokespecial <init> : ()V
        //   3347: aload #139
        //   3349: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3352: ldc_w 'Comminuty Event, '
        //   3355: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3358: invokevirtual toString : ()Ljava/lang/String;
        //   3361: astore #139
        //   3363: ldc ''
        //   3365: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3368: ldc 'YES'
        //   3370: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3373: ifeq -> 3399
        //   3376: new java/lang/StringBuilder
        //   3379: dup
        //   3380: invokespecial <init> : ()V
        //   3383: aload #139
        //   3385: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3388: ldc_w 'Work, '
        //   3391: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3394: invokevirtual toString : ()Ljava/lang/String;
        //   3397: astore #139
        //   3399: ldc ''
        //   3401: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3404: ldc 'YES'
        //   3406: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3409: ifeq -> 3435
        //   3412: new java/lang/StringBuilder
        //   3415: dup
        //   3416: invokespecial <init> : ()V
        //   3419: aload #139
        //   3421: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3424: ldc_w 'Physician, '
        //   3427: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3430: invokevirtual toString : ()Ljava/lang/String;
        //   3433: astore #139
        //   3435: ldc ''
        //   3437: invokevirtual toUpperCase : ()Ljava/lang/String;
        //   3440: ldc 'YES'
        //   3442: invokevirtual equals : (Ljava/lang/Object;)Z
        //   3445: ifeq -> 3471
        //   3448: new java/lang/StringBuilder
        //   3451: dup
        //   3452: invokespecial <init> : ()V
        //   3455: aload #139
        //   3457: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3460: ldc_w 'Others '
        //   3463: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3466: invokevirtual toString : ()Ljava/lang/String;
        //   3469: astore #139
        //   3471: ldc ''
        //   3473: astore #140
        //   3475: ldc ''
        //   3477: astore #141
        //   3479: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/FINANCIAL_HARDSHIP_RELIEF.pdf'
        //   3482: astore #140
        //   3484: new java/lang/StringBuilder
        //   3487: dup
        //   3488: invokespecial <init> : ()V
        //   3491: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/FINANCIAL_HARDSHIP_RELIEF_'
        //   3494: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3497: iload #8
        //   3499: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   3502: ldc '_'
        //   3504: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3507: aload #43
        //   3509: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3512: ldc '.pdf'
        //   3514: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3517: invokevirtual toString : ()Ljava/lang/String;
        //   3520: astore #141
        //   3522: new java/io/FileOutputStream
        //   3525: dup
        //   3526: new java/io/File
        //   3529: dup
        //   3530: aload #141
        //   3532: invokespecial <init> : (Ljava/lang/String;)V
        //   3535: invokespecial <init> : (Ljava/io/File;)V
        //   3538: astore #142
        //   3540: new com/itextpdf/text/pdf/PdfReader
        //   3543: dup
        //   3544: aload #140
        //   3546: invokespecial <init> : (Ljava/lang/String;)V
        //   3549: astore #143
        //   3551: new com/itextpdf/text/pdf/PdfStamper
        //   3554: dup
        //   3555: aload #143
        //   3557: aload #142
        //   3559: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   3562: astore #144
        //   3564: iconst_1
        //   3565: istore #145
        //   3567: iload #145
        //   3569: aload #143
        //   3571: invokevirtual getNumberOfPages : ()I
        //   3574: if_icmpgt -> 4006
        //   3577: iload #145
        //   3579: iconst_1
        //   3580: if_icmpne -> 4000
        //   3583: aload #144
        //   3585: iload #145
        //   3587: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   3590: astore #146
        //   3592: aload #146
        //   3594: invokevirtual beginText : ()V
        //   3597: aload #146
        //   3599: ldc 'Times-Roman'
        //   3601: ldc 'Cp1257'
        //   3603: iconst_1
        //   3604: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3607: ldc 10.0
        //   3609: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3612: aload #146
        //   3614: ldc_w 370.0
        //   3617: ldc 330.0
        //   3619: invokevirtual setTextMatrix : (FF)V
        //   3622: aload #146
        //   3624: aload #15
        //   3626: invokevirtual showText : (Ljava/lang/String;)V
        //   3629: aload #146
        //   3631: invokevirtual endText : ()V
        //   3634: aload #146
        //   3636: invokevirtual beginText : ()V
        //   3639: aload #146
        //   3641: ldc 'Times-Roman'
        //   3643: ldc 'Cp1257'
        //   3645: iconst_1
        //   3646: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3649: ldc 8.0
        //   3651: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3654: aload #146
        //   3656: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3659: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3662: aload #146
        //   3664: ldc 80.0
        //   3666: ldc 270.0
        //   3668: invokevirtual setTextMatrix : (FF)V
        //   3671: aload #146
        //   3673: new java/lang/StringBuilder
        //   3676: dup
        //   3677: invokespecial <init> : ()V
        //   3680: aload #24
        //   3682: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3685: ldc ' , '
        //   3687: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3690: aload #22
        //   3692: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3695: invokevirtual toString : ()Ljava/lang/String;
        //   3698: invokevirtual showText : (Ljava/lang/String;)V
        //   3701: aload #146
        //   3703: invokevirtual endText : ()V
        //   3706: aload #146
        //   3708: invokevirtual beginText : ()V
        //   3711: aload #146
        //   3713: ldc 'Times-Roman'
        //   3715: ldc 'Cp1257'
        //   3717: iconst_1
        //   3718: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3721: ldc 8.0
        //   3723: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3726: aload #146
        //   3728: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3731: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3734: aload #146
        //   3736: ldc 80.0
        //   3738: ldc 260.0
        //   3740: invokevirtual setTextMatrix : (FF)V
        //   3743: aload #146
        //   3745: new java/lang/StringBuilder
        //   3748: dup
        //   3749: invokespecial <init> : ()V
        //   3752: aload #45
        //   3754: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3757: ldc '        Sex:'
        //   3759: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3762: aload #29
        //   3764: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3767: invokevirtual toString : ()Ljava/lang/String;
        //   3770: invokevirtual showText : (Ljava/lang/String;)V
        //   3773: aload #146
        //   3775: invokevirtual endText : ()V
        //   3778: aload #146
        //   3780: invokevirtual beginText : ()V
        //   3783: aload #146
        //   3785: ldc 'Times-Roman'
        //   3787: ldc 'Cp1257'
        //   3789: iconst_1
        //   3790: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3793: ldc 8.0
        //   3795: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3798: aload #146
        //   3800: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3803: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3806: aload #146
        //   3808: ldc 80.0
        //   3810: ldc 250.0
        //   3812: invokevirtual setTextMatrix : (FF)V
        //   3815: aload #146
        //   3817: new java/lang/StringBuilder
        //   3820: dup
        //   3821: invokespecial <init> : ()V
        //   3824: ldc 'DOB: '
        //   3826: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3829: aload #27
        //   3831: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3834: ldc '        Age:'
        //   3836: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3839: aload #28
        //   3841: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3844: invokevirtual toString : ()Ljava/lang/String;
        //   3847: invokevirtual showText : (Ljava/lang/String;)V
        //   3850: aload #146
        //   3852: invokevirtual endText : ()V
        //   3855: aload #146
        //   3857: invokevirtual beginText : ()V
        //   3860: aload #146
        //   3862: ldc 'Times-Roman'
        //   3864: ldc 'Cp1257'
        //   3866: iconst_1
        //   3867: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3870: ldc 8.0
        //   3872: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3875: aload #146
        //   3877: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3880: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3883: aload #146
        //   3885: ldc 80.0
        //   3887: ldc 240.0
        //   3889: invokevirtual setTextMatrix : (FF)V
        //   3892: aload #146
        //   3894: new java/lang/StringBuilder
        //   3897: dup
        //   3898: invokespecial <init> : ()V
        //   3901: ldc 'MRN: '
        //   3903: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3906: aload #43
        //   3908: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3911: ldc '        DOS: '
        //   3913: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3916: aload #46
        //   3918: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3921: invokevirtual toString : ()Ljava/lang/String;
        //   3924: invokevirtual showText : (Ljava/lang/String;)V
        //   3927: aload #146
        //   3929: invokevirtual endText : ()V
        //   3932: aload #146
        //   3934: invokevirtual beginText : ()V
        //   3937: aload #146
        //   3939: ldc 'Times-Roman'
        //   3941: ldc 'Cp1257'
        //   3943: iconst_1
        //   3944: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   3947: ldc 8.0
        //   3949: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   3952: aload #146
        //   3954: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   3957: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   3960: aload #146
        //   3962: ldc 80.0
        //   3964: ldc_w 230.0
        //   3967: invokevirtual setTextMatrix : (FF)V
        //   3970: aload #146
        //   3972: new java/lang/StringBuilder
        //   3975: dup
        //   3976: invokespecial <init> : ()V
        //   3979: ldc 'Dr. '
        //   3981: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3984: aload #48
        //   3986: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   3989: invokevirtual toString : ()Ljava/lang/String;
        //   3992: invokevirtual showText : (Ljava/lang/String;)V
        //   3995: aload #146
        //   3997: invokevirtual endText : ()V
        //   4000: iinc #145, 1
        //   4003: goto -> 3567
        //   4006: aload #144
        //   4008: invokevirtual close : ()V
        //   4011: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/GeneralForm_LongView.pdf'
        //   4014: astore #17
        //   4016: ldc ''
        //   4018: astore #145
        //   4020: aload #17
        //   4022: astore #145
        //   4024: new java/lang/StringBuilder
        //   4027: dup
        //   4028: invokespecial <init> : ()V
        //   4031: ldc '/sftpdrive/AdmissionBundlePdf/'
        //   4033: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4036: aload #9
        //   4038: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4041: ldc '/'
        //   4043: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4046: aload #23
        //   4048: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4051: aload #24
        //   4053: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4056: iload #138
        //   4058: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   4061: ldc '_'
        //   4063: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4066: aload #14
        //   4068: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4071: ldc '.pdf'
        //   4073: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4076: invokevirtual toString : ()Ljava/lang/String;
        //   4079: astore #146
        //   4081: new java/io/FileOutputStream
        //   4084: dup
        //   4085: new java/io/File
        //   4088: dup
        //   4089: aload #146
        //   4091: invokespecial <init> : (Ljava/lang/String;)V
        //   4094: invokespecial <init> : (Ljava/io/File;)V
        //   4097: astore #147
        //   4099: new com/itextpdf/text/pdf/PdfReader
        //   4102: dup
        //   4103: aload #145
        //   4105: invokespecial <init> : (Ljava/lang/String;)V
        //   4108: astore #148
        //   4110: new com/itextpdf/text/pdf/PdfStamper
        //   4113: dup
        //   4114: aload #148
        //   4116: aload #147
        //   4118: invokespecial <init> : (Lcom/itextpdf/text/pdf/PdfReader;Ljava/io/OutputStream;)V
        //   4121: astore #149
        //   4123: new md/GenerateBarCode
        //   4126: dup
        //   4127: invokespecial <init> : ()V
        //   4130: astore #150
        //   4132: aload #150
        //   4134: aload_1
        //   4135: aload_2
        //   4136: aload_3
        //   4137: aload #4
        //   4139: aload #6
        //   4141: aload #7
        //   4143: iload #8
        //   4145: aload #43
        //   4147: invokevirtual GetBarCode : (Ljavax/servlet/http/HttpServletRequest;Ljava/io/PrintWriter;Ljava/sql/Connection;Ljavax/servlet/ServletContext;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;
        //   4150: astore #151
        //   4152: aload #151
        //   4154: invokestatic getInstance : (Ljava/lang/String;)Lcom/itextpdf/text/Image;
        //   4157: astore #152
        //   4159: aload #152
        //   4161: ldc 150.0
        //   4163: ldc 30.0
        //   4165: invokevirtual scaleAbsolute : (FF)V
        //   4168: iconst_1
        //   4169: istore #153
        //   4171: iload #153
        //   4173: aload #148
        //   4175: invokevirtual getNumberOfPages : ()I
        //   4178: if_icmpgt -> 8726
        //   4181: iload #153
        //   4183: iconst_1
        //   4184: if_icmpne -> 6404
        //   4187: aload #149
        //   4189: iload #153
        //   4191: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   4194: astore #154
        //   4196: aload #154
        //   4198: invokevirtual beginText : ()V
        //   4201: aload #154
        //   4203: ldc 'Times-Roman'
        //   4205: ldc 'Cp1257'
        //   4207: iconst_1
        //   4208: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4211: ldc 10.0
        //   4213: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4216: aload #154
        //   4218: ldc 80.0
        //   4220: ldc_w 715.0
        //   4223: invokevirtual setTextMatrix : (FF)V
        //   4226: aload #154
        //   4228: aload #24
        //   4230: invokevirtual showText : (Ljava/lang/String;)V
        //   4233: aload #154
        //   4235: invokevirtual endText : ()V
        //   4238: aload #154
        //   4240: invokevirtual beginText : ()V
        //   4243: aload #154
        //   4245: ldc 'Times-Roman'
        //   4247: ldc 'Cp1257'
        //   4249: iconst_1
        //   4250: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4253: ldc 10.0
        //   4255: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4258: aload #154
        //   4260: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4263: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4266: aload #154
        //   4268: ldc 200.0
        //   4270: ldc_w 715.0
        //   4273: invokevirtual setTextMatrix : (FF)V
        //   4276: aload #154
        //   4278: aload #22
        //   4280: invokevirtual showText : (Ljava/lang/String;)V
        //   4283: aload #154
        //   4285: invokevirtual endText : ()V
        //   4288: aload #154
        //   4290: invokevirtual beginText : ()V
        //   4293: aload #154
        //   4295: ldc 'Times-Roman'
        //   4297: ldc 'Cp1257'
        //   4299: iconst_1
        //   4300: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4303: ldc 10.0
        //   4305: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4308: aload #154
        //   4310: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4313: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4316: aload #154
        //   4318: ldc_w 310.0
        //   4321: ldc_w 715.0
        //   4324: invokevirtual setTextMatrix : (FF)V
        //   4327: aload #154
        //   4329: aload #25
        //   4331: invokevirtual showText : (Ljava/lang/String;)V
        //   4334: aload #154
        //   4336: invokevirtual endText : ()V
        //   4339: aload #154
        //   4341: invokevirtual beginText : ()V
        //   4344: aload #154
        //   4346: ldc 'Times-Roman'
        //   4348: ldc 'Cp1257'
        //   4350: iconst_1
        //   4351: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4354: ldc 10.0
        //   4356: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4359: aload #154
        //   4361: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4364: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4367: aload #154
        //   4369: ldc 365.0
        //   4371: ldc_w 715.0
        //   4374: invokevirtual setTextMatrix : (FF)V
        //   4377: aload #154
        //   4379: new java/lang/StringBuilder
        //   4382: dup
        //   4383: invokespecial <init> : ()V
        //   4386: ldc 'Title: '
        //   4388: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4391: aload #21
        //   4393: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   4396: invokevirtual toString : ()Ljava/lang/String;
        //   4399: invokevirtual showText : (Ljava/lang/String;)V
        //   4402: aload #154
        //   4404: invokevirtual endText : ()V
        //   4407: aload #154
        //   4409: invokevirtual beginText : ()V
        //   4412: aload #154
        //   4414: ldc 'Times-Roman'
        //   4416: ldc 'Cp1257'
        //   4418: iconst_1
        //   4419: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4422: ldc 10.0
        //   4424: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4427: aload #154
        //   4429: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4432: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4435: aload #154
        //   4437: ldc 510.0
        //   4439: ldc_w 715.0
        //   4442: invokevirtual setTextMatrix : (FF)V
        //   4445: aload #154
        //   4447: aload #26
        //   4449: invokevirtual showText : (Ljava/lang/String;)V
        //   4452: aload #154
        //   4454: invokevirtual endText : ()V
        //   4457: aload #154
        //   4459: invokevirtual beginText : ()V
        //   4462: aload #154
        //   4464: ldc 'Times-Roman'
        //   4466: ldc 'Cp1257'
        //   4468: iconst_1
        //   4469: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4472: ldc 10.0
        //   4474: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4477: aload #154
        //   4479: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4482: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4485: aload #154
        //   4487: ldc 80.0
        //   4489: ldc_w 680.0
        //   4492: invokevirtual setTextMatrix : (FF)V
        //   4495: aload #154
        //   4497: aload #37
        //   4499: invokevirtual showText : (Ljava/lang/String;)V
        //   4502: aload #154
        //   4504: invokevirtual endText : ()V
        //   4507: aload #154
        //   4509: invokevirtual beginText : ()V
        //   4512: aload #154
        //   4514: ldc 'Times-Roman'
        //   4516: ldc 'Cp1257'
        //   4518: iconst_1
        //   4519: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4522: ldc 10.0
        //   4524: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4527: aload #154
        //   4529: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4532: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4535: aload #154
        //   4537: ldc 260.0
        //   4539: ldc_w 680.0
        //   4542: invokevirtual setTextMatrix : (FF)V
        //   4545: aload #154
        //   4547: aload #31
        //   4549: invokevirtual showText : (Ljava/lang/String;)V
        //   4552: aload #154
        //   4554: invokevirtual endText : ()V
        //   4557: aload #154
        //   4559: invokevirtual beginText : ()V
        //   4562: aload #154
        //   4564: ldc 'Times-Roman'
        //   4566: ldc 'Cp1257'
        //   4568: iconst_1
        //   4569: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4572: ldc 10.0
        //   4574: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4577: aload #154
        //   4579: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4582: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4585: aload #154
        //   4587: ldc 350.0
        //   4589: ldc_w 680.0
        //   4592: invokevirtual setTextMatrix : (FF)V
        //   4595: aload #154
        //   4597: aload #27
        //   4599: invokevirtual showText : (Ljava/lang/String;)V
        //   4602: aload #154
        //   4604: invokevirtual endText : ()V
        //   4607: aload #154
        //   4609: invokevirtual beginText : ()V
        //   4612: aload #154
        //   4614: ldc 'Times-Roman'
        //   4616: ldc 'Cp1257'
        //   4618: iconst_1
        //   4619: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4622: ldc 10.0
        //   4624: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4627: aload #154
        //   4629: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4632: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4635: aload #154
        //   4637: ldc 510.0
        //   4639: ldc_w 680.0
        //   4642: invokevirtual setTextMatrix : (FF)V
        //   4645: aload #154
        //   4647: aload #29
        //   4649: invokevirtual showText : (Ljava/lang/String;)V
        //   4652: aload #154
        //   4654: invokevirtual endText : ()V
        //   4657: aload #154
        //   4659: invokevirtual beginText : ()V
        //   4662: aload #154
        //   4664: ldc 'Times-Roman'
        //   4666: ldc 'Cp1257'
        //   4668: iconst_1
        //   4669: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4672: ldc 10.0
        //   4674: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4677: aload #154
        //   4679: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4682: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4685: aload #154
        //   4687: ldc 40.0
        //   4689: ldc 650.0
        //   4691: invokevirtual setTextMatrix : (FF)V
        //   4694: aload #154
        //   4696: aload #32
        //   4698: invokevirtual showText : (Ljava/lang/String;)V
        //   4701: aload #154
        //   4703: invokevirtual endText : ()V
        //   4706: aload #154
        //   4708: invokevirtual beginText : ()V
        //   4711: aload #154
        //   4713: ldc 'Times-Roman'
        //   4715: ldc 'Cp1257'
        //   4717: iconst_1
        //   4718: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4721: ldc 10.0
        //   4723: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4726: aload #154
        //   4728: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4731: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4734: aload #154
        //   4736: ldc_w 255.0
        //   4739: ldc 650.0
        //   4741: invokevirtual setTextMatrix : (FF)V
        //   4744: aload #154
        //   4746: aload #33
        //   4748: invokevirtual showText : (Ljava/lang/String;)V
        //   4751: aload #154
        //   4753: invokevirtual endText : ()V
        //   4756: aload #154
        //   4758: invokevirtual beginText : ()V
        //   4761: aload #154
        //   4763: ldc 'Times-Roman'
        //   4765: ldc 'Cp1257'
        //   4767: iconst_1
        //   4768: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4771: ldc 10.0
        //   4773: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4776: aload #154
        //   4778: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4781: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4784: aload #154
        //   4786: ldc_w 410.0
        //   4789: ldc 650.0
        //   4791: invokevirtual setTextMatrix : (FF)V
        //   4794: aload #154
        //   4796: aload #30
        //   4798: invokevirtual showText : (Ljava/lang/String;)V
        //   4801: aload #154
        //   4803: invokevirtual endText : ()V
        //   4806: aload #154
        //   4808: invokevirtual beginText : ()V
        //   4811: aload #154
        //   4813: ldc 'Times-Roman'
        //   4815: ldc 'Cp1257'
        //   4817: iconst_1
        //   4818: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4821: ldc 10.0
        //   4823: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4826: aload #154
        //   4828: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4831: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4834: aload #154
        //   4836: ldc 80.0
        //   4838: ldc_w 620.0
        //   4841: invokevirtual setTextMatrix : (FF)V
        //   4844: aload #154
        //   4846: aload #39
        //   4848: invokevirtual showText : (Ljava/lang/String;)V
        //   4851: aload #154
        //   4853: invokevirtual endText : ()V
        //   4856: aload #154
        //   4858: invokevirtual beginText : ()V
        //   4861: aload #154
        //   4863: ldc 'Times-Roman'
        //   4865: ldc 'Cp1257'
        //   4867: iconst_1
        //   4868: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4871: ldc 10.0
        //   4873: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4876: aload #154
        //   4878: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4881: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4884: aload #154
        //   4886: ldc_w 230.0
        //   4889: ldc_w 620.0
        //   4892: invokevirtual setTextMatrix : (FF)V
        //   4895: aload #154
        //   4897: aload #40
        //   4899: invokevirtual showText : (Ljava/lang/String;)V
        //   4902: aload #154
        //   4904: invokevirtual endText : ()V
        //   4907: aload #154
        //   4909: invokevirtual beginText : ()V
        //   4912: aload #154
        //   4914: ldc 'Times-Roman'
        //   4916: ldc 'Cp1257'
        //   4918: iconst_1
        //   4919: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4922: ldc 10.0
        //   4924: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4927: aload #154
        //   4929: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4932: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4935: aload #154
        //   4937: ldc 400.0
        //   4939: ldc_w 620.0
        //   4942: invokevirtual setTextMatrix : (FF)V
        //   4945: aload #154
        //   4947: aload #38
        //   4949: invokevirtual showText : (Ljava/lang/String;)V
        //   4952: aload #154
        //   4954: invokevirtual endText : ()V
        //   4957: aload #154
        //   4959: invokevirtual beginText : ()V
        //   4962: aload #154
        //   4964: ldc 'Times-Roman'
        //   4966: ldc 'Cp1257'
        //   4968: iconst_1
        //   4969: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   4972: ldc 10.0
        //   4974: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   4977: aload #154
        //   4979: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   4982: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   4985: aload #154
        //   4987: ldc 80.0
        //   4989: ldc_w 590.0
        //   4992: invokevirtual setTextMatrix : (FF)V
        //   4995: aload #154
        //   4997: aload #41
        //   4999: invokevirtual showText : (Ljava/lang/String;)V
        //   5002: aload #154
        //   5004: invokevirtual endText : ()V
        //   5007: aload #154
        //   5009: invokevirtual beginText : ()V
        //   5012: aload #154
        //   5014: ldc 'Times-Roman'
        //   5016: ldc 'Cp1257'
        //   5018: iconst_1
        //   5019: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5022: ldc 10.0
        //   5024: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5027: aload #154
        //   5029: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5032: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5035: aload #154
        //   5037: ldc_w 230.0
        //   5040: ldc_w 590.0
        //   5043: invokevirtual setTextMatrix : (FF)V
        //   5046: aload #154
        //   5048: ldc ''
        //   5050: invokevirtual showText : (Ljava/lang/String;)V
        //   5053: aload #154
        //   5055: invokevirtual endText : ()V
        //   5058: aload #154
        //   5060: invokevirtual beginText : ()V
        //   5063: aload #154
        //   5065: ldc 'Times-Roman'
        //   5067: ldc 'Cp1257'
        //   5069: iconst_1
        //   5070: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5073: ldc 10.0
        //   5075: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5078: aload #154
        //   5080: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5083: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5086: aload #154
        //   5088: ldc 60.0
        //   5090: ldc 500.0
        //   5092: invokevirtual setTextMatrix : (FF)V
        //   5095: aload #154
        //   5097: aload #139
        //   5099: invokevirtual showText : (Ljava/lang/String;)V
        //   5102: aload #154
        //   5104: invokevirtual endText : ()V
        //   5107: iload #68
        //   5109: iconst_1
        //   5110: if_icmpne -> 5171
        //   5113: iload #70
        //   5115: ifne -> 5171
        //   5118: aload #154
        //   5120: invokevirtual beginText : ()V
        //   5123: aload #154
        //   5125: ldc 'Times-Roman'
        //   5127: ldc 'Cp1257'
        //   5129: iconst_1
        //   5130: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5133: ldc 10.0
        //   5135: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5138: aload #154
        //   5140: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5143: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5146: aload #154
        //   5148: ldc 440.0
        //   5150: ldc 460.0
        //   5152: invokevirtual setTextMatrix : (FF)V
        //   5155: aload #154
        //   5157: ldc_w 'YES (WCP) and NO (MVA)'
        //   5160: invokevirtual showText : (Ljava/lang/String;)V
        //   5163: aload #154
        //   5165: invokevirtual endText : ()V
        //   5168: goto -> 5360
        //   5171: iload #68
        //   5173: ifne -> 5235
        //   5176: iload #70
        //   5178: iconst_1
        //   5179: if_icmpne -> 5235
        //   5182: aload #154
        //   5184: invokevirtual beginText : ()V
        //   5187: aload #154
        //   5189: ldc 'Times-Roman'
        //   5191: ldc 'Cp1257'
        //   5193: iconst_1
        //   5194: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5197: ldc 10.0
        //   5199: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5202: aload #154
        //   5204: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5207: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5210: aload #154
        //   5212: ldc 440.0
        //   5214: ldc 460.0
        //   5216: invokevirtual setTextMatrix : (FF)V
        //   5219: aload #154
        //   5221: ldc_w 'NO (WCP) and YES (MVA)'
        //   5224: invokevirtual showText : (Ljava/lang/String;)V
        //   5227: aload #154
        //   5229: invokevirtual endText : ()V
        //   5232: goto -> 5360
        //   5235: iload #68
        //   5237: ifne -> 5298
        //   5240: iload #70
        //   5242: ifne -> 5298
        //   5245: aload #154
        //   5247: invokevirtual beginText : ()V
        //   5250: aload #154
        //   5252: ldc 'Times-Roman'
        //   5254: ldc 'Cp1257'
        //   5256: iconst_1
        //   5257: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5260: ldc 10.0
        //   5262: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5265: aload #154
        //   5267: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5270: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5273: aload #154
        //   5275: ldc 440.0
        //   5277: ldc 460.0
        //   5279: invokevirtual setTextMatrix : (FF)V
        //   5282: aload #154
        //   5284: ldc_w 'NO (WCP) and NO (MVA)'
        //   5287: invokevirtual showText : (Ljava/lang/String;)V
        //   5290: aload #154
        //   5292: invokevirtual endText : ()V
        //   5295: goto -> 5360
        //   5298: iload #68
        //   5300: iconst_1
        //   5301: if_icmpne -> 5360
        //   5304: iload #70
        //   5306: iconst_1
        //   5307: if_icmpne -> 5360
        //   5310: aload #154
        //   5312: invokevirtual beginText : ()V
        //   5315: aload #154
        //   5317: ldc 'Times-Roman'
        //   5319: ldc 'Cp1257'
        //   5321: iconst_1
        //   5322: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5325: ldc 10.0
        //   5327: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5330: aload #154
        //   5332: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5335: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5338: aload #154
        //   5340: ldc 440.0
        //   5342: ldc 460.0
        //   5344: invokevirtual setTextMatrix : (FF)V
        //   5347: aload #154
        //   5349: ldc_w 'YES (WCP) and YES (MVA)'
        //   5352: invokevirtual showText : (Ljava/lang/String;)V
        //   5355: aload #154
        //   5357: invokevirtual endText : ()V
        //   5360: aload #154
        //   5362: invokevirtual beginText : ()V
        //   5365: aload #154
        //   5367: ldc 'Times-Roman'
        //   5369: ldc 'Cp1257'
        //   5371: iconst_1
        //   5372: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5375: ldc 10.0
        //   5377: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5380: aload #154
        //   5382: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5385: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5388: aload #154
        //   5390: ldc 180.0
        //   5392: ldc 440.0
        //   5394: invokevirtual setTextMatrix : (FF)V
        //   5397: aload #154
        //   5399: aload #75
        //   5401: invokevirtual showText : (Ljava/lang/String;)V
        //   5404: aload #154
        //   5406: invokevirtual endText : ()V
        //   5409: aload #154
        //   5411: invokevirtual beginText : ()V
        //   5414: aload #154
        //   5416: ldc 'Times-Roman'
        //   5418: ldc 'Cp1257'
        //   5420: iconst_1
        //   5421: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5424: ldc 10.0
        //   5426: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5429: aload #154
        //   5431: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5434: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5437: aload #154
        //   5439: ldc 80.0
        //   5441: ldc 400.0
        //   5443: invokevirtual setTextMatrix : (FF)V
        //   5446: aload #154
        //   5448: ldc ''
        //   5450: invokevirtual showText : (Ljava/lang/String;)V
        //   5453: aload #154
        //   5455: invokevirtual endText : ()V
        //   5458: aload #154
        //   5460: invokevirtual beginText : ()V
        //   5463: aload #154
        //   5465: ldc 'Times-Roman'
        //   5467: ldc 'Cp1257'
        //   5469: iconst_1
        //   5470: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5473: ldc 10.0
        //   5475: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5478: aload #154
        //   5480: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5483: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5486: aload #154
        //   5488: ldc 180.0
        //   5490: ldc 400.0
        //   5492: invokevirtual setTextMatrix : (FF)V
        //   5495: aload #154
        //   5497: aload #85
        //   5499: invokevirtual showText : (Ljava/lang/String;)V
        //   5502: aload #154
        //   5504: invokevirtual endText : ()V
        //   5507: aload #154
        //   5509: invokevirtual beginText : ()V
        //   5512: aload #154
        //   5514: ldc 'Times-Roman'
        //   5516: ldc 'Cp1257'
        //   5518: iconst_1
        //   5519: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5522: ldc 10.0
        //   5524: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5527: aload #154
        //   5529: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5532: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5535: aload #154
        //   5537: ldc 330.0
        //   5539: ldc 400.0
        //   5541: invokevirtual setTextMatrix : (FF)V
        //   5544: aload #154
        //   5546: aload #78
        //   5548: invokevirtual showText : (Ljava/lang/String;)V
        //   5551: aload #154
        //   5553: invokevirtual endText : ()V
        //   5556: aload #154
        //   5558: invokevirtual beginText : ()V
        //   5561: aload #154
        //   5563: ldc 'Times-Roman'
        //   5565: ldc 'Cp1257'
        //   5567: iconst_1
        //   5568: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5571: ldc 10.0
        //   5573: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5576: aload #154
        //   5578: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5581: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5584: aload #154
        //   5586: ldc 470.0
        //   5588: ldc 400.0
        //   5590: invokevirtual setTextMatrix : (FF)V
        //   5593: aload #154
        //   5595: aload #86
        //   5597: invokevirtual showText : (Ljava/lang/String;)V
        //   5600: aload #154
        //   5602: invokevirtual endText : ()V
        //   5605: aload #154
        //   5607: invokevirtual beginText : ()V
        //   5610: aload #154
        //   5612: ldc 'Times-Roman'
        //   5614: ldc 'Cp1257'
        //   5616: iconst_1
        //   5617: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5620: ldc 10.0
        //   5622: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5625: aload #154
        //   5627: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5630: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5633: aload #154
        //   5635: ldc 80.0
        //   5637: ldc_w 370.0
        //   5640: invokevirtual setTextMatrix : (FF)V
        //   5643: aload #154
        //   5645: aload #73
        //   5647: invokevirtual showText : (Ljava/lang/String;)V
        //   5650: aload #154
        //   5652: invokevirtual endText : ()V
        //   5655: aload #154
        //   5657: invokevirtual beginText : ()V
        //   5660: aload #154
        //   5662: ldc 'Times-Roman'
        //   5664: ldc 'Cp1257'
        //   5666: iconst_1
        //   5667: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5670: ldc 10.0
        //   5672: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5675: aload #154
        //   5677: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5680: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5683: aload #154
        //   5685: ldc 240.0
        //   5687: ldc_w 370.0
        //   5690: invokevirtual setTextMatrix : (FF)V
        //   5693: aload #154
        //   5695: aload #74
        //   5697: invokevirtual showText : (Ljava/lang/String;)V
        //   5700: aload #154
        //   5702: invokevirtual endText : ()V
        //   5705: aload #154
        //   5707: invokevirtual beginText : ()V
        //   5710: aload #154
        //   5712: ldc 'Times-Roman'
        //   5714: ldc 'Cp1257'
        //   5716: iconst_1
        //   5717: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5720: ldc 10.0
        //   5722: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5725: aload #154
        //   5727: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5730: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5733: aload #154
        //   5735: ldc 390.0
        //   5737: ldc_w 370.0
        //   5740: invokevirtual setTextMatrix : (FF)V
        //   5743: aload #154
        //   5745: aload #79
        //   5747: invokevirtual showText : (Ljava/lang/String;)V
        //   5750: aload #154
        //   5752: invokevirtual endText : ()V
        //   5755: aload #154
        //   5757: invokevirtual beginText : ()V
        //   5760: aload #154
        //   5762: ldc 'Times-Roman'
        //   5764: ldc 'Cp1257'
        //   5766: iconst_1
        //   5767: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5770: ldc 10.0
        //   5772: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5775: aload #154
        //   5777: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5780: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5783: aload #154
        //   5785: ldc 480.0
        //   5787: ldc_w 370.0
        //   5790: invokevirtual setTextMatrix : (FF)V
        //   5793: aload #154
        //   5795: ldc ''
        //   5797: invokevirtual showText : (Ljava/lang/String;)V
        //   5800: aload #154
        //   5802: invokevirtual endText : ()V
        //   5805: aload #154
        //   5807: invokevirtual beginText : ()V
        //   5810: aload #154
        //   5812: ldc 'Times-Roman'
        //   5814: ldc 'Cp1257'
        //   5816: iconst_1
        //   5817: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5820: ldc 10.0
        //   5822: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5825: aload #154
        //   5827: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5830: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5833: aload #154
        //   5835: ldc_w 315.0
        //   5838: ldc 340.0
        //   5840: invokevirtual setTextMatrix : (FF)V
        //   5843: aload #154
        //   5845: aload #84
        //   5847: invokevirtual showText : (Ljava/lang/String;)V
        //   5850: aload #154
        //   5852: invokevirtual endText : ()V
        //   5855: aload #154
        //   5857: invokevirtual beginText : ()V
        //   5860: aload #154
        //   5862: ldc 'Times-Roman'
        //   5864: ldc 'Cp1257'
        //   5866: iconst_1
        //   5867: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5870: ldc 10.0
        //   5872: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5875: aload #154
        //   5877: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5880: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5883: aload #154
        //   5885: ldc 70.0
        //   5887: ldc_w 310.0
        //   5890: invokevirtual setTextMatrix : (FF)V
        //   5893: aload #154
        //   5895: ldc ''
        //   5897: invokevirtual showText : (Ljava/lang/String;)V
        //   5900: aload #154
        //   5902: invokevirtual endText : ()V
        //   5905: aload #154
        //   5907: invokevirtual beginText : ()V
        //   5910: aload #154
        //   5912: ldc 'Times-Roman'
        //   5914: ldc 'Cp1257'
        //   5916: iconst_1
        //   5917: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5920: ldc 10.0
        //   5922: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5925: aload #154
        //   5927: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5930: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5933: aload #154
        //   5935: ldc_w 185.0
        //   5938: ldc_w 310.0
        //   5941: invokevirtual setTextMatrix : (FF)V
        //   5944: aload #154
        //   5946: aload #85
        //   5948: invokevirtual showText : (Ljava/lang/String;)V
        //   5951: aload #154
        //   5953: invokevirtual endText : ()V
        //   5956: aload #154
        //   5958: invokevirtual beginText : ()V
        //   5961: aload #154
        //   5963: ldc 'Times-Roman'
        //   5965: ldc 'Cp1257'
        //   5967: iconst_1
        //   5968: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   5971: ldc 10.0
        //   5973: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   5976: aload #154
        //   5978: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   5981: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   5984: aload #154
        //   5986: ldc 350.0
        //   5988: ldc_w 310.0
        //   5991: invokevirtual setTextMatrix : (FF)V
        //   5994: aload #154
        //   5996: aload #78
        //   5998: invokevirtual showText : (Ljava/lang/String;)V
        //   6001: aload #154
        //   6003: invokevirtual endText : ()V
        //   6006: aload #154
        //   6008: invokevirtual beginText : ()V
        //   6011: aload #154
        //   6013: ldc 'Times-Roman'
        //   6015: ldc 'Cp1257'
        //   6017: iconst_1
        //   6018: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6021: ldc 10.0
        //   6023: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6026: aload #154
        //   6028: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6031: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6034: aload #154
        //   6036: ldc 460.0
        //   6038: ldc_w 310.0
        //   6041: invokevirtual setTextMatrix : (FF)V
        //   6044: aload #154
        //   6046: aload #86
        //   6048: invokevirtual showText : (Ljava/lang/String;)V
        //   6051: aload #154
        //   6053: invokevirtual endText : ()V
        //   6056: aload #154
        //   6058: invokevirtual beginText : ()V
        //   6061: aload #154
        //   6063: ldc 'Times-Roman'
        //   6065: ldc 'Cp1257'
        //   6067: iconst_1
        //   6068: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6071: ldc 10.0
        //   6073: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6076: aload #154
        //   6078: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6081: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6084: aload #154
        //   6086: ldc 60.0
        //   6088: ldc 280.0
        //   6090: invokevirtual setTextMatrix : (FF)V
        //   6093: aload #154
        //   6095: aload #87
        //   6097: invokevirtual showText : (Ljava/lang/String;)V
        //   6100: aload #154
        //   6102: invokevirtual endText : ()V
        //   6105: aload #154
        //   6107: invokevirtual beginText : ()V
        //   6110: aload #154
        //   6112: ldc 'Times-Roman'
        //   6114: ldc 'Cp1257'
        //   6116: iconst_1
        //   6117: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6120: ldc 10.0
        //   6122: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6125: aload #154
        //   6127: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6130: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6133: aload #154
        //   6135: ldc_w 230.0
        //   6138: ldc 280.0
        //   6140: invokevirtual setTextMatrix : (FF)V
        //   6143: aload #154
        //   6145: aload #88
        //   6147: invokevirtual showText : (Ljava/lang/String;)V
        //   6150: aload #154
        //   6152: invokevirtual endText : ()V
        //   6155: aload #154
        //   6157: invokevirtual beginText : ()V
        //   6160: aload #154
        //   6162: ldc 'Times-Roman'
        //   6164: ldc 'Cp1257'
        //   6166: iconst_1
        //   6167: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6170: ldc 10.0
        //   6172: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6175: aload #154
        //   6177: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6180: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6183: aload #154
        //   6185: ldc 360.0
        //   6187: ldc 280.0
        //   6189: invokevirtual setTextMatrix : (FF)V
        //   6192: aload #154
        //   6194: aload #89
        //   6196: invokevirtual showText : (Ljava/lang/String;)V
        //   6199: aload #154
        //   6201: invokevirtual endText : ()V
        //   6204: aload #154
        //   6206: invokevirtual beginText : ()V
        //   6209: aload #154
        //   6211: ldc 'Times-Roman'
        //   6213: ldc 'Cp1257'
        //   6215: iconst_1
        //   6216: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6219: ldc 10.0
        //   6221: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6224: aload #154
        //   6226: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6229: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6232: aload #154
        //   6234: ldc 60.0
        //   6236: ldc_w 90.0
        //   6239: invokevirtual setTextMatrix : (FF)V
        //   6242: aload #154
        //   6244: aload #90
        //   6246: invokevirtual showText : (Ljava/lang/String;)V
        //   6249: aload #154
        //   6251: invokevirtual endText : ()V
        //   6254: aload #154
        //   6256: invokevirtual beginText : ()V
        //   6259: aload #154
        //   6261: ldc 'Times-Roman'
        //   6263: ldc 'Cp1257'
        //   6265: iconst_1
        //   6266: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6269: ldc 10.0
        //   6271: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6274: aload #154
        //   6276: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6279: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6282: aload #154
        //   6284: ldc 285.0
        //   6286: ldc_w 90.0
        //   6289: invokevirtual setTextMatrix : (FF)V
        //   6292: aload #154
        //   6294: aload #91
        //   6296: invokevirtual showText : (Ljava/lang/String;)V
        //   6299: aload #154
        //   6301: invokevirtual endText : ()V
        //   6304: aload #154
        //   6306: invokevirtual beginText : ()V
        //   6309: aload #154
        //   6311: ldc 'Times-Roman'
        //   6313: ldc 'Cp1257'
        //   6315: iconst_1
        //   6316: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6319: ldc 10.0
        //   6321: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6324: aload #154
        //   6326: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6329: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6332: aload #154
        //   6334: ldc 395.0
        //   6336: ldc_w 90.0
        //   6339: invokevirtual setTextMatrix : (FF)V
        //   6342: aload #154
        //   6344: ldc ''
        //   6346: invokevirtual showText : (Ljava/lang/String;)V
        //   6349: aload #154
        //   6351: invokevirtual endText : ()V
        //   6354: aload #154
        //   6356: invokevirtual beginText : ()V
        //   6359: aload #154
        //   6361: ldc 'Times-Roman'
        //   6363: ldc 'Cp1257'
        //   6365: iconst_1
        //   6366: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6369: ldc 10.0
        //   6371: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6374: aload #154
        //   6376: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6379: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6382: aload #154
        //   6384: ldc 500.0
        //   6386: ldc_w 90.0
        //   6389: invokevirtual setTextMatrix : (FF)V
        //   6392: aload #154
        //   6394: aload #92
        //   6396: invokevirtual showText : (Ljava/lang/String;)V
        //   6399: aload #154
        //   6401: invokevirtual endText : ()V
        //   6404: iload #153
        //   6406: iconst_2
        //   6407: if_icmpne -> 6794
        //   6410: aload #149
        //   6412: iload #153
        //   6414: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   6417: astore #154
        //   6419: aload #154
        //   6421: invokevirtual beginText : ()V
        //   6424: aload #154
        //   6426: ldc 'Times-Roman'
        //   6428: ldc 'Cp1257'
        //   6430: iconst_1
        //   6431: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6434: ldc 8.0
        //   6436: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6439: aload #154
        //   6441: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6444: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6447: aload #154
        //   6449: ldc 60.0
        //   6451: ldc 80.0
        //   6453: invokevirtual setTextMatrix : (FF)V
        //   6456: aload #154
        //   6458: new java/lang/StringBuilder
        //   6461: dup
        //   6462: invokespecial <init> : ()V
        //   6465: aload #24
        //   6467: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6470: ldc ' , '
        //   6472: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6475: aload #22
        //   6477: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6480: ldc ' '
        //   6482: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6485: aload #25
        //   6487: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6490: invokevirtual toString : ()Ljava/lang/String;
        //   6493: invokevirtual showText : (Ljava/lang/String;)V
        //   6496: aload #154
        //   6498: invokevirtual endText : ()V
        //   6501: aload #154
        //   6503: invokevirtual beginText : ()V
        //   6506: aload #154
        //   6508: ldc 'Times-Roman'
        //   6510: ldc 'Cp1257'
        //   6512: iconst_1
        //   6513: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6516: ldc 8.0
        //   6518: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6521: aload #154
        //   6523: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6526: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6529: aload #154
        //   6531: ldc 60.0
        //   6533: ldc 70.0
        //   6535: invokevirtual setTextMatrix : (FF)V
        //   6538: aload #154
        //   6540: new java/lang/StringBuilder
        //   6543: dup
        //   6544: invokespecial <init> : ()V
        //   6547: aload #45
        //   6549: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6552: ldc '        Sex:'
        //   6554: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6557: aload #29
        //   6559: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6562: invokevirtual toString : ()Ljava/lang/String;
        //   6565: invokevirtual showText : (Ljava/lang/String;)V
        //   6568: aload #154
        //   6570: invokevirtual endText : ()V
        //   6573: aload #154
        //   6575: invokevirtual beginText : ()V
        //   6578: aload #154
        //   6580: ldc 'Times-Roman'
        //   6582: ldc 'Cp1257'
        //   6584: iconst_1
        //   6585: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6588: ldc 8.0
        //   6590: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6593: aload #154
        //   6595: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6598: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6601: aload #154
        //   6603: ldc 60.0
        //   6605: ldc 60.0
        //   6607: invokevirtual setTextMatrix : (FF)V
        //   6610: aload #154
        //   6612: new java/lang/StringBuilder
        //   6615: dup
        //   6616: invokespecial <init> : ()V
        //   6619: ldc 'DOB: '
        //   6621: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6624: aload #27
        //   6626: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6629: ldc '        Age:'
        //   6631: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6634: aload #28
        //   6636: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6639: invokevirtual toString : ()Ljava/lang/String;
        //   6642: invokevirtual showText : (Ljava/lang/String;)V
        //   6645: aload #154
        //   6647: invokevirtual endText : ()V
        //   6650: aload #154
        //   6652: invokevirtual beginText : ()V
        //   6655: aload #154
        //   6657: ldc 'Times-Roman'
        //   6659: ldc 'Cp1257'
        //   6661: iconst_1
        //   6662: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6665: ldc 8.0
        //   6667: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6670: aload #154
        //   6672: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6675: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6678: aload #154
        //   6680: ldc 60.0
        //   6682: ldc 50.0
        //   6684: invokevirtual setTextMatrix : (FF)V
        //   6687: aload #154
        //   6689: new java/lang/StringBuilder
        //   6692: dup
        //   6693: invokespecial <init> : ()V
        //   6696: ldc 'MRN: '
        //   6698: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6701: aload #43
        //   6703: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6706: ldc '        DOS: '
        //   6708: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6711: aload #46
        //   6713: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6716: invokevirtual toString : ()Ljava/lang/String;
        //   6719: invokevirtual showText : (Ljava/lang/String;)V
        //   6722: aload #154
        //   6724: invokevirtual endText : ()V
        //   6727: aload #154
        //   6729: invokevirtual beginText : ()V
        //   6732: aload #154
        //   6734: ldc 'Times-Roman'
        //   6736: ldc 'Cp1257'
        //   6738: iconst_1
        //   6739: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6742: ldc 8.0
        //   6744: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6747: aload #154
        //   6749: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6752: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6755: aload #154
        //   6757: ldc 60.0
        //   6759: ldc 40.0
        //   6761: invokevirtual setTextMatrix : (FF)V
        //   6764: aload #154
        //   6766: new java/lang/StringBuilder
        //   6769: dup
        //   6770: invokespecial <init> : ()V
        //   6773: ldc 'Dr. '
        //   6775: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6778: aload #48
        //   6780: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6783: invokevirtual toString : ()Ljava/lang/String;
        //   6786: invokevirtual showText : (Ljava/lang/String;)V
        //   6789: aload #154
        //   6791: invokevirtual endText : ()V
        //   6794: iload #153
        //   6796: iconst_3
        //   6797: if_icmpne -> 7184
        //   6800: aload #149
        //   6802: iload #153
        //   6804: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   6807: astore #154
        //   6809: aload #154
        //   6811: invokevirtual beginText : ()V
        //   6814: aload #154
        //   6816: ldc 'Times-Roman'
        //   6818: ldc 'Cp1257'
        //   6820: iconst_1
        //   6821: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6824: ldc 8.0
        //   6826: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6829: aload #154
        //   6831: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6834: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6837: aload #154
        //   6839: ldc 60.0
        //   6841: ldc 80.0
        //   6843: invokevirtual setTextMatrix : (FF)V
        //   6846: aload #154
        //   6848: new java/lang/StringBuilder
        //   6851: dup
        //   6852: invokespecial <init> : ()V
        //   6855: aload #24
        //   6857: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6860: ldc ' , '
        //   6862: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6865: aload #22
        //   6867: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6870: ldc ' '
        //   6872: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6875: aload #25
        //   6877: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6880: invokevirtual toString : ()Ljava/lang/String;
        //   6883: invokevirtual showText : (Ljava/lang/String;)V
        //   6886: aload #154
        //   6888: invokevirtual endText : ()V
        //   6891: aload #154
        //   6893: invokevirtual beginText : ()V
        //   6896: aload #154
        //   6898: ldc 'Times-Roman'
        //   6900: ldc 'Cp1257'
        //   6902: iconst_1
        //   6903: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6906: ldc 8.0
        //   6908: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6911: aload #154
        //   6913: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6916: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6919: aload #154
        //   6921: ldc 60.0
        //   6923: ldc 70.0
        //   6925: invokevirtual setTextMatrix : (FF)V
        //   6928: aload #154
        //   6930: new java/lang/StringBuilder
        //   6933: dup
        //   6934: invokespecial <init> : ()V
        //   6937: aload #45
        //   6939: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6942: ldc '        Sex:'
        //   6944: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6947: aload #29
        //   6949: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   6952: invokevirtual toString : ()Ljava/lang/String;
        //   6955: invokevirtual showText : (Ljava/lang/String;)V
        //   6958: aload #154
        //   6960: invokevirtual endText : ()V
        //   6963: aload #154
        //   6965: invokevirtual beginText : ()V
        //   6968: aload #154
        //   6970: ldc 'Times-Roman'
        //   6972: ldc 'Cp1257'
        //   6974: iconst_1
        //   6975: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   6978: ldc 8.0
        //   6980: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   6983: aload #154
        //   6985: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   6988: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   6991: aload #154
        //   6993: ldc 60.0
        //   6995: ldc 60.0
        //   6997: invokevirtual setTextMatrix : (FF)V
        //   7000: aload #154
        //   7002: new java/lang/StringBuilder
        //   7005: dup
        //   7006: invokespecial <init> : ()V
        //   7009: ldc 'DOB: '
        //   7011: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7014: aload #27
        //   7016: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7019: ldc '        Age:'
        //   7021: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7024: aload #28
        //   7026: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7029: invokevirtual toString : ()Ljava/lang/String;
        //   7032: invokevirtual showText : (Ljava/lang/String;)V
        //   7035: aload #154
        //   7037: invokevirtual endText : ()V
        //   7040: aload #154
        //   7042: invokevirtual beginText : ()V
        //   7045: aload #154
        //   7047: ldc 'Times-Roman'
        //   7049: ldc 'Cp1257'
        //   7051: iconst_1
        //   7052: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7055: ldc 8.0
        //   7057: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7060: aload #154
        //   7062: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7065: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7068: aload #154
        //   7070: ldc 60.0
        //   7072: ldc 50.0
        //   7074: invokevirtual setTextMatrix : (FF)V
        //   7077: aload #154
        //   7079: new java/lang/StringBuilder
        //   7082: dup
        //   7083: invokespecial <init> : ()V
        //   7086: ldc 'MRN: '
        //   7088: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7091: aload #43
        //   7093: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7096: ldc '        DOS: '
        //   7098: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7101: aload #46
        //   7103: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7106: invokevirtual toString : ()Ljava/lang/String;
        //   7109: invokevirtual showText : (Ljava/lang/String;)V
        //   7112: aload #154
        //   7114: invokevirtual endText : ()V
        //   7117: aload #154
        //   7119: invokevirtual beginText : ()V
        //   7122: aload #154
        //   7124: ldc 'Times-Roman'
        //   7126: ldc 'Cp1257'
        //   7128: iconst_1
        //   7129: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7132: ldc 8.0
        //   7134: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7137: aload #154
        //   7139: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7142: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7145: aload #154
        //   7147: ldc 60.0
        //   7149: ldc 40.0
        //   7151: invokevirtual setTextMatrix : (FF)V
        //   7154: aload #154
        //   7156: new java/lang/StringBuilder
        //   7159: dup
        //   7160: invokespecial <init> : ()V
        //   7163: ldc 'Dr. '
        //   7165: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7168: aload #48
        //   7170: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7173: invokevirtual toString : ()Ljava/lang/String;
        //   7176: invokevirtual showText : (Ljava/lang/String;)V
        //   7179: aload #154
        //   7181: invokevirtual endText : ()V
        //   7184: iload #153
        //   7186: iconst_4
        //   7187: if_icmpne -> 7724
        //   7190: aload #149
        //   7192: iload #153
        //   7194: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7197: astore #154
        //   7199: aload #154
        //   7201: invokevirtual beginText : ()V
        //   7204: aload #154
        //   7206: ldc 'Times-Roman'
        //   7208: ldc 'Cp1257'
        //   7210: iconst_1
        //   7211: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7214: ldc 10.0
        //   7216: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7219: aload #154
        //   7221: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7224: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7227: aload #154
        //   7229: ldc_w 100.0
        //   7232: ldc_w 140.0
        //   7235: invokevirtual setTextMatrix : (FF)V
        //   7238: aload #154
        //   7240: aload #15
        //   7242: invokevirtual showText : (Ljava/lang/String;)V
        //   7245: aload #154
        //   7247: invokevirtual endText : ()V
        //   7250: aload #154
        //   7252: invokevirtual beginText : ()V
        //   7255: aload #154
        //   7257: ldc 'Times-Roman'
        //   7259: ldc 'Cp1257'
        //   7261: iconst_1
        //   7262: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7265: ldc 10.0
        //   7267: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7270: aload #154
        //   7272: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7275: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7278: aload #154
        //   7280: ldc 400.0
        //   7282: ldc_w 140.0
        //   7285: invokevirtual setTextMatrix : (FF)V
        //   7288: aload #154
        //   7290: aload #15
        //   7292: invokevirtual showText : (Ljava/lang/String;)V
        //   7295: aload #154
        //   7297: invokevirtual endText : ()V
        //   7300: aload #154
        //   7302: invokevirtual beginText : ()V
        //   7305: aload #154
        //   7307: ldc 'Times-Roman'
        //   7309: ldc 'Cp1257'
        //   7311: iconst_1
        //   7312: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7315: ldc 10.0
        //   7317: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7320: aload #154
        //   7322: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7325: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7328: aload #154
        //   7330: ldc 440.0
        //   7332: ldc 105.0
        //   7334: invokevirtual setTextMatrix : (FF)V
        //   7337: aload #154
        //   7339: ldc ''
        //   7341: invokevirtual showText : (Ljava/lang/String;)V
        //   7344: aload #154
        //   7346: invokevirtual endText : ()V
        //   7349: aload #154
        //   7351: invokevirtual beginText : ()V
        //   7354: aload #154
        //   7356: ldc 'Times-Roman'
        //   7358: ldc 'Cp1257'
        //   7360: iconst_1
        //   7361: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7364: ldc 8.0
        //   7366: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7369: aload #154
        //   7371: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7374: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7377: aload #154
        //   7379: ldc 60.0
        //   7381: ldc 80.0
        //   7383: invokevirtual setTextMatrix : (FF)V
        //   7386: aload #154
        //   7388: new java/lang/StringBuilder
        //   7391: dup
        //   7392: invokespecial <init> : ()V
        //   7395: aload #24
        //   7397: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7400: ldc ' , '
        //   7402: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7405: aload #22
        //   7407: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7410: ldc ' '
        //   7412: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7415: aload #25
        //   7417: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7420: invokevirtual toString : ()Ljava/lang/String;
        //   7423: invokevirtual showText : (Ljava/lang/String;)V
        //   7426: aload #154
        //   7428: invokevirtual endText : ()V
        //   7431: aload #154
        //   7433: invokevirtual beginText : ()V
        //   7436: aload #154
        //   7438: ldc 'Times-Roman'
        //   7440: ldc 'Cp1257'
        //   7442: iconst_1
        //   7443: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7446: ldc 8.0
        //   7448: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7451: aload #154
        //   7453: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7456: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7459: aload #154
        //   7461: ldc 60.0
        //   7463: ldc 70.0
        //   7465: invokevirtual setTextMatrix : (FF)V
        //   7468: aload #154
        //   7470: new java/lang/StringBuilder
        //   7473: dup
        //   7474: invokespecial <init> : ()V
        //   7477: aload #45
        //   7479: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7482: ldc '        Sex:'
        //   7484: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7487: aload #29
        //   7489: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7492: invokevirtual toString : ()Ljava/lang/String;
        //   7495: invokevirtual showText : (Ljava/lang/String;)V
        //   7498: aload #154
        //   7500: invokevirtual endText : ()V
        //   7503: aload #154
        //   7505: invokevirtual beginText : ()V
        //   7508: aload #154
        //   7510: ldc 'Times-Roman'
        //   7512: ldc 'Cp1257'
        //   7514: iconst_1
        //   7515: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7518: ldc 8.0
        //   7520: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7523: aload #154
        //   7525: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7528: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7531: aload #154
        //   7533: ldc 60.0
        //   7535: ldc 60.0
        //   7537: invokevirtual setTextMatrix : (FF)V
        //   7540: aload #154
        //   7542: new java/lang/StringBuilder
        //   7545: dup
        //   7546: invokespecial <init> : ()V
        //   7549: ldc 'DOB: '
        //   7551: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7554: aload #27
        //   7556: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7559: ldc '        Age:'
        //   7561: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7564: aload #28
        //   7566: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7569: invokevirtual toString : ()Ljava/lang/String;
        //   7572: invokevirtual showText : (Ljava/lang/String;)V
        //   7575: aload #154
        //   7577: invokevirtual endText : ()V
        //   7580: aload #154
        //   7582: invokevirtual beginText : ()V
        //   7585: aload #154
        //   7587: ldc 'Times-Roman'
        //   7589: ldc 'Cp1257'
        //   7591: iconst_1
        //   7592: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7595: ldc 8.0
        //   7597: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7600: aload #154
        //   7602: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7605: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7608: aload #154
        //   7610: ldc 60.0
        //   7612: ldc 50.0
        //   7614: invokevirtual setTextMatrix : (FF)V
        //   7617: aload #154
        //   7619: new java/lang/StringBuilder
        //   7622: dup
        //   7623: invokespecial <init> : ()V
        //   7626: ldc 'MRN: '
        //   7628: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7631: aload #43
        //   7633: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7636: ldc '        DOS: '
        //   7638: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7641: aload #46
        //   7643: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7646: invokevirtual toString : ()Ljava/lang/String;
        //   7649: invokevirtual showText : (Ljava/lang/String;)V
        //   7652: aload #154
        //   7654: invokevirtual endText : ()V
        //   7657: aload #154
        //   7659: invokevirtual beginText : ()V
        //   7662: aload #154
        //   7664: ldc 'Times-Roman'
        //   7666: ldc 'Cp1257'
        //   7668: iconst_1
        //   7669: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7672: ldc 8.0
        //   7674: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7677: aload #154
        //   7679: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7682: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7685: aload #154
        //   7687: ldc 60.0
        //   7689: ldc 40.0
        //   7691: invokevirtual setTextMatrix : (FF)V
        //   7694: aload #154
        //   7696: new java/lang/StringBuilder
        //   7699: dup
        //   7700: invokespecial <init> : ()V
        //   7703: ldc 'Dr. '
        //   7705: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7708: aload #48
        //   7710: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7713: invokevirtual toString : ()Ljava/lang/String;
        //   7716: invokevirtual showText : (Ljava/lang/String;)V
        //   7719: aload #154
        //   7721: invokevirtual endText : ()V
        //   7724: iload #153
        //   7726: iconst_5
        //   7727: if_icmpne -> 7920
        //   7730: aload #149
        //   7732: iload #153
        //   7734: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7737: astore #154
        //   7739: aload #154
        //   7741: invokevirtual beginText : ()V
        //   7744: aload #154
        //   7746: ldc 'Times-Roman'
        //   7748: ldc 'Cp1257'
        //   7750: iconst_1
        //   7751: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7754: ldc 10.0
        //   7756: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7759: aload #154
        //   7761: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7764: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7767: aload #154
        //   7769: ldc_w 425.0
        //   7772: ldc 275.0
        //   7774: invokevirtual setTextMatrix : (FF)V
        //   7777: aload #154
        //   7779: new java/lang/StringBuilder
        //   7782: dup
        //   7783: invokespecial <init> : ()V
        //   7786: aload #22
        //   7788: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7791: ldc ' '
        //   7793: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7796: aload #25
        //   7798: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7801: ldc ' '
        //   7803: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7806: aload #24
        //   7808: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   7811: invokevirtual toString : ()Ljava/lang/String;
        //   7814: invokevirtual showText : (Ljava/lang/String;)V
        //   7817: aload #154
        //   7819: invokevirtual endText : ()V
        //   7822: aload #154
        //   7824: invokevirtual beginText : ()V
        //   7827: aload #154
        //   7829: ldc 'Times-Roman'
        //   7831: ldc 'Cp1257'
        //   7833: iconst_1
        //   7834: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7837: ldc 10.0
        //   7839: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7842: aload #154
        //   7844: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7847: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7850: aload #154
        //   7852: ldc 440.0
        //   7854: ldc 240.0
        //   7856: invokevirtual setTextMatrix : (FF)V
        //   7859: aload #154
        //   7861: aload #15
        //   7863: invokevirtual showText : (Ljava/lang/String;)V
        //   7866: aload #154
        //   7868: invokevirtual endText : ()V
        //   7871: aload #154
        //   7873: invokevirtual beginText : ()V
        //   7876: aload #154
        //   7878: ldc 'Times-Roman'
        //   7880: ldc 'Cp1257'
        //   7882: iconst_1
        //   7883: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7886: ldc 10.0
        //   7888: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7891: aload #154
        //   7893: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7896: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7899: aload #154
        //   7901: ldc 440.0
        //   7903: ldc 200.0
        //   7905: invokevirtual setTextMatrix : (FF)V
        //   7908: aload #154
        //   7910: aload #15
        //   7912: invokevirtual showText : (Ljava/lang/String;)V
        //   7915: aload #154
        //   7917: invokevirtual endText : ()V
        //   7920: iload #153
        //   7922: bipush #6
        //   7924: if_icmpne -> 8389
        //   7927: aload #149
        //   7929: iload #153
        //   7931: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7934: astore #154
        //   7936: aload #154
        //   7938: invokevirtual beginText : ()V
        //   7941: aload #154
        //   7943: ldc 'Times-Roman'
        //   7945: ldc 'Cp1257'
        //   7947: iconst_1
        //   7948: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   7951: ldc 10.0
        //   7953: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   7956: aload #154
        //   7958: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   7961: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   7964: aload #154
        //   7966: ldc_w 135.0
        //   7969: ldc_w 730.0
        //   7972: invokevirtual setTextMatrix : (FF)V
        //   7975: aload #154
        //   7977: aload #24
        //   7979: invokevirtual showText : (Ljava/lang/String;)V
        //   7982: aload #154
        //   7984: invokevirtual endText : ()V
        //   7987: aload #154
        //   7989: invokevirtual beginText : ()V
        //   7992: aload #154
        //   7994: ldc 'Times-Roman'
        //   7996: ldc 'Cp1257'
        //   7998: iconst_1
        //   7999: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8002: ldc 10.0
        //   8004: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8007: aload #154
        //   8009: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8012: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8015: aload #154
        //   8017: ldc_w 425.0
        //   8020: ldc_w 730.0
        //   8023: invokevirtual setTextMatrix : (FF)V
        //   8026: aload #154
        //   8028: aload #22
        //   8030: invokevirtual showText : (Ljava/lang/String;)V
        //   8033: aload #154
        //   8035: invokevirtual endText : ()V
        //   8038: aload #154
        //   8040: invokevirtual beginText : ()V
        //   8043: aload #154
        //   8045: ldc 'Times-Roman'
        //   8047: ldc 'Cp1257'
        //   8049: iconst_1
        //   8050: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8053: ldc 10.0
        //   8055: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8058: aload #154
        //   8060: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8063: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8066: aload #154
        //   8068: ldc 120.0
        //   8070: ldc_w 715.0
        //   8073: invokevirtual setTextMatrix : (FF)V
        //   8076: aload #154
        //   8078: aload #27
        //   8080: invokevirtual showText : (Ljava/lang/String;)V
        //   8083: aload #154
        //   8085: invokevirtual endText : ()V
        //   8088: aload #154
        //   8090: invokevirtual beginText : ()V
        //   8093: aload #154
        //   8095: ldc 'Times-Roman'
        //   8097: ldc 'Cp1257'
        //   8099: iconst_1
        //   8100: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8103: ldc 10.0
        //   8105: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8108: aload #154
        //   8110: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8113: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8116: aload #154
        //   8118: ldc 415.0
        //   8120: ldc_w 715.0
        //   8123: invokevirtual setTextMatrix : (FF)V
        //   8126: aload #154
        //   8128: aload #31
        //   8130: invokevirtual showText : (Ljava/lang/String;)V
        //   8133: aload #154
        //   8135: invokevirtual endText : ()V
        //   8138: aload #154
        //   8140: invokevirtual beginText : ()V
        //   8143: aload #154
        //   8145: ldc 'Times-Roman'
        //   8147: ldc 'Cp1257'
        //   8149: iconst_1
        //   8150: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8153: ldc 10.0
        //   8155: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8158: aload #154
        //   8160: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8163: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8166: aload #154
        //   8168: ldc_w 90.0
        //   8171: ldc_w 700.0
        //   8174: invokevirtual setTextMatrix : (FF)V
        //   8177: aload #154
        //   8179: aload #32
        //   8181: invokevirtual showText : (Ljava/lang/String;)V
        //   8184: aload #154
        //   8186: invokevirtual endText : ()V
        //   8189: aload #154
        //   8191: invokevirtual beginText : ()V
        //   8194: aload #154
        //   8196: ldc 'Times-Roman'
        //   8198: ldc 'Cp1257'
        //   8200: iconst_1
        //   8201: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8204: ldc 10.0
        //   8206: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8209: aload #154
        //   8211: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8214: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8217: aload #154
        //   8219: ldc 400.0
        //   8221: ldc_w 700.0
        //   8224: invokevirtual setTextMatrix : (FF)V
        //   8227: aload #154
        //   8229: aload #33
        //   8231: invokevirtual showText : (Ljava/lang/String;)V
        //   8234: aload #154
        //   8236: invokevirtual endText : ()V
        //   8239: aload #154
        //   8241: invokevirtual beginText : ()V
        //   8244: aload #154
        //   8246: ldc 'Times-Roman'
        //   8248: ldc 'Cp1257'
        //   8250: iconst_1
        //   8251: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8254: ldc 10.0
        //   8256: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8259: aload #154
        //   8261: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8264: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8267: aload #154
        //   8269: ldc_w 140.0
        //   8272: ldc_w 552.0
        //   8275: invokevirtual setTextMatrix : (FF)V
        //   8278: aload #154
        //   8280: aload #46
        //   8282: invokevirtual showText : (Ljava/lang/String;)V
        //   8285: aload #154
        //   8287: invokevirtual endText : ()V
        //   8290: aload #154
        //   8292: invokevirtual beginText : ()V
        //   8295: aload #154
        //   8297: ldc 'Times-Roman'
        //   8299: ldc 'Cp1257'
        //   8301: iconst_1
        //   8302: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8305: ldc 10.0
        //   8307: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8310: aload #154
        //   8312: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8315: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8318: aload #154
        //   8320: ldc 445.0
        //   8322: ldc 130.0
        //   8324: invokevirtual setTextMatrix : (FF)V
        //   8327: aload #154
        //   8329: aload #15
        //   8331: invokevirtual showText : (Ljava/lang/String;)V
        //   8334: aload #154
        //   8336: invokevirtual endText : ()V
        //   8339: aload #154
        //   8341: invokevirtual beginText : ()V
        //   8344: aload #154
        //   8346: ldc 'Times-Roman'
        //   8348: ldc 'Cp1257'
        //   8350: iconst_1
        //   8351: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8354: ldc 10.0
        //   8356: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8359: aload #154
        //   8361: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8364: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8367: aload #154
        //   8369: ldc 280.0
        //   8371: ldc_w 115.0
        //   8374: invokevirtual setTextMatrix : (FF)V
        //   8377: aload #154
        //   8379: ldc ''
        //   8381: invokevirtual showText : (Ljava/lang/String;)V
        //   8384: aload #154
        //   8386: invokevirtual endText : ()V
        //   8389: iload #153
        //   8391: bipush #7
        //   8393: if_icmpne -> 8720
        //   8396: aload #149
        //   8398: iload #153
        //   8400: invokevirtual getOverContent : (I)Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8403: astore #154
        //   8405: aload #154
        //   8407: invokevirtual beginText : ()V
        //   8410: aload #154
        //   8412: ldc 'Times-Roman'
        //   8414: ldc 'Cp1257'
        //   8416: iconst_1
        //   8417: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8420: ldc 10.0
        //   8422: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8425: aload #154
        //   8427: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8430: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8433: aload #154
        //   8435: ldc 120.0
        //   8437: ldc_w 645.0
        //   8440: invokevirtual setTextMatrix : (FF)V
        //   8443: aload #154
        //   8445: new java/lang/StringBuilder
        //   8448: dup
        //   8449: invokespecial <init> : ()V
        //   8452: aload #22
        //   8454: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8457: ldc ' '
        //   8459: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8462: aload #25
        //   8464: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8467: ldc ' '
        //   8469: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8472: aload #24
        //   8474: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8477: invokevirtual toString : ()Ljava/lang/String;
        //   8480: invokevirtual showText : (Ljava/lang/String;)V
        //   8483: aload #154
        //   8485: invokevirtual endText : ()V
        //   8488: aload #154
        //   8490: invokevirtual beginText : ()V
        //   8493: aload #154
        //   8495: ldc 'Times-Roman'
        //   8497: ldc 'Cp1257'
        //   8499: iconst_1
        //   8500: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8503: ldc 10.0
        //   8505: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8508: aload #154
        //   8510: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8513: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8516: aload #154
        //   8518: ldc 360.0
        //   8520: ldc_w 645.0
        //   8523: invokevirtual setTextMatrix : (FF)V
        //   8526: aload #154
        //   8528: aload #31
        //   8530: invokevirtual showText : (Ljava/lang/String;)V
        //   8533: aload #154
        //   8535: invokevirtual endText : ()V
        //   8538: aload #154
        //   8540: invokevirtual beginText : ()V
        //   8543: aload #154
        //   8545: ldc 'Times-Roman'
        //   8547: ldc 'Cp1257'
        //   8549: iconst_1
        //   8550: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8553: ldc 10.0
        //   8555: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8558: aload #154
        //   8560: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8563: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8566: aload #154
        //   8568: ldc 120.0
        //   8570: ldc_w 612.0
        //   8573: invokevirtual setTextMatrix : (FF)V
        //   8576: aload #154
        //   8578: new java/lang/StringBuilder
        //   8581: dup
        //   8582: invokespecial <init> : ()V
        //   8585: aload #22
        //   8587: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8590: ldc ' '
        //   8592: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8595: aload #25
        //   8597: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8600: ldc ' '
        //   8602: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8605: aload #24
        //   8607: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8610: invokevirtual toString : ()Ljava/lang/String;
        //   8613: invokevirtual showText : (Ljava/lang/String;)V
        //   8616: aload #154
        //   8618: invokevirtual endText : ()V
        //   8621: aload #154
        //   8623: invokevirtual beginText : ()V
        //   8626: aload #154
        //   8628: ldc 'Times-Roman'
        //   8630: ldc 'Cp1257'
        //   8632: iconst_1
        //   8633: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8636: ldc 10.0
        //   8638: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8641: aload #154
        //   8643: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8646: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8649: aload #154
        //   8651: ldc 120.0
        //   8653: ldc 465.0
        //   8655: invokevirtual setTextMatrix : (FF)V
        //   8658: aload #154
        //   8660: aload #46
        //   8662: invokevirtual showText : (Ljava/lang/String;)V
        //   8665: aload #154
        //   8667: invokevirtual endText : ()V
        //   8670: aload #154
        //   8672: invokevirtual beginText : ()V
        //   8675: aload #154
        //   8677: ldc 'Times-Roman'
        //   8679: ldc 'Cp1257'
        //   8681: iconst_1
        //   8682: invokestatic createFont : (Ljava/lang/String;Ljava/lang/String;Z)Lcom/itextpdf/text/pdf/BaseFont;
        //   8685: ldc 10.0
        //   8687: invokevirtual setFontAndSize : (Lcom/itextpdf/text/pdf/BaseFont;F)V
        //   8690: aload #154
        //   8692: getstatic com/itextpdf/text/BaseColor.BLACK : Lcom/itextpdf/text/BaseColor;
        //   8695: invokevirtual setColorFill : (Lcom/itextpdf/text/BaseColor;)V
        //   8698: aload #154
        //   8700: ldc_w 410.0
        //   8703: ldc 150.0
        //   8705: invokevirtual setTextMatrix : (FF)V
        //   8708: aload #154
        //   8710: aload #15
        //   8712: invokevirtual showText : (Ljava/lang/String;)V
        //   8715: aload #154
        //   8717: invokevirtual endText : ()V
        //   8720: iinc #153, 1
        //   8723: goto -> 4171
        //   8726: aload #149
        //   8728: invokevirtual close : ()V
        //   8731: new java/io/File
        //   8734: dup
        //   8735: aload #146
        //   8737: invokespecial <init> : (Ljava/lang/String;)V
        //   8740: astore #153
        //   8742: aload #5
        //   8744: ldc 'application/pdf'
        //   8746: invokeinterface setContentType : (Ljava/lang/String;)V
        //   8751: aload #5
        //   8753: ldc 'Content-Disposition'
        //   8755: new java/lang/StringBuilder
        //   8758: dup
        //   8759: invokespecial <init> : ()V
        //   8762: ldc 'inline; filename='
        //   8764: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8767: aload #23
        //   8769: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8772: aload #24
        //   8774: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8777: iload #138
        //   8779: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   8782: ldc '_'
        //   8784: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8787: aload #14
        //   8789: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8792: ldc '.pdf'
        //   8794: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8797: invokevirtual toString : ()Ljava/lang/String;
        //   8800: invokeinterface addHeader : (Ljava/lang/String;Ljava/lang/String;)V
        //   8805: aload #5
        //   8807: aload #153
        //   8809: invokevirtual length : ()J
        //   8812: l2i
        //   8813: invokeinterface setContentLength : (I)V
        //   8818: new java/io/FileInputStream
        //   8821: dup
        //   8822: aload #153
        //   8824: invokespecial <init> : (Ljava/io/File;)V
        //   8827: astore #154
        //   8829: aload #5
        //   8831: invokeinterface getOutputStream : ()Ljavax/servlet/ServletOutputStream;
        //   8836: astore #155
        //   8838: aload #154
        //   8840: invokevirtual read : ()I
        //   8843: dup
        //   8844: istore #156
        //   8846: iconst_m1
        //   8847: if_icmpeq -> 8860
        //   8850: aload #155
        //   8852: iload #156
        //   8854: invokevirtual write : (I)V
        //   8857: goto -> 8838
        //   8860: new java/io/File
        //   8863: dup
        //   8864: new java/lang/StringBuilder
        //   8867: dup
        //   8868: invokespecial <init> : ()V
        //   8871: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/PT_FORM_HB2041_DISCLOSURE_ONLY_Excel_LONGVIEW_'
        //   8874: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8877: iload #8
        //   8879: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   8882: ldc '_'
        //   8884: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8887: aload #43
        //   8889: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8892: ldc '.pdf'
        //   8894: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8897: invokevirtual toString : ()Ljava/lang/String;
        //   8900: invokespecial <init> : (Ljava/lang/String;)V
        //   8903: astore #157
        //   8905: aload #157
        //   8907: invokevirtual delete : ()Z
        //   8910: pop
        //   8911: new java/io/File
        //   8914: dup
        //   8915: new java/lang/StringBuilder
        //   8918: dup
        //   8919: invokespecial <init> : ()V
        //   8922: ldc_w '/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/LongViewPdfs/TempDir/FINANCIAL_HARDSHIP_RELIEF_'
        //   8925: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8928: iload #8
        //   8930: invokevirtual append : (I)Ljava/lang/StringBuilder;
        //   8933: ldc '_'
        //   8935: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8938: aload #43
        //   8940: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8943: ldc '.pdf'
        //   8945: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   8948: invokevirtual toString : ()Ljava/lang/String;
        //   8951: invokespecial <init> : (Ljava/lang/String;)V
        //   8954: astore #157
        //   8956: aload #157
        //   8958: invokevirtual delete : ()Z
        //   8961: pop
        //   8962: goto -> 9040
        //   8965: astore #139
        //   8967: aload_2
        //   8968: aload #139
        //   8970: invokevirtual getMessage : ()Ljava/lang/String;
        //   8973: invokevirtual println : (Ljava/lang/String;)V
        //   8976: ldc ''
        //   8978: astore #140
        //   8980: iconst_0
        //   8981: istore #141
        //   8983: iload #141
        //   8985: aload #139
        //   8987: invokevirtual getStackTrace : ()[Ljava/lang/StackTraceElement;
        //   8990: arraylength
        //   8991: if_icmpge -> 9034
        //   8994: new java/lang/StringBuilder
        //   8997: dup
        //   8998: invokespecial <init> : ()V
        //   9001: aload #140
        //   9003: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9006: aload #139
        //   9008: invokevirtual getStackTrace : ()[Ljava/lang/StackTraceElement;
        //   9011: iload #141
        //   9013: aaload
        //   9014: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
        //   9017: ldc_w '<br>'
        //   9020: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   9023: invokevirtual toString : ()Ljava/lang/String;
        //   9026: astore #140
        //   9028: iinc #141, 1
        //   9031: goto -> 8983
        //   9034: aload_2
        //   9035: aload #140
        //   9037: invokevirtual println : (Ljava/lang/String;)V
        //   9040: return
        // Line number table:
        //   Java source line number -> byte code offset
        //   #9528	-> 0
        //   #9529	-> 3
        //   #9530	-> 6
        //   #9531	-> 10
        //   #9532	-> 13
        //   #9533	-> 17
        //   #9534	-> 21
        //   #9535	-> 25
        //   #9536	-> 29
        //   #9537	-> 38
        //   #9538	-> 43
        //   #9539	-> 48
        //   #9540	-> 52
        //   #9541	-> 56
        //   #9542	-> 60
        //   #9543	-> 64
        //   #9544	-> 68
        //   #9545	-> 72
        //   #9546	-> 76
        //   #9547	-> 80
        //   #9548	-> 84
        //   #9549	-> 88
        //   #9550	-> 92
        //   #9551	-> 96
        //   #9552	-> 100
        //   #9553	-> 104
        //   #9554	-> 108
        //   #9555	-> 112
        //   #9556	-> 116
        //   #9557	-> 120
        //   #9558	-> 124
        //   #9559	-> 128
        //   #9560	-> 132
        //   #9561	-> 136
        //   #9562	-> 140
        //   #9563	-> 143
        //   #9564	-> 147
        //   #9565	-> 151
        //   #9566	-> 154
        //   #9567	-> 157
        //   #9568	-> 161
        //   #9569	-> 165
        //   #9570	-> 169
        //   #9571	-> 173
        //   #9572	-> 177
        //   #9573	-> 181
        //   #9574	-> 185
        //   #9575	-> 189
        //   #9576	-> 193
        //   #9577	-> 197
        //   #9578	-> 201
        //   #9579	-> 205
        //   #9580	-> 209
        //   #9581	-> 213
        //   #9582	-> 217
        //   #9583	-> 221
        //   #9584	-> 225
        //   #9585	-> 229
        //   #9586	-> 233
        //   #9587	-> 236
        //   #9588	-> 240
        //   #9589	-> 243
        //   #9590	-> 247
        //   #9591	-> 251
        //   #9592	-> 255
        //   #9593	-> 259
        //   #9594	-> 263
        //   #9595	-> 267
        //   #9596	-> 271
        //   #9597	-> 275
        //   #9598	-> 279
        //   #9599	-> 283
        //   #9600	-> 287
        //   #9601	-> 291
        //   #9602	-> 295
        //   #9603	-> 299
        //   #9604	-> 303
        //   #9605	-> 307
        //   #9606	-> 311
        //   #9607	-> 315
        //   #9608	-> 319
        //   #9609	-> 323
        //   #9610	-> 327
        //   #9611	-> 331
        //   #9612	-> 334
        //   #9613	-> 338
        //   #9614	-> 342
        //   #9615	-> 346
        //   #9616	-> 350
        //   #9617	-> 354
        //   #9618	-> 358
        //   #9619	-> 362
        //   #9620	-> 366
        //   #9621	-> 370
        //   #9622	-> 374
        //   #9623	-> 378
        //   #9624	-> 382
        //   #9625	-> 386
        //   #9626	-> 390
        //   #9627	-> 394
        //   #9628	-> 398
        //   #9629	-> 402
        //   #9630	-> 406
        //   #9631	-> 410
        //   #9632	-> 414
        //   #9633	-> 418
        //   #9634	-> 422
        //   #9635	-> 426
        //   #9636	-> 430
        //   #9637	-> 434
        //   #9638	-> 438
        //   #9639	-> 442
        //   #9640	-> 446
        //   #9641	-> 450
        //   #9642	-> 454
        //   #9643	-> 458
        //   #9644	-> 462
        //   #9645	-> 466
        //   #9646	-> 470
        //   #9647	-> 474
        //   #9648	-> 478
        //   #9649	-> 482
        //   #9650	-> 486
        //   #9651	-> 490
        //   #9652	-> 494
        //   #9653	-> 498
        //   #9654	-> 502
        //   #9655	-> 505
        //   #9656	-> 508
        //   #9658	-> 524
        //   #9659	-> 528
        //   #9660	-> 536
        //   #9661	-> 547
        //   #9662	-> 557
        //   #9663	-> 567
        //   #9664	-> 577
        //   #9666	-> 587
        //   #9667	-> 594
        //   #9669	-> 601
        //   #9670	-> 634
        //   #9671	-> 642
        //   #9672	-> 653
        //   #9673	-> 663
        //   #9674	-> 667
        //   #9675	-> 680
        //   #9676	-> 693
        //   #9677	-> 704
        //   #9678	-> 717
        //   #9679	-> 730
        //   #9680	-> 740
        //   #9681	-> 751
        //   #9682	-> 762
        //   #9683	-> 773
        //   #9684	-> 784
        //   #9685	-> 795
        //   #9686	-> 806
        //   #9687	-> 817
        //   #9688	-> 828
        //   #9689	-> 839
        //   #9690	-> 850
        //   #9691	-> 861
        //   #9692	-> 872
        //   #9693	-> 883
        //   #9694	-> 894
        //   #9695	-> 905
        //   #9696	-> 916
        //   #9697	-> 927
        //   #9698	-> 938
        //   #9700	-> 952
        //   #9701	-> 959
        //   #9702	-> 966
        //   #9703	-> 988
        //   #9704	-> 996
        //   #9705	-> 1007
        //   #9706	-> 1017
        //   #9708	-> 1027
        //   #9709	-> 1034
        //   #9710	-> 1041
        //   #9711	-> 1051
        //   #9712	-> 1083
        //   #9713	-> 1091
        //   #9714	-> 1102
        //   #9715	-> 1112
        //   #9717	-> 1125
        //   #9718	-> 1132
        //   #9720	-> 1142
        //   #9725	-> 1146
        //   #9722	-> 1149
        //   #9723	-> 1151
        //   #9724	-> 1178
        //   #9727	-> 1184
        //   #9728	-> 1218
        //   #9729	-> 1226
        //   #9730	-> 1237
        //   #9731	-> 1247
        //   #9732	-> 1257
        //   #9733	-> 1267
        //   #9734	-> 1277
        //   #9735	-> 1287
        //   #9736	-> 1297
        //   #9737	-> 1308
        //   #9738	-> 1319
        //   #9739	-> 1330
        //   #9740	-> 1341
        //   #9741	-> 1352
        //   #9742	-> 1363
        //   #9743	-> 1374
        //   #9744	-> 1385
        //   #9745	-> 1396
        //   #9746	-> 1407
        //   #9747	-> 1418
        //   #9748	-> 1429
        //   #9750	-> 1443
        //   #9751	-> 1450
        //   #9754	-> 1457
        //   #9752	-> 1460
        //   #9753	-> 1462
        //   #9755	-> 1490
        //   #9756	-> 1496
        //   #9757	-> 1528
        //   #9758	-> 1536
        //   #9759	-> 1547
        //   #9760	-> 1557
        //   #9761	-> 1567
        //   #9762	-> 1577
        //   #9763	-> 1582
        //   #9765	-> 1590
        //   #9767	-> 1594
        //   #9768	-> 1599
        //   #9770	-> 1607
        //   #9772	-> 1611
        //   #9773	-> 1621
        //   #9774	-> 1631
        //   #9775	-> 1641
        //   #9776	-> 1652
        //   #9777	-> 1663
        //   #9778	-> 1674
        //   #9779	-> 1685
        //   #9780	-> 1696
        //   #9781	-> 1707
        //   #9782	-> 1718
        //   #9783	-> 1729
        //   #9784	-> 1740
        //   #9785	-> 1751
        //   #9786	-> 1762
        //   #9787	-> 1773
        //   #9788	-> 1784
        //   #9789	-> 1795
        //   #9791	-> 1809
        //   #9792	-> 1816
        //   #9794	-> 1823
        //   #9795	-> 1833
        //   #9796	-> 1867
        //   #9797	-> 1875
        //   #9798	-> 1886
        //   #9799	-> 1896
        //   #9801	-> 1906
        //   #9802	-> 1913
        //   #9804	-> 1920
        //   #9805	-> 1930
        //   #9806	-> 1964
        //   #9807	-> 1972
        //   #9808	-> 1983
        //   #9809	-> 1993
        //   #9811	-> 2003
        //   #9812	-> 2010
        //   #9814	-> 2017
        //   #9815	-> 2049
        //   #9816	-> 2057
        //   #9817	-> 2068
        //   #9818	-> 2078
        //   #9819	-> 2088
        //   #9820	-> 2098
        //   #9821	-> 2108
        //   #9822	-> 2118
        //   #9823	-> 2128
        //   #9825	-> 2142
        //   #9826	-> 2149
        //   #9827	-> 2156
        //   #9828	-> 2188
        //   #9829	-> 2196
        //   #9830	-> 2207
        //   #9831	-> 2217
        //   #9832	-> 2228
        //   #9834	-> 2235
        //   #9836	-> 2239
        //   #9837	-> 2250
        //   #9839	-> 2257
        //   #9841	-> 2261
        //   #9842	-> 2272
        //   #9844	-> 2279
        //   #9846	-> 2283
        //   #9847	-> 2294
        //   #9849	-> 2301
        //   #9851	-> 2305
        //   #9852	-> 2316
        //   #9854	-> 2323
        //   #9856	-> 2327
        //   #9857	-> 2339
        //   #9859	-> 2346
        //   #9861	-> 2350
        //   #9862	-> 2362
        //   #9864	-> 2369
        //   #9866	-> 2373
        //   #9867	-> 2385
        //   #9869	-> 2392
        //   #9871	-> 2396
        //   #9872	-> 2408
        //   #9874	-> 2415
        //   #9876	-> 2419
        //   #9877	-> 2431
        //   #9878	-> 2435
        //   #9880	-> 2442
        //   #9881	-> 2446
        //   #9883	-> 2457
        //   #9884	-> 2469
        //   #9886	-> 2476
        //   #9888	-> 2480
        //   #9889	-> 2492
        //   #9890	-> 2496
        //   #9892	-> 2503
        //   #9893	-> 2507
        //   #9895	-> 2518
        //   #9896	-> 2530
        //   #9897	-> 2534
        //   #9899	-> 2541
        //   #9900	-> 2545
        //   #9902	-> 2556
        //   #9903	-> 2568
        //   #9904	-> 2572
        //   #9906	-> 2579
        //   #9907	-> 2583
        //   #9909	-> 2594
        //   #9910	-> 2606
        //   #9911	-> 2610
        //   #9913	-> 2617
        //   #9914	-> 2621
        //   #9916	-> 2632
        //   #9917	-> 2644
        //   #9918	-> 2648
        //   #9920	-> 2655
        //   #9921	-> 2659
        //   #9923	-> 2670
        //   #9924	-> 2696
        //   #9926	-> 2703
        //   #9928	-> 2714
        //   #9929	-> 2740
        //   #9931	-> 2747
        //   #9933	-> 2758
        //   #9934	-> 2784
        //   #9936	-> 2791
        //   #9939	-> 2805
        //   #9940	-> 2812
        //   #9942	-> 2819
        //   #9943	-> 2823
        //   #9944	-> 2836
        //   #9946	-> 2859
        //   #9947	-> 2872
        //   #9949	-> 2895
        //   #9950	-> 2908
        //   #9952	-> 2931
        //   #9953	-> 2944
        //   #9955	-> 2967
        //   #9956	-> 2980
        //   #9958	-> 3003
        //   #9959	-> 3016
        //   #9961	-> 3039
        //   #9962	-> 3052
        //   #9964	-> 3075
        //   #9965	-> 3088
        //   #9967	-> 3111
        //   #9968	-> 3124
        //   #9970	-> 3147
        //   #9971	-> 3160
        //   #9973	-> 3183
        //   #9974	-> 3196
        //   #9976	-> 3219
        //   #9977	-> 3232
        //   #9979	-> 3255
        //   #9980	-> 3268
        //   #9982	-> 3291
        //   #9983	-> 3304
        //   #9985	-> 3327
        //   #9986	-> 3340
        //   #9988	-> 3363
        //   #9989	-> 3376
        //   #9991	-> 3399
        //   #9992	-> 3412
        //   #9994	-> 3435
        //   #9995	-> 3448
        //   #9998	-> 3471
        //   #9999	-> 3475
        //   #10000	-> 3479
        //   #10001	-> 3484
        //   #10002	-> 3522
        //   #10003	-> 3540
        //   #10004	-> 3551
        //   #10005	-> 3564
        //   #10006	-> 3577
        //   #10007	-> 3583
        //   #10008	-> 3592
        //   #10009	-> 3597
        //   #10010	-> 3612
        //   #10011	-> 3622
        //   #10012	-> 3629
        //   #10013	-> 3634
        //   #10014	-> 3639
        //   #10015	-> 3654
        //   #10016	-> 3662
        //   #10017	-> 3671
        //   #10018	-> 3701
        //   #10019	-> 3706
        //   #10020	-> 3711
        //   #10021	-> 3726
        //   #10022	-> 3734
        //   #10023	-> 3743
        //   #10024	-> 3773
        //   #10025	-> 3778
        //   #10026	-> 3783
        //   #10027	-> 3798
        //   #10028	-> 3806
        //   #10029	-> 3815
        //   #10030	-> 3850
        //   #10031	-> 3855
        //   #10032	-> 3860
        //   #10033	-> 3875
        //   #10034	-> 3883
        //   #10035	-> 3892
        //   #10036	-> 3927
        //   #10037	-> 3932
        //   #10038	-> 3937
        //   #10039	-> 3952
        //   #10040	-> 3960
        //   #10041	-> 3970
        //   #10042	-> 3995
        //   #10005	-> 4000
        //   #10045	-> 4006
        //   #10055	-> 4011
        //   #10056	-> 4016
        //   #10057	-> 4020
        //   #10058	-> 4024
        //   #10059	-> 4081
        //   #10060	-> 4099
        //   #10061	-> 4110
        //   #10062	-> 4123
        //   #10063	-> 4132
        //   #10064	-> 4152
        //   #10065	-> 4159
        //   #10066	-> 4168
        //   #10067	-> 4181
        //   #10068	-> 4187
        //   #10069	-> 4196
        //   #10070	-> 4201
        //   #10071	-> 4216
        //   #10072	-> 4226
        //   #10073	-> 4233
        //   #10074	-> 4238
        //   #10075	-> 4243
        //   #10076	-> 4258
        //   #10077	-> 4266
        //   #10078	-> 4276
        //   #10079	-> 4283
        //   #10080	-> 4288
        //   #10081	-> 4293
        //   #10082	-> 4308
        //   #10083	-> 4316
        //   #10084	-> 4327
        //   #10085	-> 4334
        //   #10086	-> 4339
        //   #10087	-> 4344
        //   #10088	-> 4359
        //   #10089	-> 4367
        //   #10090	-> 4377
        //   #10091	-> 4402
        //   #10092	-> 4407
        //   #10093	-> 4412
        //   #10094	-> 4427
        //   #10095	-> 4435
        //   #10096	-> 4445
        //   #10097	-> 4452
        //   #10098	-> 4457
        //   #10099	-> 4462
        //   #10100	-> 4477
        //   #10101	-> 4485
        //   #10102	-> 4495
        //   #10103	-> 4502
        //   #10104	-> 4507
        //   #10105	-> 4512
        //   #10106	-> 4527
        //   #10107	-> 4535
        //   #10108	-> 4545
        //   #10109	-> 4552
        //   #10110	-> 4557
        //   #10111	-> 4562
        //   #10112	-> 4577
        //   #10113	-> 4585
        //   #10114	-> 4595
        //   #10115	-> 4602
        //   #10116	-> 4607
        //   #10117	-> 4612
        //   #10118	-> 4627
        //   #10119	-> 4635
        //   #10120	-> 4645
        //   #10121	-> 4652
        //   #10122	-> 4657
        //   #10123	-> 4662
        //   #10124	-> 4677
        //   #10125	-> 4685
        //   #10126	-> 4694
        //   #10127	-> 4701
        //   #10128	-> 4706
        //   #10129	-> 4711
        //   #10130	-> 4726
        //   #10131	-> 4734
        //   #10132	-> 4744
        //   #10133	-> 4751
        //   #10134	-> 4756
        //   #10135	-> 4761
        //   #10136	-> 4776
        //   #10137	-> 4784
        //   #10138	-> 4794
        //   #10139	-> 4801
        //   #10140	-> 4806
        //   #10141	-> 4811
        //   #10142	-> 4826
        //   #10143	-> 4834
        //   #10144	-> 4844
        //   #10145	-> 4851
        //   #10146	-> 4856
        //   #10147	-> 4861
        //   #10148	-> 4876
        //   #10149	-> 4884
        //   #10150	-> 4895
        //   #10151	-> 4902
        //   #10152	-> 4907
        //   #10153	-> 4912
        //   #10154	-> 4927
        //   #10155	-> 4935
        //   #10156	-> 4945
        //   #10157	-> 4952
        //   #10158	-> 4957
        //   #10159	-> 4962
        //   #10160	-> 4977
        //   #10161	-> 4985
        //   #10162	-> 4995
        //   #10163	-> 5002
        //   #10164	-> 5007
        //   #10165	-> 5012
        //   #10166	-> 5027
        //   #10167	-> 5035
        //   #10168	-> 5046
        //   #10169	-> 5053
        //   #10170	-> 5058
        //   #10171	-> 5063
        //   #10172	-> 5078
        //   #10173	-> 5086
        //   #10174	-> 5095
        //   #10175	-> 5102
        //   #10176	-> 5107
        //   #10177	-> 5118
        //   #10178	-> 5123
        //   #10179	-> 5138
        //   #10180	-> 5146
        //   #10181	-> 5155
        //   #10182	-> 5163
        //   #10183	-> 5171
        //   #10184	-> 5182
        //   #10185	-> 5187
        //   #10186	-> 5202
        //   #10187	-> 5210
        //   #10188	-> 5219
        //   #10189	-> 5227
        //   #10190	-> 5235
        //   #10191	-> 5245
        //   #10192	-> 5250
        //   #10193	-> 5265
        //   #10194	-> 5273
        //   #10195	-> 5282
        //   #10196	-> 5290
        //   #10197	-> 5298
        //   #10198	-> 5310
        //   #10199	-> 5315
        //   #10200	-> 5330
        //   #10201	-> 5338
        //   #10202	-> 5347
        //   #10203	-> 5355
        //   #10205	-> 5360
        //   #10206	-> 5365
        //   #10207	-> 5380
        //   #10208	-> 5388
        //   #10209	-> 5397
        //   #10210	-> 5404
        //   #10211	-> 5409
        //   #10212	-> 5414
        //   #10213	-> 5429
        //   #10214	-> 5437
        //   #10215	-> 5446
        //   #10216	-> 5453
        //   #10217	-> 5458
        //   #10218	-> 5463
        //   #10219	-> 5478
        //   #10220	-> 5486
        //   #10221	-> 5495
        //   #10222	-> 5502
        //   #10223	-> 5507
        //   #10224	-> 5512
        //   #10225	-> 5527
        //   #10226	-> 5535
        //   #10227	-> 5544
        //   #10228	-> 5551
        //   #10229	-> 5556
        //   #10230	-> 5561
        //   #10231	-> 5576
        //   #10232	-> 5584
        //   #10233	-> 5593
        //   #10234	-> 5600
        //   #10235	-> 5605
        //   #10236	-> 5610
        //   #10237	-> 5625
        //   #10238	-> 5633
        //   #10239	-> 5643
        //   #10240	-> 5650
        //   #10241	-> 5655
        //   #10242	-> 5660
        //   #10243	-> 5675
        //   #10244	-> 5683
        //   #10245	-> 5693
        //   #10246	-> 5700
        //   #10247	-> 5705
        //   #10248	-> 5710
        //   #10249	-> 5725
        //   #10250	-> 5733
        //   #10251	-> 5743
        //   #10252	-> 5750
        //   #10253	-> 5755
        //   #10254	-> 5760
        //   #10255	-> 5775
        //   #10256	-> 5783
        //   #10257	-> 5793
        //   #10258	-> 5800
        //   #10259	-> 5805
        //   #10260	-> 5810
        //   #10261	-> 5825
        //   #10262	-> 5833
        //   #10263	-> 5843
        //   #10264	-> 5850
        //   #10265	-> 5855
        //   #10266	-> 5860
        //   #10267	-> 5875
        //   #10268	-> 5883
        //   #10269	-> 5893
        //   #10270	-> 5900
        //   #10271	-> 5905
        //   #10272	-> 5910
        //   #10273	-> 5925
        //   #10274	-> 5933
        //   #10275	-> 5944
        //   #10276	-> 5951
        //   #10277	-> 5956
        //   #10278	-> 5961
        //   #10279	-> 5976
        //   #10280	-> 5984
        //   #10281	-> 5994
        //   #10282	-> 6001
        //   #10283	-> 6006
        //   #10284	-> 6011
        //   #10285	-> 6026
        //   #10286	-> 6034
        //   #10287	-> 6044
        //   #10288	-> 6051
        //   #10289	-> 6056
        //   #10290	-> 6061
        //   #10291	-> 6076
        //   #10292	-> 6084
        //   #10293	-> 6093
        //   #10294	-> 6100
        //   #10295	-> 6105
        //   #10296	-> 6110
        //   #10297	-> 6125
        //   #10298	-> 6133
        //   #10299	-> 6143
        //   #10300	-> 6150
        //   #10301	-> 6155
        //   #10302	-> 6160
        //   #10303	-> 6175
        //   #10304	-> 6183
        //   #10305	-> 6192
        //   #10306	-> 6199
        //   #10307	-> 6204
        //   #10308	-> 6209
        //   #10309	-> 6224
        //   #10310	-> 6232
        //   #10311	-> 6242
        //   #10312	-> 6249
        //   #10313	-> 6254
        //   #10314	-> 6259
        //   #10315	-> 6274
        //   #10316	-> 6282
        //   #10317	-> 6292
        //   #10318	-> 6299
        //   #10319	-> 6304
        //   #10320	-> 6309
        //   #10321	-> 6324
        //   #10322	-> 6332
        //   #10323	-> 6342
        //   #10324	-> 6349
        //   #10325	-> 6354
        //   #10326	-> 6359
        //   #10327	-> 6374
        //   #10328	-> 6382
        //   #10329	-> 6392
        //   #10330	-> 6399
        //   #10332	-> 6404
        //   #10333	-> 6410
        //   #10334	-> 6419
        //   #10335	-> 6424
        //   #10336	-> 6439
        //   #10337	-> 6447
        //   #10338	-> 6456
        //   #10339	-> 6496
        //   #10340	-> 6501
        //   #10341	-> 6506
        //   #10342	-> 6521
        //   #10343	-> 6529
        //   #10344	-> 6538
        //   #10345	-> 6568
        //   #10346	-> 6573
        //   #10347	-> 6578
        //   #10348	-> 6593
        //   #10349	-> 6601
        //   #10350	-> 6610
        //   #10351	-> 6645
        //   #10352	-> 6650
        //   #10353	-> 6655
        //   #10354	-> 6670
        //   #10355	-> 6678
        //   #10356	-> 6687
        //   #10357	-> 6722
        //   #10358	-> 6727
        //   #10359	-> 6732
        //   #10360	-> 6747
        //   #10361	-> 6755
        //   #10362	-> 6764
        //   #10363	-> 6789
        //   #10365	-> 6794
        //   #10366	-> 6800
        //   #10367	-> 6809
        //   #10368	-> 6814
        //   #10369	-> 6829
        //   #10370	-> 6837
        //   #10371	-> 6846
        //   #10372	-> 6886
        //   #10373	-> 6891
        //   #10374	-> 6896
        //   #10375	-> 6911
        //   #10376	-> 6919
        //   #10377	-> 6928
        //   #10378	-> 6958
        //   #10379	-> 6963
        //   #10380	-> 6968
        //   #10381	-> 6983
        //   #10382	-> 6991
        //   #10383	-> 7000
        //   #10384	-> 7035
        //   #10385	-> 7040
        //   #10386	-> 7045
        //   #10387	-> 7060
        //   #10388	-> 7068
        //   #10389	-> 7077
        //   #10390	-> 7112
        //   #10391	-> 7117
        //   #10392	-> 7122
        //   #10393	-> 7137
        //   #10394	-> 7145
        //   #10395	-> 7154
        //   #10396	-> 7179
        //   #10398	-> 7184
        //   #10399	-> 7190
        //   #10400	-> 7199
        //   #10401	-> 7204
        //   #10402	-> 7219
        //   #10403	-> 7227
        //   #10404	-> 7238
        //   #10405	-> 7245
        //   #10406	-> 7250
        //   #10407	-> 7255
        //   #10408	-> 7270
        //   #10409	-> 7278
        //   #10410	-> 7288
        //   #10411	-> 7295
        //   #10412	-> 7300
        //   #10413	-> 7305
        //   #10414	-> 7320
        //   #10415	-> 7328
        //   #10416	-> 7337
        //   #10417	-> 7344
        //   #10418	-> 7349
        //   #10419	-> 7354
        //   #10420	-> 7369
        //   #10421	-> 7377
        //   #10422	-> 7386
        //   #10423	-> 7426
        //   #10424	-> 7431
        //   #10425	-> 7436
        //   #10426	-> 7451
        //   #10427	-> 7459
        //   #10428	-> 7468
        //   #10429	-> 7498
        //   #10430	-> 7503
        //   #10431	-> 7508
        //   #10432	-> 7523
        //   #10433	-> 7531
        //   #10434	-> 7540
        //   #10435	-> 7575
        //   #10436	-> 7580
        //   #10437	-> 7585
        //   #10438	-> 7600
        //   #10439	-> 7608
        //   #10440	-> 7617
        //   #10441	-> 7652
        //   #10442	-> 7657
        //   #10443	-> 7662
        //   #10444	-> 7677
        //   #10445	-> 7685
        //   #10446	-> 7694
        //   #10447	-> 7719
        //   #10449	-> 7724
        //   #10450	-> 7730
        //   #10451	-> 7739
        //   #10452	-> 7744
        //   #10453	-> 7759
        //   #10454	-> 7767
        //   #10455	-> 7777
        //   #10456	-> 7817
        //   #10457	-> 7822
        //   #10458	-> 7827
        //   #10459	-> 7842
        //   #10460	-> 7850
        //   #10461	-> 7859
        //   #10462	-> 7866
        //   #10463	-> 7871
        //   #10464	-> 7876
        //   #10465	-> 7891
        //   #10466	-> 7899
        //   #10467	-> 7908
        //   #10468	-> 7915
        //   #10470	-> 7920
        //   #10471	-> 7927
        //   #10472	-> 7936
        //   #10473	-> 7941
        //   #10474	-> 7956
        //   #10475	-> 7964
        //   #10476	-> 7975
        //   #10477	-> 7982
        //   #10478	-> 7987
        //   #10479	-> 7992
        //   #10480	-> 8007
        //   #10481	-> 8015
        //   #10482	-> 8026
        //   #10483	-> 8033
        //   #10484	-> 8038
        //   #10485	-> 8043
        //   #10486	-> 8058
        //   #10487	-> 8066
        //   #10488	-> 8076
        //   #10489	-> 8083
        //   #10490	-> 8088
        //   #10491	-> 8093
        //   #10492	-> 8108
        //   #10493	-> 8116
        //   #10494	-> 8126
        //   #10495	-> 8133
        //   #10496	-> 8138
        //   #10497	-> 8143
        //   #10498	-> 8158
        //   #10499	-> 8166
        //   #10500	-> 8177
        //   #10501	-> 8184
        //   #10502	-> 8189
        //   #10503	-> 8194
        //   #10504	-> 8209
        //   #10505	-> 8217
        //   #10506	-> 8227
        //   #10507	-> 8234
        //   #10508	-> 8239
        //   #10509	-> 8244
        //   #10510	-> 8259
        //   #10511	-> 8267
        //   #10512	-> 8278
        //   #10513	-> 8285
        //   #10514	-> 8290
        //   #10515	-> 8295
        //   #10516	-> 8310
        //   #10517	-> 8318
        //   #10518	-> 8327
        //   #10519	-> 8334
        //   #10520	-> 8339
        //   #10521	-> 8344
        //   #10522	-> 8359
        //   #10523	-> 8367
        //   #10524	-> 8377
        //   #10525	-> 8384
        //   #10527	-> 8389
        //   #10528	-> 8396
        //   #10529	-> 8405
        //   #10530	-> 8410
        //   #10531	-> 8425
        //   #10532	-> 8433
        //   #10533	-> 8443
        //   #10534	-> 8483
        //   #10535	-> 8488
        //   #10536	-> 8493
        //   #10537	-> 8508
        //   #10538	-> 8516
        //   #10539	-> 8526
        //   #10540	-> 8533
        //   #10542	-> 8538
        //   #10543	-> 8543
        //   #10544	-> 8558
        //   #10545	-> 8566
        //   #10546	-> 8576
        //   #10547	-> 8616
        //   #10548	-> 8621
        //   #10549	-> 8626
        //   #10550	-> 8641
        //   #10551	-> 8649
        //   #10552	-> 8658
        //   #10553	-> 8665
        //   #10554	-> 8670
        //   #10555	-> 8675
        //   #10556	-> 8690
        //   #10557	-> 8698
        //   #10558	-> 8708
        //   #10559	-> 8715
        //   #10066	-> 8720
        //   #10562	-> 8726
        //   #10563	-> 8731
        //   #10564	-> 8742
        //   #10565	-> 8751
        //   #10566	-> 8805
        //   #10567	-> 8818
        //   #10568	-> 8829
        //   #10570	-> 8838
        //   #10571	-> 8850
        //   #10573	-> 8860
        //   #10574	-> 8905
        //   #10575	-> 8911
        //   #10576	-> 8956
        //   #10584	-> 8962
        //   #10577	-> 8965
        //   #10578	-> 8967
        //   #10579	-> 8976
        //   #10580	-> 8980
        //   #10581	-> 8994
        //   #10580	-> 9028
        //   #10583	-> 9034
        //   #10585	-> 9040
        // Local variable table:
        //   start	length	slot	name	descriptor
        //   1151	33	139	e	Ljava/lang/Exception;
        //   1462	28	139	e	Ljava/lang/Exception;
        //   3592	408	146	pdfContentByte	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   3567	439	145	i	I
        //   4196	2208	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   6419	375	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   6809	375	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7199	525	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7739	181	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   7936	453	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   8405	315	154	pdfContentByte2	Lcom/itextpdf/text/pdf/PdfContentByte;
        //   4171	4555	153	j	I
        //   2823	6139	139	HearAboutUsString	Ljava/lang/String;
        //   3475	5487	140	inputFilePathTmp	Ljava/lang/String;
        //   3479	5483	141	outputFilePathTmp	Ljava/lang/String;
        //   3540	5422	142	fos1	Ljava/io/OutputStream;
        //   3551	5411	143	pdfReader1	Lcom/itextpdf/text/pdf/PdfReader;
        //   3564	5398	144	pdfStamper1	Lcom/itextpdf/text/pdf/PdfStamper;
        //   4020	4942	145	inputFilePath	Ljava/lang/String;
        //   4081	4881	146	outputFilePath	Ljava/lang/String;
        //   4099	4863	147	fos2	Ljava/io/OutputStream;
        //   4110	4852	148	pdfReader2	Lcom/itextpdf/text/pdf/PdfReader;
        //   4123	4839	149	pdfStamper2	Lcom/itextpdf/text/pdf/PdfStamper;
        //   4132	4830	150	barCode	Lmd/GenerateBarCode;
        //   4152	4810	151	BarCodeFilePath	Ljava/lang/String;
        //   4159	4803	152	image	Lcom/itextpdf/text/Image;
        //   8742	220	153	pdfFile	Ljava/io/File;
        //   8829	133	154	fileInputStream	Ljava/io/FileInputStream;
        //   8838	124	155	responseOutputStream	Ljava/io/OutputStream;
        //   8846	116	156	bytes	I
        //   8905	57	157	File	Ljava/io/File;
        //   8983	51	141	k	I
        //   8980	60	140	str	Ljava/lang/String;
        //   8967	73	139	e	Ljava/lang/Exception;
        //   0	9041	0	this	Lmd/DownloadBundle;
        //   0	9041	1	request	Ljavax/servlet/http/HttpServletRequest;
        //   0	9041	2	out	Ljava/io/PrintWriter;
        //   0	9041	3	conn	Ljava/sql/Connection;
        //   0	9041	4	servletContext	Ljavax/servlet/ServletContext;
        //   0	9041	5	response	Ljavax/servlet/http/HttpServletResponse;
        //   0	9041	6	UserId	Ljava/lang/String;
        //   0	9041	7	Database	Ljava/lang/String;
        //   0	9041	8	ClientId	I
        //   0	9041	9	DirectoryName	Ljava/lang/String;
        //   3	9038	10	stmt	Ljava/sql/Statement;
        //   6	9035	11	rset	Ljava/sql/ResultSet;
        //   10	9031	12	Query	Ljava/lang/String;
        //   13	9028	13	PatientRegId	I
        //   17	9024	14	DateTime	Ljava/lang/String;
        //   21	9020	15	Date	Ljava/lang/String;
        //   25	9016	16	Time	Ljava/lang/String;
        //   29	9012	17	ResultPdf	Ljava/lang/String;
        //   38	9003	18	mergePdf	Lmd/MergePdf;
        //   43	8998	19	Path1	Ljava/lang/String;
        //   48	8993	20	Path2	Ljava/lang/String;
        //   52	8989	21	Title	Ljava/lang/String;
        //   56	8985	22	FirstName	Ljava/lang/String;
        //   60	8981	23	FirstNameNoSpaces	Ljava/lang/String;
        //   64	8977	24	LastName	Ljava/lang/String;
        //   68	8973	25	MiddleInitial	Ljava/lang/String;
        //   72	8969	26	MaritalStatus	Ljava/lang/String;
        //   76	8965	27	DOB	Ljava/lang/String;
        //   80	8961	28	Age	Ljava/lang/String;
        //   84	8957	29	gender	Ljava/lang/String;
        //   88	8953	30	Email	Ljava/lang/String;
        //   92	8949	31	PhNumber	Ljava/lang/String;
        //   96	8945	32	Address	Ljava/lang/String;
        //   100	8941	33	CityStateZip	Ljava/lang/String;
        //   104	8937	34	State	Ljava/lang/String;
        //   108	8933	35	Country	Ljava/lang/String;
        //   112	8929	36	ZipCode	Ljava/lang/String;
        //   116	8925	37	SSN	Ljava/lang/String;
        //   120	8921	38	Occupation	Ljava/lang/String;
        //   124	8917	39	Employer	Ljava/lang/String;
        //   128	8913	40	EmpContact	Ljava/lang/String;
        //   132	8909	41	PriCarePhy	Ljava/lang/String;
        //   136	8905	42	ReasonVisit	Ljava/lang/String;
        //   140	8901	43	MRN	Ljava/lang/String;
        //   143	8898	44	ClientIndex	I
        //   147	8894	45	ClientName	Ljava/lang/String;
        //   151	8890	46	DOS	Ljava/lang/String;
        //   154	8887	47	DoctorId	Ljava/lang/String;
        //   157	8884	48	DoctorName	Ljava/lang/String;
        //   161	8880	49	Ethnicity	Ljava/lang/String;
        //   165	8876	50	Race	Ljava/lang/String;
        //   169	8872	51	TravellingChk	Ljava/lang/String;
        //   173	8868	52	TravelWhen	Ljava/lang/String;
        //   177	8864	53	TravelWhere	Ljava/lang/String;
        //   181	8860	54	TravelHowLong	Ljava/lang/String;
        //   185	8856	55	COVIDExposedChk	Ljava/lang/String;
        //   189	8852	56	SympFever	Ljava/lang/String;
        //   193	8848	57	SympBodyAches	Ljava/lang/String;
        //   197	8844	58	SympSoreThroat	Ljava/lang/String;
        //   201	8840	59	SympFatigue	Ljava/lang/String;
        //   205	8836	60	SympRash	Ljava/lang/String;
        //   209	8832	61	SympVomiting	Ljava/lang/String;
        //   213	8828	62	SympDiarrhea	Ljava/lang/String;
        //   217	8824	63	SympCough	Ljava/lang/String;
        //   221	8820	64	SympRunnyNose	Ljava/lang/String;
        //   225	8816	65	SympNausea	Ljava/lang/String;
        //   229	8812	66	SympFluSymptoms	Ljava/lang/String;
        //   233	8808	67	SympEyeConjunctivitis	Ljava/lang/String;
        //   236	8805	68	WorkersCompPolicy	I
        //   240	8801	69	WorkersCompPolicyString	Ljava/lang/String;
        //   243	8798	70	MotorVehAccident	I
        //   247	8794	71	MotorVehAccidentString	Ljava/lang/String;
        //   251	8790	72	PriInsurance	Ljava/lang/String;
        //   255	8786	73	MemId	Ljava/lang/String;
        //   259	8782	74	GrpNumber	Ljava/lang/String;
        //   263	8778	75	PriInsuranceName	Ljava/lang/String;
        //   267	8774	76	AddressIfDifferent	Ljava/lang/String;
        //   271	8770	77	PrimaryDOB	Ljava/lang/String;
        //   275	8766	78	PrimarySSN	Ljava/lang/String;
        //   279	8762	79	PatientRelationtoPrimary	Ljava/lang/String;
        //   283	8758	80	PrimaryOccupation	Ljava/lang/String;
        //   287	8754	81	PrimaryEmployer	Ljava/lang/String;
        //   291	8750	82	EmployerAddress	Ljava/lang/String;
        //   295	8746	83	EmployerPhone	Ljava/lang/String;
        //   299	8742	84	SecondryInsurance	Ljava/lang/String;
        //   303	8738	85	SubscriberName	Ljava/lang/String;
        //   307	8734	86	SubscriberDOB	Ljava/lang/String;
        //   311	8730	87	MemberID_2	Ljava/lang/String;
        //   315	8726	88	GroupNumber_2	Ljava/lang/String;
        //   319	8722	89	PatientRelationshiptoSecondry	Ljava/lang/String;
        //   323	8718	90	NextofKinName	Ljava/lang/String;
        //   327	8714	91	RelationToPatientER	Ljava/lang/String;
        //   331	8710	92	PhoneNumberER	Ljava/lang/String;
        //   334	8707	93	LeaveMessageER	I
        //   338	8703	94	AddressER	Ljava/lang/String;
        //   342	8699	95	CityER	Ljava/lang/String;
        //   346	8695	96	StateER	Ljava/lang/String;
        //   350	8691	97	LeaveMessageERString	Ljava/lang/String;
        //   354	8687	98	CityStateZipER	Ljava/lang/String;
        //   358	8683	99	CountryER	Ljava/lang/String;
        //   362	8679	100	ZipCodeER	Ljava/lang/String;
        //   366	8675	101	DateConcent	Ljava/lang/String;
        //   370	8671	102	WitnessConcent	Ljava/lang/String;
        //   374	8667	103	PatientBehalfConcent	Ljava/lang/String;
        //   378	8663	104	RelativeSignConcent	Ljava/lang/String;
        //   382	8659	105	DateConcent2	Ljava/lang/String;
        //   386	8655	106	WitnessConcent2	Ljava/lang/String;
        //   390	8651	107	PatientSignConcent	Ljava/lang/String;
        //   394	8647	108	ReturnPatient	Ljava/lang/String;
        //   398	8643	109	Google	Ljava/lang/String;
        //   402	8639	110	MapSearch	Ljava/lang/String;
        //   406	8635	111	Billboard	Ljava/lang/String;
        //   410	8631	112	OnlineReview	Ljava/lang/String;
        //   414	8627	113	TV	Ljava/lang/String;
        //   418	8623	114	Website	Ljava/lang/String;
        //   422	8619	115	BuildingSignDriveBy	Ljava/lang/String;
        //   426	8615	116	Facebook	Ljava/lang/String;
        //   430	8611	117	School	Ljava/lang/String;
        //   434	8607	118	School_text	Ljava/lang/String;
        //   438	8603	119	Twitter	Ljava/lang/String;
        //   442	8599	120	Magazine	Ljava/lang/String;
        //   446	8595	121	Magazine_text	Ljava/lang/String;
        //   450	8591	122	Newspaper	Ljava/lang/String;
        //   454	8587	123	Newspaper_text	Ljava/lang/String;
        //   458	8583	124	FamilyFriend	Ljava/lang/String;
        //   462	8579	125	FamilyFriend_text	Ljava/lang/String;
        //   466	8575	126	UrgentCare	Ljava/lang/String;
        //   470	8571	127	UrgentCare_text	Ljava/lang/String;
        //   474	8567	128	CommunityEvent	Ljava/lang/String;
        //   478	8563	129	CommunityEvent_text	Ljava/lang/String;
        //   482	8559	130	Work	Ljava/lang/String;
        //   486	8555	131	Work_text	Ljava/lang/String;
        //   490	8551	132	Physician	Ljava/lang/String;
        //   494	8547	133	Physician_text	Ljava/lang/String;
        //   498	8543	134	Other	Ljava/lang/String;
        //   502	8539	135	Other_text	Ljava/lang/String;
        //   505	8536	136	SelfPayChk	I
        //   508	8533	137	VerifyChkBox	I
        //   524	8517	138	ID	I
        // Exception table:
        //   from	to	target	type
        //   524	8962	8965	java/lang/Exception
        //   601	1146	1149	java/lang/Exception
        //   1184	1457	1460	java/lang/Exception
    }

    void GETINPUTNacogdoches(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String ResultPdf = "";
        MergePdf mergePdf = new MergePdf();
        String Path1 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/";
        String Path2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        String State = "";
        String Country = "";
        String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        String Ethnicity = "";
        String Race = "";
        String TravellingChk = "";
        String TravelWhen = "";
        String TravelWhere = "";
        String TravelHowLong = "";
        String COVIDExposedChk = "";
        String SympFever = "";
        String SympBodyAches = "";
        String SympSoreThroat = "";
        String SympFatigue = "";
        String SympRash = "";
        String SympVomiting = "";
        String SympDiarrhea = "";
        String SympCough = "";
        String SympRunnyNose = "";
        String SympNausea = "";
        String SympFluSymptoms = "";
        String SympEyeConjunctivitis = "";
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a workercomp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        String CountryER = "";
        String ZipCodeER = "";
        String DateConcent = "";
        String WitnessConcent = "";
        String PatientBehalfConcent = "";
        String RelativeSignConcent = "";
        String DateConcent2 = "";
        String WitnessConcent2 = "";
        String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        String Work = "";
        String Work_text = "";
        String Physician = "";
        String Physician_text = "";
        String Other = "";
        String Other_text = "";
        int SelfPayChk = 0;
        int VerifyChkBox = 0;
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-'),  CASE WHEN Ethnicity = 1 THEN 'Hispanic or Latino' WHEN Ethnicity = 2 THEN ' Non Hispanic or Latino' WHEN Ethnicity = 3 THEN 'Others' ELSE 'Others' END  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                    Ethnicity = rset.getString(24);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next())
                        DoctorName = rset.getString(1);
                    rset.close();
                    stmt.close();
                } else {
                    DoctorName = "";
                }
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            try {
                Query = " Select CASE WHEN TravellingChk = 1 THEN 'YES' WHEN TravellingChk = 0 THEN 'NO' ELSE 'NO' END, IFNULL(DATE_FORMAT(TravelWhen,'%m/%d/%Y'),''),  IFNULL(TravelWhere,''), IFNULL(TravelHowLong,''), CASE WHEN COVIDExposedChk = 1 THEN 'YES' WHEN COVIDExposedChk = 0 THEN 'NO' ELSE 'NO' END,  CASE WHEN SympFever = 1 THEN 'YES' ELSE '' END, CASE WHEN SympBodyAches = 1 THEN 'YES' ELSE '' END, CASE WHEN SympSoreThroat = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympFatigue = 1 THEN 'YES' ELSE '' END,CASE WHEN SympRash = 1 THEN 'YES' ELSE '' END, CASE WHEN SympVomiting = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympDiarrhea = 1 THEN 'YES' ELSE '' END, CASE WHEN SympCough = 1 THEN 'YES' ELSE '' END, CASE WHEN SympRunnyNose = 1 THEN 'YES' ELSE '' END,  CASE WHEN SympNausea = 1 THEN 'YES' ELSE '' END, CASE WHEN SympFluSymptoms = 1 THEN 'YES' ELSE '' END, CASE WHEN SympEyeConjunctivitis = 1 THEN 'YES' ELSE '' END,  CASE WHEN Race = 1 THEN 'African American' WHEN Race = 2 THEN 'American Indian or Alska Native' WHEN Race = 3 THEN 'Asian' WHEN Race = 4 THEN 'Native Hawaiian or Other Pacific Islander'  WHEN Race = 5 THEN 'White' WHEN Race = 6 THEN 'Others' ELSE 'Others' END  from " + Database + ".PatientReg_Details where PatientRegId = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    TravellingChk = rset.getString(1);
                    TravelWhen = rset.getString(2);
                    TravelWhere = rset.getString(3);
                    TravelHowLong = rset.getString(4);
                    COVIDExposedChk = rset.getString(5);
                    SympFever = rset.getString(6);
                    SympBodyAches = rset.getString(7);
                    SympSoreThroat = rset.getString(8);
                    SympFatigue = rset.getString(9);
                    SympRash = rset.getString(10);
                    SympVomiting = rset.getString(11);
                    SympDiarrhea = rset.getString(12);
                    SympCough = rset.getString(13);
                    SympRunnyNose = rset.getString(14);
                    SympNausea = rset.getString(15);
                    SympFluSymptoms = rset.getString(16);
                    SympEyeConjunctivitis = rset.getString(17);
                    Race = rset.getString(18);
                }
                rset.close();
                stmt.close();
            } catch (Exception e) {
                out.println("Error in getting PatientReg_Details Table : " + e.getMessage());
            }
            if (SelfPayChk == 1) {
                Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WorkersCompPolicy = rset.getInt(1);
                    MotorVehAccident = rset.getInt(2);
                    if (WorkersCompPolicy == 0) {
                        WorkersCompPolicyString = "NO";
                    } else {
                        WorkersCompPolicyString = "YES";
                    }
                    if (MotorVehAccident == 0) {
                        MotorVehAccidentString = "NO";
                    } else {
                        MotorVehAccidentString = "YES";
                    }
                    PriInsurance = rset.getString(3);
                    MemId = rset.getString(4);
                    GrpNumber = rset.getString(5);
                    PriInsuranceName = rset.getString(6);
                    AddressIfDifferent = rset.getString(7);
                    PrimaryDOB = rset.getString(8);
                    PrimarySSN = rset.getString(9);
                    PatientRelationtoPrimary = rset.getString(10);
                    PrimaryOccupation = rset.getString(11);
                    PrimaryEmployer = rset.getString(12);
                    EmployerAddress = rset.getString(13);
                    EmployerPhone = rset.getString(14);
                    SecondryInsurance = rset.getString(15);
                    SubscriberName = rset.getString(16);
                    SubscriberDOB = rset.getString(17);
                    PatientRelationshiptoSecondry = rset.getString(18);
                    MemberID_2 = rset.getString(19);
                    GroupNumber_2 = rset.getString(20);
                }
                rset.close();
                stmt.close();
            }
            if (!PriInsuranceName.equals("")) {
                Query = "Select IFNULL(PayerName,'') from " + Database + ".ProfessionalPayers where Id = " + PriInsuranceName;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    PriInsuranceName = rset.getString(1);
                rset.close();
                stmt.close();
            }
            if (!SecondryInsurance.equals("")) {
                Query = "Select IFNULL(PayerName,'') from " + Database + ".ProfessionalPayers where Id = " + SecondryInsurance;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    SecondryInsurance = rset.getString(1);
                rset.close();
                stmt.close();
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                    continue;
                }
                Other_text = rset.getString(25);
            }
            rset.close();
            stmt.close();
            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/FINANCIAL_HARDSHIP_RELIEF.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setTextMatrix(370.0F, 330.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 270.0F);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 260.0F);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 250.0F);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 240.0F);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 230.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            if (SelfPayChk == 0) {
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/GeneralForm_Nacogdoches.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/nacogdoches/Result_" + ClientId + "_" + MRN + ".pdf";
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/GeneralForm_Nacogdoches.pdf";
            }
            String inputFilePath = "";
            inputFilePath = ResultPdf;
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf";
            OutputStream fos2 = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader2 = new PdfReader(inputFilePath);
            PdfStamper pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            GenerateBarCode barCode = new GenerateBarCode();
            String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
            Image image = Image.getInstance(BarCodeFilePath);
            image.scaleAbsolute(150.0F, 30.0F);
            for (int j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setTextMatrix(80.0F, 705.0F);
                    pdfContentByte2.showText(LastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(200.0F, 705.0F);
                    pdfContentByte2.showText(FirstName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(310.0F, 705.0F);
                    pdfContentByte2.showText(MiddleInitial);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(365.0F, 705.0F);
                    pdfContentByte2.showText("Title: " + Title);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(510.0F, 705.0F);
                    pdfContentByte2.showText(MaritalStatus);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0F, 675.0F);
                    pdfContentByte2.showText(SSN);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(260.0F, 675.0F);
                    pdfContentByte2.showText(PhNumber);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(350.0F, 675.0F);
                    pdfContentByte2.showText(DOB);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(510.0F, 675.0F);
                    pdfContentByte2.showText(gender);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(40.0F, 640.0F);
                    pdfContentByte2.showText(Address);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(255.0F, 640.0F);
                    pdfContentByte2.showText(CityStateZip);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(410.0F, 645.0F);
                    pdfContentByte2.showText(Email);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0F, 615.0F);
                    pdfContentByte2.showText(Employer);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(230.0F, 615.0F);
                    pdfContentByte2.showText(EmpContact);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0F, 615.0F);
                    pdfContentByte2.showText(Occupation);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0F, 585.0F);
                    pdfContentByte2.showText(PriCarePhy);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(230.0F, 585.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 495.0F);
                    pdfContentByte2.showText("Random CHecks COmplete String here");
                    pdfContentByte2.endText();
                    if (WorkersCompPolicy == 1 && MotorVehAccident == 0) {
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(440.0F, 452.0F);
                        pdfContentByte2.showText("YES (WCP) and NO (MVA)");
                        pdfContentByte2.endText();
                    } else if (WorkersCompPolicy == 0 && MotorVehAccident == 1) {
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(440.0F, 452.0F);
                        pdfContentByte2.showText("NO (WCP) and YES (MVA)");
                        pdfContentByte2.endText();
                    } else if (WorkersCompPolicy == 0 && MotorVehAccident == 0) {
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(440.0F, 452.0F);
                        pdfContentByte2.showText("NO (WCP) and NO (MVA)");
                        pdfContentByte2.endText();
                    } else if (WorkersCompPolicy == 1 && MotorVehAccident == 1) {
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(440.0F, 452.0F);
                        pdfContentByte2.showText("YES (WCP) and YES (MVA)");
                        pdfContentByte2.endText();
                    }
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(180.0F, 430.0F);
                    pdfContentByte2.showText(PriInsuranceName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0F, 395.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(180.0F, 395.0F);
                    pdfContentByte2.showText(SubscriberName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(330.0F, 395.0F);
                    pdfContentByte2.showText(PrimarySSN);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(470.0F, 395.0F);
                    pdfContentByte2.showText(SubscriberDOB);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0F, 360.0F);
                    pdfContentByte2.showText(MemId);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(240.0F, 360.0F);
                    pdfContentByte2.showText(GrpNumber);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(390.0F, 360.0F);
                    pdfContentByte2.showText(PatientRelationtoPrimary);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(480.0F, 360.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(315.0F, 330.0F);
                    pdfContentByte2.showText(SecondryInsurance);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(70.0F, 305.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(185.0F, 305.0F);
                    pdfContentByte2.showText(SubscriberName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(350.0F, 305.0F);
                    pdfContentByte2.showText(PrimarySSN);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(460.0F, 305.0F);
                    pdfContentByte2.showText(SubscriberDOB);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 270.0F);
                    pdfContentByte2.showText(MemberID_2);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(230.0F, 270.0F);
                    pdfContentByte2.showText(GroupNumber_2);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(360.0F, 270.0F);
                    pdfContentByte2.showText(PatientRelationshiptoSecondry);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 80.0F);
                    pdfContentByte2.showText(NextofKinName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(285.0F, 80.0F);
                    pdfContentByte2.showText(RelationToPatientER);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(395.0F, 80.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(500.0F, 80.0F);
                    pdfContentByte2.showText(PhoneNumberER);
                    pdfContentByte2.endText();
                }
                if (j == 2) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 80.0F);
                    pdfContentByte2.showText(LastName + " , " + FirstName + " " + MiddleInitial);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 70.0F);
                    pdfContentByte2.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 60.0F);
                    pdfContentByte2.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 50.0F);
                    pdfContentByte2.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 40.0F);
                    pdfContentByte2.showText("Dr. " + DoctorName);
                    pdfContentByte2.endText();
                }
                if (j == 3) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 80.0F);
                    pdfContentByte2.showText(LastName + " , " + FirstName + " " + MiddleInitial);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 70.0F);
                    pdfContentByte2.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 60.0F);
                    pdfContentByte2.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 50.0F);
                    pdfContentByte2.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 40.0F);
                    pdfContentByte2.showText("Dr. " + DoctorName);
                    pdfContentByte2.endText();
                }
                if (j == 4) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(100.0F, 160.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0F, 160.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(440.0F, 120.0F);
                    pdfContentByte2.showText(NextofKinName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 80.0F);
                    pdfContentByte2.showText(LastName + " , " + FirstName + " " + MiddleInitial);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 70.0F);
                    pdfContentByte2.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 60.0F);
                    pdfContentByte2.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 50.0F);
                    pdfContentByte2.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(60.0F, 40.0F);
                    pdfContentByte2.showText("Dr. " + DoctorName);
                    pdfContentByte2.endText();
                }
                if (j == 5) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(425.0F, 275.0F);
                    pdfContentByte2.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(440.0F, 240.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(440.0F, 200.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
                if (j == 6) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(135.0F, 730.0F);
                    pdfContentByte2.showText(LastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(425.0F, 730.0F);
                    pdfContentByte2.showText(FirstName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(120.0F, 715.0F);
                    pdfContentByte2.showText(DOB);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(415.0F, 715.0F);
                    pdfContentByte2.showText(PhNumber);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(90.0F, 700.0F);
                    pdfContentByte2.showText(Address);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0F, 700.0F);
                    pdfContentByte2.showText(CityStateZip);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0F, 552.0F);
                    pdfContentByte2.showText(DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(445.0F, 130.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(280.0F, 115.0F);
                    pdfContentByte2.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte2.endText();
                }
                if (j == 7) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    if (PatientRelationtoPrimary.equals("Self")) {
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(120.0F, 645.0F);
                        pdfContentByte2.showText(FirstName + " " + MiddleInitial + " " + LastName);
                        pdfContentByte2.endText();
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(360.0F, 645.0F);
                        pdfContentByte2.showText(PhNumber);
                        pdfContentByte2.endText();
                    } else {
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(120.0F, 645.0F);
                        pdfContentByte2.showText(NextofKinName);
                        pdfContentByte2.endText();
                        pdfContentByte2.beginText();
                        pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte2.setColorFill(BaseColor.BLACK);
                        pdfContentByte2.setTextMatrix(360.0F, 645.0F);
                        pdfContentByte2.showText(PhoneNumberER);
                        pdfContentByte2.endText();
                    }
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(120.0F, 612.0F);
                    pdfContentByte2.showText(FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(120.0F, 465.0F);
                    pdfContentByte2.showText(DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(410.0F, 150.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/TempDir/PT_FORM_HB2041_DISCLOSURE_ONLY_Excel_LONGVIEW_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/NacogdochesPdfs/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
        } catch (Exception e) {
            out.println(e.getMessage());
        }
    }

    void GETINPUTFrontLine(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String ResultPdf = "";
        MergePdf mergePdf = new MergePdf();
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        String State = "";
        String City = "";
        String Country = "";
        String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int FoundAddInfo = 0;
        String CovidTestDate = "";
        String Ethnicity = "";
        String Race = "";
        String TravellingChk = "";
        String TravelWhen = "";
        String TravelWhere = "";
        String TravelHowLong = "";
        String CovidExpWhen = "";
        String COVIDExposedChk = "";
        String SympFever = "";
        String SympBodyAches = "";
        String SympSoreThroat = "";
        String SympFatigue = "";
        String SympRash = "";
        String SympVomiting = "";
        String SympDiarrhea = "";
        String SympCough = "";
        String SympRunnyNose = "";
        String SympNausea = "";
        String SympFluSymptoms = "";
        String SympEyeConjunctivitis = "";
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        String CountryER = "";
        String ZipCodeER = "";
        String DateConcent = "";
        String WitnessConcent = "";
        String PatientBehalfConcent = "";
        String RelativeSignConcent = "";
        String DateConcent2 = "";
        String WitnessConcent2 = "";
        String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        String Work = "";
        String Work_text = "";
        String Physician = "";
        String Physician_text = "";
        String Other = "";
        String Other_text = "";
        String COVIDStatus = "";
        String VisitNumber = "";
        int SelfPayChk = 0;
        int VerifyChkBox = 0;
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), " +
                        "IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), " +
                        "IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), " +
                        "IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), " +
                        "IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, " +
                        "IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-'),  " +
                        "CASE WHEN Ethnicity = 1 THEN 'Hispanic or Latino' WHEN Ethnicity = 2 THEN ' Non Hispanic or Latino' " +
                        "WHEN Ethnicity = 3 THEN 'Others' ELSE 'Others' END, IFNULL(City,''), IFNULL(State,''), IFNULL(ZipCode,''), " +
                        "IFNULL(COVIDStatus,'')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                    Ethnicity = rset.getString(24);
                    City = rset.getString(25);
                    State = rset.getString(26);
                    ZipCode = rset.getString(27);
                    COVIDStatus = rset.getString(28);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next())
                        DoctorName = rset.getString(1);
                    rset.close();
                    stmt.close();
                } else {
                    DoctorName = "";
                }
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            String CovidTest = "";
            if (COVIDStatus.equals("1")) {
                CovidTest = "YES";
            } else if (COVIDStatus.equals("0")) {
                CovidTest = "NO";
            } else {
                CovidTest = "";
            }
            Query = "Select COUNT(*) from " + Database + ".Patient_AdditionalInfo where PatientRegId = " + PatientRegId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                FoundAddInfo = rset.getInt(1);
            rset.close();
            stmt.close();
            if (FoundAddInfo > 0) {
                Query = "Select IFNULL(Date_format(CovidTestDate,'%m/%d/%Y'),'') " +
                        "from " + Database + ".Patient_AdditionalInfo where PatientRegId = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    CovidTestDate = rset.getString(1);
                rset.close();
                stmt.close();
                out.println(Query);
            }
            try {
                Query = " Select CASE " +
                        "WHEN TravellingChk = 1 THEN 'YES' " +
                        "WHEN TravellingChk = 0 THEN 'NO' ELSE 'NO' END,  " +
                        "IFNULL(DATE_FORMAT(TravelWhen,'%m/%d/%Y'),''),  IFNULL(TravelWhere,''), IFNULL(TravelHowLong,''), " +
                        "CASE " +
                        "WHEN COVIDExposedChk = 1 THEN 'YES' " +
                        "WHEN COVIDExposedChk = 0 THEN 'NO' ELSE 'NO' END,  " +
                        "CASE " +
                        "WHEN SympFever = 1 THEN 'YES' " +
                        "ELSE '' END, " +
                        "CASE WHEN SympBodyAches = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympSoreThroat = 1 THEN 'YES' ELSE '' END,  " +
                        "CASE WHEN SympFatigue = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympRash = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympVomiting = 1 THEN 'YES' ELSE '' END,  " +
                        "CASE WHEN SympDiarrhea = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympCough = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympRunnyNose = 1 THEN 'YES' ELSE '' END,  " +
                        "CASE WHEN SympNausea = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympFluSymptoms = 1 THEN 'YES' ELSE '' END, " +
                        "CASE WHEN SympEyeConjunctivitis = 1 THEN 'YES' ELSE '' END,  " +
                        "CASE " +
                        "WHEN Race = 1 THEN 'African American' " +
                        "WHEN Race = 2 THEN 'American Indian or Alska Native' " +
                        "WHEN Race = 3 THEN 'Asian' " +
                        "WHEN Race = 4 THEN 'Native Hawaiian or Other Pacific Islander'  " +
                        "WHEN Race = 5 THEN 'White' " +
                        "WHEN Race = 6 THEN 'Others' ELSE 'Others' END, " +
                        "IFNULL(DATE_FORMAT(CovidExpWhen,'%m/%d/%Y'),'') " +
                        "from " + Database + ".PatientReg_Details where PatientRegId = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    TravellingChk = rset.getString(1);
                    TravelWhen = rset.getString(2);
                    TravelWhere = rset.getString(3);
                    TravelHowLong = rset.getString(4);
                    COVIDExposedChk = rset.getString(5);
                    SympFever = rset.getString(6);
                    SympBodyAches = rset.getString(7);
                    SympSoreThroat = rset.getString(8);
                    SympFatigue = rset.getString(9);
                    SympRash = rset.getString(10);
                    SympVomiting = rset.getString(11);
                    SympDiarrhea = rset.getString(12);
                    SympCough = rset.getString(13);
                    SympRunnyNose = rset.getString(14);
                    SympNausea = rset.getString(15);
                    SympFluSymptoms = rset.getString(16);
                    SympEyeConjunctivitis = rset.getString(17);
                    Race = rset.getString(18);
                    CovidExpWhen = rset.getString(19);
                }
                rset.close();
                stmt.close();
            } catch (Exception e2) {
                out.println("Error in getting PatientReg_Details Table : " + e2.getMessage());
            }
            if (SelfPayChk == 1) {
                Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), " +
                        "IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), " +
                        "IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), " +
                        "IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  " +
                        "IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), " +
                        "IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), " +
                        "IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WorkersCompPolicy = rset.getInt(1);
                    MotorVehAccident = rset.getInt(2);
                    if (WorkersCompPolicy == 0) {
                        WorkersCompPolicyString = "N";
                    } else {
                        WorkersCompPolicyString = "Y";
                    }
                    if (MotorVehAccident == 0) {
                        MotorVehAccidentString = "N";
                    } else {
                        MotorVehAccidentString = "Y";
                    }
                    PriInsurance = rset.getString(3);
                    MemId = rset.getString(4);
                    GrpNumber = rset.getString(5);
                    PriInsuranceName = rset.getString(6);
                    AddressIfDifferent = rset.getString(7);
                    PrimaryDOB = rset.getString(8);
                    PrimarySSN = rset.getString(9);
                    PatientRelationtoPrimary = rset.getString(10);
                    PrimaryOccupation = rset.getString(11);
                    PrimaryEmployer = rset.getString(12);
                    EmployerAddress = rset.getString(13);
                    EmployerPhone = rset.getString(14);
                    SecondryInsurance = rset.getString(15);
                    SubscriberName = rset.getString(16);
                    SubscriberDOB = rset.getString(17);
                    PatientRelationshiptoSecondry = rset.getString(18);
                    MemberID_2 = rset.getString(19);
                    GroupNumber_2 = rset.getString(20);
                }
                rset.close();
                stmt.close();
            }
            if (!PriInsuranceName.equals("")) {
                Query = "Select IFNULL(PayerName,'') from " + Database + ".ProfessionalPayers where id = " + PriInsuranceName;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    PriInsuranceName = rset.getString(1);
                rset.close();
                stmt.close();
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), " +
                    "CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  " +
                    "IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') " +
                    "from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = "Select MAX(VisitNumber) from " + Database + ".PatientVisit where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                VisitNumber = rset.getString(1).trim();
            rset.close();
            stmt.close();
            VisitNumber = "VN-" + MRN + "-" + VisitNumber;
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, " +
                    "Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), " +
                    "Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, " +
                    "IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), " +
                    "IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') " +
                    "from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                    continue;
                }
                Other_text = rset.getString(25);
            }
            rset.close();
            stmt.close();
            String HearAboutUsString = "";
            if (ReturnPatient.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Return Patient, ";
            if (Google.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Google, ";
            if (MapSearch.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Map Search, ";
            if (OnlineReview.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Online Review, ";
            if (TV.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "TV, ";
            if (Website.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Website, ";
            if (BuildingSignDriveBy.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Building Sign, ";
            if (Facebook.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Facebook, ";
            if (School.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "School, ";
            if (Twitter.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Twitter, ";
            if (Magazine.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Magazine, ";
            if (Newspaper.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Newspaper, ";
            if (FamilyFriend.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Friend / Family, ";
            if (UrgentCare.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Urgent Care, ";
            if (CommunityEvent.toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Comminuty Event, ";
            if ("".toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Work, ";
            if ("".toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Physician, ";
            if ("".toUpperCase().equals("YES"))
                HearAboutUsString = HearAboutUsString + "Others ";
            String SymptomsString = "";
            if (SympFever.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Fever, ";
            if (SympBodyAches.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Body Aches, ";
            if (SympSoreThroat.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Sore Throat, ";
            if (SympFatigue.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Fatigue, ";
            if (SympRash.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Rash, ";
            if (SympVomiting.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Vomitting, ";
            if (SympDiarrhea.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Diarrhea, ";
            if (SympCough.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Cough, ";
            if (SympRunnyNose.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Runny Nose, ";
            if (SympNausea.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Nausea, ";
            if (SympFluSymptoms.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Flu-like Symptoms, ";
            if (SympEyeConjunctivitis.toUpperCase().equals("YES"))
                SymptomsString = SymptomsString + "Eye Conjunctivitis ";
            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/FinancialHardShip.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/TempDir/FinancialHardShip_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            int i;
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(123.0F, 605.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(435.0F, 605.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 500.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 550.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(329.0F, 300.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(329.0F, 110.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/PromptPayAgreement.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/TempDir/PromptPayAgreement_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 275.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            if (SelfPayChk == 1) {
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/GeneralForm_FrontLineER.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/TempDir/FinancialHardShip_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                if (ClientId == 27) {
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/frontline/Result_" + ClientId + "_" + MRN + ".pdf";
                } else {
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/richmond/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/GeneralForm_FrontLineER.pdf";
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/TempDir/PromptPayAgreement_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                if (ClientId == 27) {
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/frontline/Result_" + ClientId + "_" + MRN + ".pdf";
                } else {
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/richmond/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            String inputFilePath = "";
            String outputFilePath = "";
            String UID = "";
            inputFilePath = ResultPdf;
            outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_.pdf";
            OutputStream fos = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader = new PdfReader(inputFilePath);
            int pageCount = pdfReader.getNumberOfPages();
            PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            GenerateBarCode barCode = new GenerateBarCode();
            String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
            Image image = Image.getInstance(BarCodeFilePath);
            image.scaleAbsolute(150.0F, 30.0F);
            Image SignImages = null;
            File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/frontline/img_0_" + ID + ".png");
            boolean exists = tmpDir.exists();
            if (exists) {
                Query = "Select UID from " + Database + ".SignRequest where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    UID = rset.getString(1);
                rset.close();
                stmt.close();
                SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/frontline/img_0_" + ID + ".png");
                SignImages.scaleAbsolute(80.0F, 30.0F);
                outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
            } else {
                SignImages = null;
            }
            for (int j = 1; j <= pdfReader.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0F, 770.0F);
                    pdfContentByte.showText(UID);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 660.0F);
                    pdfContentByte.showText(ReasonVisit);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(388.0F, 660.0F);
                    pdfContentByte.showText(MotorVehAccidentString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(453.0F, 660.0F);
                    pdfContentByte.showText(WorkersCompPolicyString);
                    pdfContentByte.endText();
                    if (SelfPayChk == 1) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(486.0F, 660.0F);
                        pdfContentByte.showText("(Y)");
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(560.0F, 660.0F);
                        pdfContentByte.showText("(N)");
                        pdfContentByte.endText();
                    } else if (SelfPayChk == 0) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(486.0F, 660.0F);
                        pdfContentByte.showText("(N)");
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(560.0F, 660.0F);
                        pdfContentByte.showText("(Y)");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(486.0F, 660.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(560.0F, 660.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0F, 635.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 635.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(520.0F, 635.0F);
                    pdfContentByte.showText(Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0F, 595.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0F, 595.0F);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0F, 595.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 570.0F);
                    pdfContentByte.showText(City);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 570.0F);
                    pdfContentByte.showText(State);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 570.0F);
                    pdfContentByte.showText(ZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 550.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 550.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450.0F, 550.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 525.0F);
                    pdfContentByte.showText(PrimaryEmployer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(395.0F, 525.0F);
                    pdfContentByte.showText(PrimaryOccupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0F, 502.0F);
                    pdfContentByte.showText(EmployerAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0F, 502.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(409.0F, 502.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 502.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(105.0F, 480.0F);
                    pdfContentByte.showText(MaritalStatus);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 480.0F);
                    pdfContentByte.showText(gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 480.0F);
                    pdfContentByte.showText(Email);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 460.0F);
                    pdfContentByte.showText(NextofKinName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(360.0F, 460.0F);
                    pdfContentByte.showText(PhoneNumberER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(520.0F, 460.0F);
                    pdfContentByte.showText(RelationToPatientER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 438.0F);
                    pdfContentByte.showText(AddressER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(455.0F, 438.0F);
                    pdfContentByte.showText(" ,  , ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 367.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310.0F, 367.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 367.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 335.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310.0F, 335.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0F, 335.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 310.0F);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(445.0F, 310.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(540.0F, 310.0F);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450.0F, 198.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 170.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(200.0F, 195.0F);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 167.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 134.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 123.0F);
                    pdfContentByte.showText(ClientName + "  Sex: " + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 113.0F);
                    pdfContentByte.showText("DOB:" + DOB + "  Age:(" + Age + ")");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 103.0F);
                    pdfContentByte.showText("MRN:" + MRN + "  DOS:" + DOS + "");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 93.0F);
                    pdfContentByte.showText("ACT#: " + VisitNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 83.0F);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
                if (j == 2) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 142.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 100.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(170.0F, 90.0F);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 83.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 63.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
                if (j == 3) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 613.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 580.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 550.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0F, 550.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(110.0F, 150.0F);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 150.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
                if (j == 4) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 140.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 140.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
                if (j == 5) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0F, 325.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(220.0F, 275.0F);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 275.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 242.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
                if (j == 6) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0F, 547.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 547.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 505.0F);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 460.0F);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 460.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(210.0F, 230.0F);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 230.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
                if (j == 7) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 473.0F);
                    pdfContentByte.showText(CovidTest);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450.0F, 473.0F);
                    pdfContentByte.showText(CovidTestDate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 442.0F);
                    pdfContentByte.showText(COVIDExposedChk);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(525.0F, 442.0F);
                    pdfContentByte.showText(CovidExpWhen);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(325.0F, 415.0F);
                    pdfContentByte.showText(SymptomsString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 390.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(210.0F, 115.0F);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 115.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0F, 65.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName + " " + MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 65.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.showTextAligned(0, LastName + " , " + FirstName + "    DOB: " + DOB + "    Sex: " + gender + "      DOS: " + DOS + "     MRN: " + MRN + "      ACCT#: " + VisitNumber, 600.0F, 150.0F, 90.0F);
                    pdfContentByte.endText();
                }
            }
            pdfStamper.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/TempDir/FinancialHardShip_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/FrontLineER/TempDir/PromptPayAgreement_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
        } catch (Exception e) {
            out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < (e.getStackTrace()).length; j++)
                str = str + e.getStackTrace()[j] + "<br>";
            out.println(str);
        }
    }

    void GETINPUTERDallas(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        MergePdf mergePdf = new MergePdf();
        int ID = Integer.parseInt(request.getParameter("ID").trim());
        String Path1 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/";
        String Path2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/";
        String ResultPdf = "";
        String Title = "";
        String FirstName = "";
        String LastName = "";
        String MiddleInitial = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String ConfirmEmail = "";
        String MaritalStatus = "";
        String AreaCode = "";
        String PhNumber = "";
        String Address = "";
        String Address2 = "";
        String City = "";
        String State = "";
        String ZipCode = "";
        String Ethnicity = "";
        String Ethnicity_OthersText = "";
        String SSN = "";
        String EmployementChk = "";
        String Employer = "";
        String Occupation = "";
        String EmpContact = "";
        String PrimaryCarePhysicianChk = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String PriCarePhyAddress = "";
        String PriCarePhyAddress2 = "";
        String PriCarePhyCity = "";
        String PriCarePhyState = "";
        String PriCarePhyZipCode = "";
        String PatientMinorChk = "";
        String GuarantorChk = "";
        String Guarantor = "";
        String GuarantorDOB = "";
        String GuarantorSEX = "";
        String GuarantorSSN = "";
        String GuarantorAddress = "";
        String GuarantorPhoneNumber = "";
        String GuarantorEmployer = "";
        String GuarantorEmployerAreaCode = "";
        String GuarantorEmployerPhNumber = "";
        String GuarantorEmployerAddress = "";
        String GuarantorEmployerAddress2 = "";
        String GuarantorEmployerCity = "";
        String GuarantorEmployerState = "";
        String GuarantorEmployerZipCode = "";
        int WorkersCompPolicyChk = 0;
        String WorkCompPolicyStr = "";
        String WCPDateofInjury = "";
        String WCPCaseNo = "";
        String WCPGroupNo = "";
        String WCPMemberId = "";
        String WCPInjuryRelatedAutoMotorAccident = "";
        String WCPInjuryRelatedWorkRelated = "";
        String WCPInjuryRelatedOtherAccident = "";
        String WCPInjuryRelatedNoAccident = "";
        String WCPInjuryOccurVehicle = "";
        String WCPInjuryOccurWork = "";
        String WCPInjuryOccurHome = "";
        String WCPInjuryOccurOther = "";
        String WCPInjuryDescription = "";
        String WCPHRFirstName = "";
        String WCPHRLastName = "";
        String WCPHRAreaCode = "";
        String WCPHRPhoneNumber = "";
        String WCPHRAddress = "";
        String WCPHRAddress2 = "";
        String WCPHRCity = "";
        String WCPHRState = "";
        String WCPHRZipCode = "";
        String WCPPlanName = "";
        String WCPCarrierName = "";
        String WCPPayerAreaCode = "";
        String WCPPayerPhoneNumber = "";
        String WCPCarrierAddress = "";
        String WCPCarrierAddress2 = "";
        String WCPCarrierCity = "";
        String WCPCarrierState = "";
        String WCPCarrierZipCode = "";
        String WCPAdjudicatorFirstName = "";
        String WCPAdjudicatorLastName = "";
        String WCPAdjudicatorAreaCode = "";
        String WCPAdjudicatorPhoneNumber = "";
        String WCPAdjudicatorFaxAreaCode = "";
        String WCPAdjudicatorFaxPhoneNumber = "";
        int MotorVehicleAccidentChk = 0;
        String MotorVehAccidentStr = "";
        String AutoInsuranceInformationChk = "0";
        String AIIDateofAccident = "";
        String AIIAutoClaim = "";
        String AIIAccidentLocationAddress = "";
        String AIIAccidentLocationAddress2 = "";
        String AIIAccidentLocationCity = "";
        String AIIAccidentLocationState = "";
        String AIIAccidentLocationZipCode = "";
        String AIIRoleInAccident = "";
        String AIITypeOfAutoIOnsurancePolicy = "";
        String AIIPrefixforReponsibleParty = "";
        String AIIFirstNameforReponsibleParty = "";
        String AIIMiddleNameforReponsibleParty = "";
        String AIILastNameforReponsibleParty = "";
        String AIISuffixforReponsibleParty = "";
        String AIICarrierResponsibleParty = "";
        String AIICarrierResponsiblePartyAddress = "";
        String AIICarrierResponsiblePartyAddress2 = "";
        String AIICarrierResponsiblePartyCity = "";
        String AIICarrierResponsiblePartyState = "";
        String AIICarrierResponsiblePartyZipCode = "";
        String AIICarrierResponsiblePartyAreaCode = "";
        String AIICarrierResponsiblePartyPhoneNumber = "";
        String AIICarrierResponsiblePartyPolicyNumber = "";
        String AIIResponsiblePartyAutoMakeModel = "";
        String AIIResponsiblePartyLicensePlate = "";
        String AIIFirstNameOfYourPolicyHolder = "";
        String AIILastNameOfYourPolicyHolder = "";
        String AIINameAutoInsuranceOfYourVehicle = "";
        String AIIYourInsuranceAddress = "";
        String AIIYourInsuranceAddress2 = "";
        String AIIYourInsuranceCity = "";
        String AIIYourInsuranceState = "";
        String AIIYourInsuranceZipCode = "";
        String AIIYourInsuranceAreaCode = "";
        String AIIYourInsurancePhoneNumber = "";
        String AIIYourInsurancePolicyNo = "";
        String AIIYourLicensePlate = "";
        String AIIYourCarMakeModelYear = "";
        int HealthInsuranceChk = 0;
        String GovtFundedInsurancePlanChk = "";
        int GFIPMedicare = 0;
        int GFIPMedicaid = 0;
        int GFIPCHIP = 0;
        int GFIPTricare = 0;
        int GFIPVHA = 0;
        int GFIPIndianHealth = 0;
        String InsuranceSubPatient = null;
        String InsuranceSubGuarantor = null;
        String InsuranceSubOther = null;
        String HIPrimaryInsurance = "";
        String HISubscriberFirstName = "";
        String HISubscriberLastName = "";
        String HISubscriberDOB = "";
        String HISubscriberSSN = "";
        String HISubscriberRelationtoPatient = "";
        String HISubscriberGroupNo = "";
        String HISubscriberPolicyNo = "";
        String SecondHealthInsuranceChk = "";
        String SHISecondaryName = "";
        String SHISubscriberFirstName = "";
        String SHISubscriberLastName = "";
        String SHISubscriberDOB = "";
        String SHISubscriberRelationtoPatient = "";
        String SHISubscriberGroupNo = "";
        String SHISubscriberPolicyNo = "";
        int SelfPayChk = 0;
        String FirstNameNoSpaces = "";
        String CityStateZip = "";
        String Country = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    ClientName = rset.getString(1);
                rset.close();
                stmt.close();
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            Query = "Select  Ethnicity,Ethnicity_OthersText,EmployementChk,Employer,Occupation,EmpContact,PrimaryCarePhysicianChk,PriCarePhy,ReasonVisit,PriCarePhyAddress,PriCarePhyCity,PriCarePhyState,PriCarePhyZipCode,PatientMinorChk,GuarantorChk,GuarantorEmployer,GuarantorEmployerPhNumber,GuarantorEmployerAddress,GuarantorEmployerCity,GuarantorEmployerState,GuarantorEmployerZipCode,CreatedDate,WorkersCompPolicyChk,MotorVehicleAccidentChk,HealthInsuranceChk from " + Database + ".PatientReg_Details where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                Ethnicity = rset.getString(1);
                Ethnicity_OthersText = rset.getString(2);
                EmployementChk = rset.getString(3);
                Employer = rset.getString(4);
                Occupation = rset.getString(5);
                EmpContact = rset.getString(6);
                PrimaryCarePhysicianChk = rset.getString(7);
                PriCarePhy = rset.getString(8);
                if (ReasonVisit == null)
                    ReasonVisit = rset.getString(9);
                PriCarePhyAddress = rset.getString(10);
                PriCarePhyCity = rset.getString(11);
                PriCarePhyState = rset.getString(12);
                PriCarePhyZipCode = rset.getString(13);
                PatientMinorChk = rset.getString(14);
                GuarantorChk = rset.getString(15);
                GuarantorEmployer = rset.getString(16);
                GuarantorEmployerPhNumber = rset.getString(17);
                GuarantorEmployerAddress = rset.getString(18);
                GuarantorEmployerCity = rset.getString(19);
                GuarantorEmployerState = rset.getString(20);
                GuarantorEmployerZipCode = rset.getString(21);
                WorkersCompPolicyChk = rset.getInt(23);
                MotorVehicleAccidentChk = rset.getInt(24);
                HealthInsuranceChk = rset.getInt(25);
            }
            rset.close();
            stmt.close();
            if (WorkersCompPolicyChk == 1)
                try {
                    Query = "Select IFNULL(DATE_FORMAT(WCPDateofInjury,'%m/%d/%Y'),''), IFNULL(WCPCaseNo,''), IFNULL(WCPGroupNo,''), IFNULL(WCPMemberId,''), IFNULL(WCPInjuryRelatedAutoMotorAccident,''), IFNULL(WCPInjuryRelatedWorkRelated,''), IFNULL(WCPInjuryRelatedOtherAccident,''), IFNULL(WCPInjuryRelatedNoAccident,''), IFNULL(WCPInjuryOccurVehicle,''), IFNULL(WCPInjuryOccurWork,''), IFNULL(WCPInjuryOccurHome,''), IFNULL(WCPInjuryOccurOther,''), IFNULL(WCPInjuryDescription,''), IFNULL(WCPHRFirstName,''), IFNULL(WCPHRLastName,''), IFNULL(WCPHRPhoneNumber,''), IFNULL(WCPHRAddress,''), IFNULL(WCPHRCity,''), IFNULL(WCPHRState,''), IFNULL(WCPHRZipCode,''), IFNULL(WCPPlanName,''), IFNULL(WCPCarrierName,''), IFNULL(WCPPayerPhoneNumber,''), IFNULL(WCPCarrierAddress,''), IFNULL(WCPCarrierCity,''), IFNULL(WCPCarrierState,''), IFNULL(WCPCarrierZipCode,''), IFNULL(WCPAdjudicatorFirstName,''), IFNULL(WCPAdjudicatorLastName,''), IFNULL(WCPAdjudicatorPhoneNumber,''), IFNULL(WCPAdjudicatorFaxPhoneNumber,'') from " + Database + ".Patient_WorkCompPolicy where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        WCPDateofInjury = rset.getString(1);
                        WCPCaseNo = rset.getString(2);
                        WCPGroupNo = rset.getString(3);
                        WCPMemberId = rset.getString(4);
                        WCPInjuryRelatedAutoMotorAccident = rset.getString(5);
                        WCPInjuryRelatedWorkRelated = rset.getString(6);
                        WCPInjuryRelatedOtherAccident = rset.getString(7);
                        WCPInjuryRelatedNoAccident = rset.getString(8);
                        WCPInjuryOccurVehicle = rset.getString(9);
                        WCPInjuryOccurWork = rset.getString(10);
                        WCPInjuryOccurHome = rset.getString(11);
                        WCPInjuryOccurOther = rset.getString(12);
                        WCPInjuryDescription = rset.getString(13);
                        WCPHRFirstName = rset.getString(14);
                        WCPHRLastName = rset.getString(15);
                        WCPHRPhoneNumber = rset.getString(16);
                        WCPHRAddress = rset.getString(17);
                        WCPHRCity = rset.getString(18);
                        WCPHRState = rset.getString(19);
                        WCPHRZipCode = rset.getString(20);
                        WCPPlanName = rset.getString(21);
                        WCPCarrierName = rset.getString(22);
                        WCPPayerPhoneNumber = rset.getString(23);
                        WCPCarrierAddress = rset.getString(24);
                        WCPCarrierCity = rset.getString(25);
                        WCPCarrierState = rset.getString(26);
                        WCPCarrierZipCode = rset.getString(27);
                        WCPAdjudicatorFirstName = rset.getString(28);
                        WCPAdjudicatorLastName = rset.getString(29);
                        WCPAdjudicatorPhoneNumber = rset.getString(30);
                        WCPAdjudicatorFaxPhoneNumber = rset.getString(31);
                    }
                    rset.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_WorkCompPolicy");
                    Services.DumException("DownloadBundle", "GetINput ERDallas", request, e, getServletContext());
                }
            if (MotorVehicleAccidentChk == 1)
                try {
                    Query = "Select IFNULL(AutoInsuranceInformationChk,'0'), IFNULL(DATE_FORMAT(AIIDateofAccident,'%m/%d/%Y'),''), IFNULL(AIIAutoClaim,''), IFNULL(AIIAccidentLocationAddress,''), IFNULL(AIIAccidentLocationCity,''), IFNULL(AIIAccidentLocationState,''), IFNULL(AIIAccidentLocationZipCode,''), IFNULL(AIIRoleInAccident,''), IFNULL(AIITypeOfAutoIOnsurancePolicy,''), IFNULL(AIIPrefixforReponsibleParty,''), IFNULL(AIIFirstNameforReponsibleParty,''), IFNULL(AIIMiddleNameforReponsibleParty,''), IFNULL(AIILastNameforReponsibleParty,''), IFNULL(AIISuffixforReponsibleParty,''), IFNULL(AIICarrierResponsibleParty,''), IFNULL(AIICarrierResponsiblePartyAddress,''), IFNULL(AIICarrierResponsiblePartyCity,''), IFNULL(AIICarrierResponsiblePartyState,''), IFNULL(AIICarrierResponsiblePartyZipCode,''), IFNULL(AIICarrierResponsiblePartyPhoneNumber,''), IFNULL(AIICarrierResponsiblePartyPolicyNumber,''), IFNULL(AIIResponsiblePartyAutoMakeModel,''), IFNULL(AIIResponsiblePartyLicensePlate,''), IFNULL(AIIFirstNameOfYourPolicyHolder,''), IFNULL(AIILastNameOfYourPolicyHolder,''), IFNULL(AIINameAutoInsuranceOfYourVehicle,''), IFNULL(AIIYourInsuranceAddress,''), IFNULL(AIIYourInsuranceCity,''), IFNULL(AIIYourInsuranceState,''), IFNULL(AIIYourInsuranceZipCode,''), IFNULL(AIIYourInsurancePhoneNumber,''),IFNULL(AIIYourInsurancePolicyNo,''), IFNULL(AIIYourLicensePlate,''), IFNULL(AIIYourCarMakeModelYear,'') from " + Database + ".Patient_AutoInsuranceInfo where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        AutoInsuranceInformationChk = rset.getString(1);
                        AIIDateofAccident = rset.getString(2);
                        AIIAutoClaim = rset.getString(3);
                        AIIAccidentLocationAddress = rset.getString(4);
                        AIIAccidentLocationCity = rset.getString(5);
                        AIIAccidentLocationState = rset.getString(6);
                        AIIAccidentLocationZipCode = rset.getString(7);
                        AIIRoleInAccident = rset.getString(8);
                        AIITypeOfAutoIOnsurancePolicy = rset.getString(9);
                        AIIPrefixforReponsibleParty = rset.getString(10);
                        AIIFirstNameforReponsibleParty = rset.getString(11);
                        AIIMiddleNameforReponsibleParty = rset.getString(12);
                        AIILastNameforReponsibleParty = rset.getString(13);
                        AIISuffixforReponsibleParty = rset.getString(14);
                        AIICarrierResponsibleParty = rset.getString(15);
                        AIICarrierResponsiblePartyAddress = rset.getString(16);
                        AIICarrierResponsiblePartyCity = rset.getString(17);
                        AIICarrierResponsiblePartyState = rset.getString(18);
                        AIICarrierResponsiblePartyZipCode = rset.getString(19);
                        AIICarrierResponsiblePartyPhoneNumber = rset.getString(20);
                        AIICarrierResponsiblePartyPolicyNumber = rset.getString(21);
                        AIIResponsiblePartyAutoMakeModel = rset.getString(22);
                        AIIResponsiblePartyLicensePlate = rset.getString(23);
                        AIIFirstNameOfYourPolicyHolder = rset.getString(24);
                        AIILastNameOfYourPolicyHolder = rset.getString(25);
                        AIINameAutoInsuranceOfYourVehicle = rset.getString(26);
                        AIIYourInsuranceAddress = rset.getString(27);
                        AIIYourInsuranceCity = rset.getString(28);
                        AIIYourInsuranceState = rset.getString(29);
                        AIIYourInsuranceZipCode = rset.getString(30);
                        AIIYourInsurancePhoneNumber = rset.getString(31);
                        AIIYourInsurancePolicyNo = rset.getString(32);
                        AIIYourLicensePlate = rset.getString(33);
                        AIIYourCarMakeModelYear = rset.getString(34);
                    }
                    rset.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_AutoInsuranceInfo");
                    Services.DumException("DownloadBundle", "GetINput ER Dallas", request, e, getServletContext());
                }
            if (HealthInsuranceChk == 1)
                try {
                    Query = "Select IFNULL(GovtFundedInsurancePlanChk,'0'), IFNULL(GFIPMedicare,'0'), IFNULL(GFIPMedicaid,'0'), IFNULL(GFIPCHIP,'0'), IFNULL(GFIPTricare,'0'), IFNULL(GFIPVHA,'0'), IFNULL(GFIPIndianHealth,'0'), IFNULL(InsuranceSubPatient,''), IFNULL(InsuranceSubGuarantor,''), IFNULL(InsuranceSubOther,''), IFNULL(HIPrimaryInsurance,''), IFNULL(HISubscriberFirstName,''), IFNULL(HISubscriberLastName,''), IFNULL(HISubscriberDOB,''), IFNULL(HISubscriberSSN,''), IFNULL(HISubscriberRelationtoPatient,''), IFNULL(HISubscriberGroupNo,''), IFNULL(HISubscriberPolicyNo,''), IFNULL(SecondHealthInsuranceChk,''), IFNULL(SHISecondaryName,''), IFNULL(SHISubscriberFirstName,''), IFNULL(SHISubscriberLastName,''), IFNULL(SHISubscriberRelationtoPatient,''), IFNULL(SHISubscriberGroupNo,''), IFNULL(SHISubscriberPolicyNo,'')  from " + Database + ".Patient_HealthInsuranceInfo where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        GovtFundedInsurancePlanChk = rset.getString(1);
                        GFIPMedicare = rset.getInt(2);
                        GFIPMedicaid = rset.getInt(3);
                        GFIPCHIP = rset.getInt(4);
                        GFIPTricare = rset.getInt(5);
                        GFIPVHA = rset.getInt(6);
                        GFIPIndianHealth = rset.getInt(7);
                        InsuranceSubPatient = rset.getString(8);
                        InsuranceSubGuarantor = rset.getString(9);
                        InsuranceSubOther = rset.getString(10);
                        HIPrimaryInsurance = rset.getString(11);
                        HISubscriberFirstName = rset.getString(12);
                        HISubscriberLastName = rset.getString(13);
                        HISubscriberDOB = rset.getString(14);
                        HISubscriberSSN = rset.getString(15);
                        HISubscriberRelationtoPatient = rset.getString(16);
                        HISubscriberGroupNo = rset.getString(17);
                        HISubscriberPolicyNo = rset.getString(18);
                        SecondHealthInsuranceChk = rset.getString(19);
                        SHISecondaryName = rset.getString(20);
                        SHISubscriberFirstName = rset.getString(21);
                        SHISubscriberLastName = rset.getString(22);
                        SHISubscriberRelationtoPatient = rset.getString(23);
                        SHISubscriberGroupNo = rset.getString(24);
                        SHISubscriberPolicyNo = rset.getString(25);
                    }
                    rset.close();
                    stmt.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_HealthInsuraneInfo");
                    Services.DumException("DownloadBundle", "GetINput ER Dallas", request, e, getServletContext());
                }
            if (Ethnicity.equals("1")) {
                Ethnicity = "Hispanic";
            } else if (Ethnicity.equals("2")) {
                Ethnicity = "Non-Hispanic";
            } else if (Ethnicity.equals("3")) {
                Ethnicity = "Unknown";
            }
            if (GuarantorChk.equals("1")) {
                Guarantor = "The Patient";
                GuarantorDOB = DOB;
                GuarantorSEX = gender;
                GuarantorSSN = SSN;
                GuarantorAddress = Address + "";
                GuarantorPhoneNumber = "" + PhNumber;
            } else if (GuarantorChk.equals("2")) {
                Guarantor = "Legal Guardian";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            } else if (GuarantorChk.equals("3")) {
                Guarantor = "Patient Parent";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            } else if (GuarantorChk.equals("2")) {
                Guarantor = "Spouse/Partner";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            }
            if (WorkersCompPolicyChk == 1) {
                WorkCompPolicyStr = "Yes";
            } else {
                WorkCompPolicyStr = "No";
            }
            if (MotorVehicleAccidentChk == 1) {
                MotorVehAccidentStr = "Yes";
            } else {
                MotorVehAccidentStr = "No";
            }
            if (HISubscriberDOB.equals("00/00/0000"))
                HISubscriberDOB = "";
            if (WCPDateofInjury.equals("00/00/0000"))
                WCPDateofInjury = "";
            if (AIIDateofAccident.equals("00/00/0000"))
                AIIDateofAccident = "";
            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/ABNformEnglish.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            int i;
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 80.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 120.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0F, 210.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/WC_QUESTIONNAIRE.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 700.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 675.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 650.0F);
                    pdfContentByte.showText(WCPMemberId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 630.0F);
                    pdfContentByte.showText(WCPGroupNo);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 610.0F);
                    pdfContentByte.showText(WCPDateofInjury);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 585.0F);
                    pdfContentByte.showText(WCPCaseNo);
                    pdfContentByte.endText();
                    if (WCPInjuryRelatedAutoMotorAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(175.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(175.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedWorkRelated.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(275.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(275.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedOtherAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(380.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(380.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedNoAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(475.0F, 535.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(475.0F, 535.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurVehicle.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(220.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(220.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurWork.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(280.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(280.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurHome.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(340.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(340.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurOther.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400.0F, 515.0F);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400.0F, 515.0F);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() <= 114) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 114 && WCPInjuryDescription.length() <= 228) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 228 && WCPInjuryDescription.length() <= 342) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 420.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 342 && WCPInjuryDescription.length() <= 456) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 420.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, 342));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 408.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(342, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 456) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 450.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 435.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 420.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, 342));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 408.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(342, 456));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0F, 393.0F);
                        pdfContentByte.showText(WCPInjuryDescription.substring(456, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 350.0F);
                    pdfContentByte.showText(WCPHRFirstName + " " + WCPHRLastName + " / " + WCPHRPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 325.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0F, 300.0F);
                    pdfContentByte.showText(WCPHRAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 280.0F);
                    pdfContentByte.showText(WCPHRCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(230.0F, 280.0F);
                    pdfContentByte.showText(WCPHRState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0F, 260.0F);
                    pdfContentByte.showText(WCPHRZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 350.0F);
                    pdfContentByte.showText(WCPPlanName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 325.0F);
                    pdfContentByte.showText(WCPCarrierName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 300.0F);
                    pdfContentByte.showText(WCPPayerPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 280.0F);
                    pdfContentByte.showText(WCPCarrierAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0F, 260.0F);
                    pdfContentByte.showText(WCPCarrierCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 260.0F);
                    pdfContentByte.showText(WCPCarrierState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 235.0F);
                    pdfContentByte.showText(WCPCarrierZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 210.0F);
                    pdfContentByte.showText(WCPAdjudicatorFirstName + " " + WCPAdjudicatorLastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 185.0F);
                    pdfContentByte.showText(WCPAdjudicatorPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0F, 165.0F);
                    pdfContentByte.showText(WCPAdjudicatorFaxPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 140.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0F, 120.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/WC_MVA_assignmentofproceeds.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(55.0F, 625.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 447.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 130.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 80.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 710.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0F, 680.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 630.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 480.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0F, 355.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 280.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/MVA_ASSIGNMENTOFPROCEEDS.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(55.0F, 625.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 447.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 135.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 82.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 710.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0F, 680.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 630.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0F, 480.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0F, 355.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 290.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/MVACLAIMFORM.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 640.0F);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 620.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0F, 620.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 595.0F);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0F, 595.0F);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 570.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(290.0F, 570.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 570.0F);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0F, 545.0F);
                    pdfContentByte.showText(AIIAutoClaim);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 522.0F);
                    pdfContentByte.showText(AIIDateofAccident);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(165.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0F, 500.0F);
                    pdfContentByte.showText(AIIAccidentLocationZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145.0F, 452.0F);
                    pdfContentByte.showText(AIIRoleInAccident);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 352.0F);
                    pdfContentByte.showText(AIITypeOfAutoIOnsurancePolicy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 320.0F);
                    pdfContentByte.showText(AIIPrefixforReponsibleParty + " " + AIIFirstNameforReponsibleParty + " " + AIIMiddleNameforReponsibleParty + " " + AIILastNameforReponsibleParty + " " + AIISuffixforReponsibleParty);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(280.0F, 300.0F);
                    pdfContentByte.showText(AIICarrierResponsibleParty);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0F, 280.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 255.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0F, 255.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 255.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 230.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 210.0F);
                    pdfContentByte.showText(AIICarrierResponsiblePartyPolicyNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 210.0F);
                    pdfContentByte.showText(AIIResponsiblePartyLicensePlate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240.0F, 190.0F);
                    pdfContentByte.showText(AIIResponsiblePartyAutoMakeModel);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0F, 680.0F);
                    pdfContentByte.showText(AIIFirstNameOfYourPolicyHolder + " " + AIILastNameOfYourPolicyHolder);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0F, 650.0F);
                    pdfContentByte.showText(AIINameAutoInsuranceOfYourVehicle);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0F, 630.0F);
                    pdfContentByte.showText(AIIYourInsuranceAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0F, 610.0F);
                    pdfContentByte.showText(AIIYourInsuranceCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0F, 610.0F);
                    pdfContentByte.showText(AIIYourInsuranceState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 610.0F);
                    pdfContentByte.showText(AIIYourInsuranceZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0F, 585.0F);
                    pdfContentByte.showText(AIIYourInsurancePhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0F, 565.0F);
                    pdfContentByte.showText(AIIYourInsurancePolicyNo);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0F, 565.0F);
                    pdfContentByte.showText(AIIYourLicensePlate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0F, 545.0F);
                    pdfContentByte.showText(AIIYourCarMakeModelYear);
                    pdfContentByte.endText();
                }
            }
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/Medicalreleaseform.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (i = 1; i <= pdfReader1.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 570.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 552.0F);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0F, 535.0F);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0F, 180.0F);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0F, 140.0F);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            String inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/UHCINSAPPEALFORMS.pdf";
            String outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf";
            FileOutputStream fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            PdfReader pdfReader2 = new PdfReader(inputFilePathTmp2);
            PdfStamper pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            int j;
            for (j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0F, 690.0F);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0F, 665.0F);
                    pdfContentByte2.showText(HISubscriberLastName + ", " + HISubscriberFirstName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0F, 640.0F);
                    pdfContentByte2.showText(WCPMemberId);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/MEDICAIDSELFPAYAGREEMENT.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, fos2);
            for (j = 1; j <= pdfReader2.getNumberOfPages(); j++) {
                if (j == 1) {
                    PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(475.0F, 90.0F);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            if (WorkersCompPolicyChk == 1) {
                Query = "Select WCPInjuryRelatedAutoMotorAccident, WCPInjuryOccurVehicle from " + Database + ".Patient_WorkCompPolicy where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WCPInjuryRelatedAutoMotorAccident = rset.getString(1);
                    WCPInjuryOccurVehicle = rset.getString(2);
                }
                rset.close();
                stmt.close();
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/GeneralForm_ERDallas.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/ERDallas/Result.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/ERDallas/Result.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                if (WCPInjuryRelatedAutoMotorAccident.equals("1") || WCPInjuryOccurVehicle.equals("1")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/ERDallas/Result.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/GeneralForm_ERDallas.pdf";
            }
            if (MotorVehicleAccidentChk == 1) {
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                Query = "Select AutoInsuranceInformationChk from " + Database + ".Patient_AutoInsuranceInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next())
                    AutoInsuranceInformationChk = rset.getString(1);
                rset.close();
                stmt.close();
                if (AutoInsuranceInformationChk.equals("1")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            } else if (MotorVehicleAccidentChk == 0) {
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/MVA_ASSIGNMENTOFPROCEEDS.pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/GeneralForm_ERDallas.pdf";
            }
            if (HealthInsuranceChk == 1) {
                Query = "Select GFIPMedicare,GFIPMedicaid,GFIPCHIP,GFIPTricare,GFIPVHA,GFIPIndianHealth, GovtFundedInsurancePlanChk,IFNULL(HIPrimaryInsurance,''),IFNULL(HISubscriberFirstName,''), IFNULL(HISubscriberLastName,''), IFNULL(DATE_FORMAT(HISubscriberDOB,'%m/%d/%Y'),''), IFNULL(HISubscriberSSN,''), IFNULL(HISubscriberRelationtoPatient,''), IFNULL(HISubscriberGroupNo,''), IFNULL(HISubscriberPolicyNo,''),IFNULL(SHISecondaryName,''), IFNULL(SHISubscriberFirstName,''), IFNULL(SHISubscriberLastName,''), IFNULL(SHISubscriberRelationtoPatient,''), IFNULL(SHISubscriberGroupNo,''), IFNULL(SHISubscriberPolicyNo,'') from " + Database + ".Patient_HealthInsuranceInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    GFIPMedicare = rset.getInt(1);
                    GFIPMedicaid = rset.getInt(2);
                    GFIPCHIP = rset.getInt(3);
                    GFIPTricare = rset.getInt(4);
                    GFIPVHA = rset.getInt(5);
                    GFIPIndianHealth = rset.getInt(6);
                    GovtFundedInsurancePlanChk = rset.getString(7);
                    HIPrimaryInsurance = rset.getString(8);
                    HISubscriberFirstName = rset.getString(9);
                    HISubscriberLastName = rset.getString(10);
                    HISubscriberDOB = rset.getString(11);
                    HISubscriberSSN = rset.getString(12);
                    HISubscriberRelationtoPatient = rset.getString(13);
                    HISubscriberGroupNo = rset.getString(14);
                    HISubscriberPolicyNo = rset.getString(15);
                    SHISecondaryName = rset.getString(16);
                    SHISubscriberFirstName = rset.getString(17);
                    SHISubscriberLastName = rset.getString(18);
                    SHISubscriberRelationtoPatient = rset.getString(19);
                    SHISubscriberGroupNo = rset.getString(20);
                    SHISubscriberPolicyNo = rset.getString(21);
                }
                rset.close();
                stmt.close();
                if (GovtFundedInsurancePlanChk.equals("1")) {
                    if (GFIPMedicaid == 1 || GFIPCHIP == 1) {
                        mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                        ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                    }
                    if (GFIPMedicare == 1) {
                        mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                        ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                    }
                }
                if (HIPrimaryInsurance.trim().toUpperCase().equals("UNITED HEALTHCARE")) {
                    System.out.println("Inside United HealthCare");
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            } else {
                ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/GeneralForm_ERDallas.pdf";
            }
            if (HISubscriberDOB.equals("00/00/0000"))
                HISubscriberDOB = "";
            if (WCPDateofInjury.equals("00/00/0000"))
                WCPDateofInjury = "";
            if (AIIDateofAccident.equals("00/00/0000"))
                AIIDateofAccident = "";
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/ERDallas/Result_" + ClientId + "_" + MRN + ".pdf";
            String DOSDate = "";
            String DOSTime = "";
            DOSDate = DOS.substring(0, 10);
            DOSTime = DOS.substring(11, 19);
            String inputFilePath = "";
            inputFilePath = ResultPdf;
            String outputFilePath = "/sftpdrive/AdmissionBundlePdf/ERDallas/" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf";
            OutputStream fos3 = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader3 = new PdfReader(inputFilePath);
            PdfStamper pdfStamper3 = new PdfStamper(pdfReader3, fos3);
            for (int k = 1; k <= pdfReader3.getNumberOfPages(); k++) {
                if (k == 1) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(390.0F, 668.0F);
                    pdfContentByte3.showText(DOSDate);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(490.0F, 668.0F);
                    pdfContentByte3.showText(DOSTime);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(70.0F, 600.0F);
                    pdfContentByte3.showText(LastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 600.0F);
                    pdfContentByte3.showText(FirstName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(390.0F, 608.0F);
                    pdfContentByte3.showText(Title);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0F, 608.0F);
                    pdfContentByte3.showText(MaritalStatus);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 570.0F);
                    pdfContentByte3.showText(Address);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(300.0F, 570.0F);
                    pdfContentByte3.showText(CityStateZip);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0F, 570.0F);
                    pdfContentByte3.showText(PhNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 540.0F);
                    pdfContentByte3.showText(SSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 540.0F);
                    pdfContentByte3.showText(DOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0F, 540.0F);
                    pdfContentByte3.showText(Age);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0F, 540.0F);
                    pdfContentByte3.showText(gender);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(435.0F, 540.0F);
                    pdfContentByte3.showText(Email);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 515.0F);
                    pdfContentByte3.showText(Ethnicity);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 515.0F);
                    pdfContentByte3.showText(Employer);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 515.0F);
                    pdfContentByte3.showText(Occupation);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 490.0F);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 490.0F);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 490.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 470.0F);
                    pdfContentByte3.showText(PriCarePhy);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0F, 465.0F);
                    pdfContentByte3.showText(ReasonVisit);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 395.0F);
                    pdfContentByte3.showText(Guarantor);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(290.0F, 395.0F);
                    pdfContentByte3.showText(GuarantorDOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(360.0F, 395.0F);
                    pdfContentByte3.showText(GuarantorSEX);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(425.0F, 395.0F);
                    pdfContentByte3.showText(GuarantorSSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 365.0F);
                    pdfContentByte3.showText(GuarantorAddress);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0F, 365.0F);
                    pdfContentByte3.showText(GuarantorPhoneNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 335.0F);
                    pdfContentByte3.showText(GuarantorEmployer);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 335.0F);
                    pdfContentByte3.showText("" + GuarantorEmployerPhNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 335.0F);
                    pdfContentByte3.showText(GuarantorEmployerAddress + "  " + GuarantorEmployerCity + " " + GuarantorEmployerState);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 310.0F);
                    pdfContentByte3.showText(WorkCompPolicyStr);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 310.0F);
                    pdfContentByte3.showText(MotorVehAccidentStr);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 310.0F);
                    pdfContentByte3.showText(AIIDateofAccident);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(100.0F, 285.0F);
                    pdfContentByte3.showText(HIPrimaryInsurance);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 260.0F);
                    pdfContentByte3.showText(HISubscriberFirstName + " " + HISubscriberLastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(290.0F, 260.0F);
                    pdfContentByte3.showText(HISubscriberDOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 260.0F);
                    pdfContentByte3.showText(HISubscriberSSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 244.0F);
                    pdfContentByte3.showText(HISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 235.0F);
                    pdfContentByte3.showText(HISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 235.0F);
                    pdfContentByte3.showText(HISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 205.0F);
                    pdfContentByte3.showText(SHISecondaryName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0F, 180.0F);
                    pdfContentByte3.showText(SHISubscriberFirstName + " " + SHISubscriberLastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 180.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 180.0F);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 170.0F);
                    pdfContentByte3.showText(SHISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0F, 160.0F);
                    pdfContentByte3.showText(SHISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0F, 160.0F);
                    pdfContentByte3.showText(SHISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(410.0F, 80.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 2) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(350.0F, 145.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(350.0F, 105.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 4) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(70.0F, 350.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0F, 270.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 5) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(420.0F, 70.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 6) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(430.0F, 290.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(440.0F, 360.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 7) {
                    PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(120.0F, 590.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(300.0F, 590.0F);
                    pdfContentByte3.showText(DOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0F, 590.0F);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 565.0F);
                    pdfContentByte3.showText(HIPrimaryInsurance);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 540.0F);
                    pdfContentByte3.showText(HISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 520.0F);
                    pdfContentByte3.showText(DOS);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0F, 420.0F);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0F);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(440.0F, 160.0F);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
            }
            pdfStamper3.close();
            File pdfFile = new File(outputFilePath);
            response.setContentType("application/pdf");
            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
            response.setContentLength((int) pdfFile.length());
            FileInputStream fileInputStream = new FileInputStream(pdfFile);
            ServletOutputStream servletOutputStream = response.getOutputStream();
            int bytes;
            while ((bytes = fileInputStream.read()) != -1)
                servletOutputStream.write(bytes);
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/ERDallas/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    void SignPdf(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, String UserId, String Database, int ClientId, String DirectoryName) {
        try {
            String pageCount = request.getParameter("pageCount");
            String outputFilePath = request.getParameter("outputFilePath");
            String FileName = request.getParameter("FileName");
            PDFtoImages pdftoImage = new PDFtoImages();
            HashMap<Integer, String> images_Map_final = new HashMap<>();
            images_Map_final = pdftoImage.GetValues(request, out, conn, Database, ClientId, outputFilePath, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/md/tmpImages/");
            Collection<String> values = images_Map_final.values();
            List<String> imagelist = new ArrayList<>(values);
            System.out.println("imagelist Names: " + imagelist);
            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("outputFilePath", String.valueOf(outputFilePath));
            Parser.SetField("imagelist", String.valueOf(imagelist));
            Parser.SetField("pageCount", String.valueOf(pageCount));
            Parser.SetField("FileName", String.valueOf(FileName));
            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Forms/SigningBundle.html");
        } catch (Exception e) {
            out.println("Error in SignPdf Method: " + e.getMessage());
        }
    }

    public void download_direct(HttpServletRequest request, HttpServletResponse response, PrintWriter out, Connection conn) {
        String path = request.getParameter("path");
        String FileName = request.getParameter("FileName");
        try {
            response.setContentType("application/pdf");
            response.setHeader("Content-Disposition", "Inline;filename=" + FileName);
            FileInputStream fin = new FileInputStream(path);
            byte[] content = new byte[fin.available()];
            fin.read(content);
            fin.close();
            ServletOutputStream servletOutputStream = response.getOutputStream();
            servletOutputStream.write(content);
            servletOutputStream.flush();
            servletOutputStream.close();
        } catch (Exception e) {
            out.println("Unable to process request ..." + e.getMessage());
        }
    }
}

