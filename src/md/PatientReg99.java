package md;

import Handheld.UtilityHelper;
import Parsehtm.Parsehtm;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLConnection;
import java.sql.*;
import java.time.LocalDate;
import java.time.Period;
import java.util.*;

@SuppressWarnings("Duplicates")
public class PatientReg99 extends HttpServlet {

    public static int getAge(LocalDate dob) {
        LocalDate curDate = LocalDate.now();
        return Period.between(dob, curDate).getYears();
    }

    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        handleRequest(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        handleRequest(request, response);
    }

    public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String ActionID = "";
        String rqtype = request.getParameter("rqtype");
        String UCID = request.getParameter("UCID");
        ServletContext context = getServletContext();
        PrintWriter out = new PrintWriter(response.getOutputStream());
        response.setContentType("text/html");
        UtilityHelper helper = new UtilityHelper();
        Services supp = new Services();
        Connection conn = null;
        HttpSession session = null;
        try {
            response.setContentType("text/html");
            response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
            response.setHeader("Pragma", "no-cache"); // HTTP 1.0.
            response.setHeader("Expires", "0"); // Proxies.

            Parsehtm Parser;
/*            if (rqtype != null) {
                if(request.getHeader("userAuth") == null){
                    out.println("InValid Request!");
                    return;
                }
                else if(request.getHeader("userAuth").compareTo("88jnjjyy87733hidajf90arfuafj")==0) {
//                if (request.getSession(false) == null) {
//                    String SessionId = session.getId();
//                    System.out.println("SessionId -> "+SessionId);
                session = Createsession(UCID, request, context);
//                }
                }
            }*/

//            System.out.println("patient reg 99  origin ->> "+request.getHeader("origin"));
//            System.out.println("patient reg 99  rqtype ->> "+rqtype);
            if (rqtype != null) {
                if (request.getHeader("origin") == null) {
                    System.out.println("1");
                    out.println("InValid Request!");
                    return;
//                } else if (request.getHeader("origin").compareTo("https://app.rovermd.com:8443") == 0) {
                } else if (request.getHeader("origin").compareTo("https://app1.rovermd.com:8443") == 0) {
                    System.out.println("2");

                    session = Createsession(UCID, request, context);
//                } else if (request.getHeader("origin").compareTo("https://app.rovermd.com:8443") != 0) {
                } else if (request.getHeader("origin").compareTo("https://app1.rovermd.com:8443") != 0) {
                    System.out.println("3");

                    out.println("InValid Request!");
                    return;
                }
            } else {
                session = request.getSession(false);
                boolean validSession = helper.checkSession(request, context, session, out);
                if (!validSession) {
                    out.flush();
                    out.close();
                    return;
                }
            }

            String UserId = session.getAttribute("UserId").toString();
            String DatabaseName = session.getAttribute("DatabaseName").toString();
            int FacilityIndex = Integer.parseInt(session.getAttribute("FacilityIndex").toString());
            String DirectoryName = session.getAttribute("DirectoryName").toString();

            if (UserId.equals("")) {
                Parsehtm parsehtm = new Parsehtm(request);
                parsehtm.GenerateHtml(out, Services.GetHtmlPath(context) + "Exception/SessionTimeOut.html");
                out.flush();
                out.close();
                return;
            }

            if (request.getParameter("ActionID") == null) {
                out.println("InValid Request");
                return;
            } else {
                ActionID = request.getParameter("ActionID");
            }


            conn = Services.GetConnection(context, 1);

            if (conn == null) {
                Parsehtm parsehtm = new Parsehtm(request);
                parsehtm.SetField("Error", "Unable to connect. Our team is looking into it!");
                parsehtm.GenerateHtml(out, Services.GetHtmlPath(context) + "FacilityLogin.html");
                return;
            }


//            System.out.println("FacilityIndex -> " + FacilityIndex);


            if (FacilityIndex == 9) {
                switch (ActionID) {
                    case "Victoria_2":
                        Victoria_2(request, out, conn, context, helper);
                        break;
                    case "PatientsDocUpload_Save":
                        PatientsDocUpload_Save(request, out, conn, context, response, FacilityIndex);
                        break;
                    default:
                        out.println("Under Development!!!");
                        break;
                }
            } else {
                switch (ActionID) {
                    case "GetValues":
                        GetValues(request, out, conn, context, DatabaseName, helper, FacilityIndex);
                        break;
                    case "CheckPatient":
                        supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Check Duplicate Patients", "Check if the Patient Exist ", FacilityIndex);
                        CheckPatient(request, out, conn, context, DatabaseName, helper);
                        break;
                    case "ReasonVisits":
                        supp.Dologing(UserId, conn, request.getRemoteAddr(), ActionID, "Get ReasonVisit For Frontline", "Reason VisitS frontLine ", FacilityIndex);
                        ReasonVisits(request, out, conn, context, DatabaseName, helper);
                        break;
                    case "PatientsDocUpload_Save":
                        PatientsDocUpload_Save(request, out, conn, context, response, FacilityIndex);
                        break;
                    case "CheckRepeatPatient":
                        CheckRepeatPatient(request, out, conn, context, UserId, DatabaseName, FacilityIndex);
                        break;
                    case "DisplayExistingPatient":
                        DisplayExistingPatient(request, out, conn, context, UserId, DatabaseName, FacilityIndex);
                        break;
                    default:
                        helper.deleteUserSession(request, conn, session.getId());
                        session.invalidate();
                        Parser = new Parsehtm(request);
                        Parser.GenerateHtml(out, Services.GetHtmlPath(context) + "Exception/ErrorMaintenance.html");
                        break;
                }
            }

        } catch (Exception e) {
            if (conn == null) {
                conn = Services.getMysqlConn(context);
            }
            helper.SendEmailWithAttachment("Error in PatientReg ** (handleRequest)", context, e, "PatientReg", "handleRequest", conn);
            Services.DumException("PatientReg", "Handle Request", request, e, getServletContext());
            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("FormName", "ManagementDashboard");
            Parser.SetField("ActionID", "GetInput");
            Parser.GenerateHtml(out, Services.GetHtmlPath(context) + "Exception/ExceptionMessage.html");
            out.flush();
            out.close();
        } finally {
            try {
                if (conn != null)
                    conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
                helper.SendEmailWithAttachment("Error in PatientReg ** (handleRequest -- SqlException)", context, e, "PatientReg", "handleRequest", conn);
                Services.DumException("PatientReg", "Handle Request", request, e, getServletContext());
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "ManagementDashboard");
                Parser.SetField("ActionID", "GetInput");
                Parser.GenerateHtml(out, Services.GetHtmlPath(context) + "Exception/ExceptionMessage.html");
            }
            out.flush();
            out.close();
        }
    }

    public HttpSession Createsession(String UCID, HttpServletRequest request, ServletContext context) {
        String Query = "";
        Statement cStmt = null;
        ResultSet rset = null;

        try {
            Connection conn = Services.GetConnection(context, 1);
            String UserId = "", UserType = "", DatabaseName = "", DirectoryName = "", FontColor = "", ClientName = "", UserIndex = "";

            int FacilityIndex = 0;

            HttpSession session = request.getSession(true);
            String SessionId = session.getId();

            Query = "SELECT IFNULL(a.UserType,'-')," +
                    "IFNULL(a.clientid,0), IFNULL(b.name,''), " +
                    "IFNULL(b.dbname,''), IFNULL(b.DirectoryName,''),IFNULL(a.userid,'')" +
                    " FROM sysusers  a" +
                    " STRAIGHT_JOIN clients b ON a.clientid = b.Id" +
                    " WHERE upper(trim(a.clientid)) =  " + UCID;

            cStmt = conn.createStatement();
            rset = cStmt.executeQuery(Query);
            if (rset.next()) {
                UserType = rset.getString(1);
                FacilityIndex = rset.getInt(2);
                ClientName = rset.getString(3);
                DatabaseName = rset.getString(4);
                DirectoryName = rset.getString(5);
                UserId = rset.getString(6);
            }
            rset.close();
            cStmt.close();

            session.setAttribute("UserId", UserId);
            session.setAttribute("FacilityIndex", FacilityIndex);
            session.setAttribute("DatabaseName", DatabaseName);
            session.setAttribute("DirectoryName", DirectoryName);
            session.setMaxInactiveInterval(600);


            return session;
        } catch (Exception e) {
            // TODO: handle exception
        }
        return null;
    }

    void Victoria_2(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, UtilityHelper helper) {
        try {
            Statement stmt = null;
            ResultSet rset = null;
            String Query = "";
            String Date = "";
            final String PRFName = "";
            int ClientIndex = 0;
            final StringBuffer ProfessionalPayersList = new StringBuffer();
            final StringBuffer Month = new StringBuffer();
            final StringBuffer Day = new StringBuffer();
            final StringBuffer Year = new StringBuffer();
            final String ClientId = request.getParameter("ClientId").trim();
            Query = "Select Date_format(now(),'%Y-%m-%d')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                Date = rset.getString(1);
            }
            rset.close();
            stmt.close();
            Query = "Select Id from oe.clients where ltrim(rtrim(UPPER(name))) = ltrim(rtrim(UPPER('" + ClientId + "')))";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                ClientIndex = rset.getInt(1);
            }
            rset.close();
            stmt.close();
            Query = "Select Id, PayerId, PayerName from oe_2.ProfessionalPayers where PayerName like '%Texas%'";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            ProfessionalPayersList.append("<option class=Inner value='-1'>Select Insurance</option>");
            while (rset.next()) {
                ProfessionalPayersList.append("<option class=Inner value=\"" + rset.getString(1) + "\">" + rset.getString(3) + "</option>");
            }
            rset.close();
            stmt.close();
            Query = "Select Id, PayerId, PayerName from oe_2.ProfessionalPayers where PayerName not like '%Texas%'";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                ProfessionalPayersList.append("<option class=Inner value=\"" + rset.getString(1) + "\">" + rset.getString(3) + "</option>");
            }
            rset.close();
            stmt.close();
            final String[] month = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
            final int day = 1;
            final int year = Calendar.getInstance().get(1);
            for (int i = 1; i <= month.length; ++i) {
                if (i < 10)
                    Month.append("<option value=0" + i + ">" + month[i - 1] + "</option>");
                else
                    Month.append("<option value=" + i + ">" + month[i - 1] + "</option>");
            }
            for (int i = 1; i <= 31; ++i) {
                if (i < 10)
                    Day.append("<option value=0" + i + ">" + i + "</option>");
                else
                    Day.append("<option value=" + i + ">" + i + "</option>");
            }
            for (int i = 1901; i <= year; ++i) {
                if (i == year) {
                    Year.append("<option value=" + i + " selected>" + i + "</option>");
                } else {
                    Year.append("<option value=" + i + ">" + i + "</option>");
                }
            }
            final Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("Date", String.valueOf(Date));
            Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
            Parser.SetField("Month", String.valueOf(Month));
            Parser.SetField("Day", String.valueOf(Day));
            Parser.SetField("Year", String.valueOf(Year));
            Parser.SetField("ProfessionalPayersList", String.valueOf(ProfessionalPayersList));
            if (ClientIndex == 9) {
                //Parser.GenerateHtml(out, Services.GetHtmlPath(this.getServletContext()) + "Forms/PatientRegFormVictoria_2.html");
                Parser.GenerateHtml(out, Services.GetHtmlPath(getServletContext()) + "Forms/PatientRegFormVictoria_2_2_99.html");
            } else if (ClientIndex == 38) {
                Parser.GenerateHtml(out, Services.GetHtmlPath(getServletContext()) + "Forms/PatientRegFormAllyER.html");
            } else if (ClientIndex == 28) {
                Parser.GenerateHtml(out, String.valueOf(String.valueOf(Services.GetHtmlPath(this.getServletContext()))) + "Forms/PatientRegFormERDallas.html");
            }
        } catch (Exception ex) {
            out.println(ex.getMessage());
            String str = "";
            for (int j = 0; j < ex.getStackTrace().length; ++j) {
                str = str + ex.getStackTrace()[j] + "<br>";
            }
            out.println(str);
        }
    }


    void GetValues(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, String Database, UtilityHelper helper, int facilityIndex) throws FileNotFoundException {

        String facilityName = "";
        try {
            Statement stmt = null;
            ResultSet rset = null;
            String Query = "";
            String Date = "";
            String PRF_name = "";
            StringBuffer Month = new StringBuffer();
            StringBuffer Day = new StringBuffer();
            StringBuffer Year = new StringBuffer();
            StringBuffer ProfessionalPayersList = new StringBuffer();
            StringBuffer CorporateAccountProfessionalPayersList = new StringBuffer();
            int ClientIndex = facilityIndex;//Integer.parseInt(request.getParameter("ClientIndex").trim());
            facilityName = helper.getFacilityName(request, conn, servletContext, ClientIndex);

            Query = "Select Date_format(now(),'%Y-%m-%d')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                Date = rset.getString(1);
            rset.close();
            stmt.close();

            Query = "Select PRF_name from oe.clients where Id = " + ClientIndex;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                PRF_name = rset.getString(1);
            rset.close();
            stmt.close();

            //Select Id, PayerId, LTRIM(rtrim(PayerName)) from oe_2.ProfessionalPayers where id  in (902,8289,8297,123,127,5800,1259,2700,5978,389,2337,1460,2348,3901,2583,2588,2393,955) group by PayerId
            // Select Id, PayerId, LTRIM(rtrim(PayerName)) from ProfessionalPayers where PayerName like  '%Texas%'  or PayerName like   '%ALL%' group by PayerId

            //Query = "Select Id, PayerId, LTRIM(rtrim(REPLACE(PayerName,'Servicing States','') )) from oe_2.ProfessionalPayers where id in (902,8289,8297,123,127,5800,1259,2700,5978,389,2337,1460,2348,3901,2583,2588,2393,955) group by PayerId";//where PayerName like '%Texas%'";
            Query = "Select a.Id, a.PayerId, LTRIM(rtrim(REPLACE(a.PayerName,'Servicing States','') )), Count(*) from oe_2.ProfessionalPayers a\n" +
                    "LEFT JOIN " + Database + ".InsuranceInfo b ON  a.Id=b.PriInsuranceName\n" +
                    "where a.Id  in (902,8289,8297,123,127,5800,1259,2700,5978,389,2337,1460,2348,3901,2583,2588,2393,955,64,1545,3646,8589,200,201,202,203,204,205,206,207,3649,5978,8206,4763,3465,3466,3467,3468,41,387,388,389,697,698,4757, 8605, 8606, 8254, 2560, 1663,8176,1049) \n" +
                    "AND Status != 100 GROUP BY b.PriInsuranceName ORDER BY Count(*) DESC";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            ProfessionalPayersList.append("<option value=''>Select Insurance</option>");
            while (rset.next())
                ProfessionalPayersList.append("<option value=\"" + rset.getString(1) + "\">" + rset.getString(3) + "</option>");
            rset.close();
            stmt.close();

            Query = "Select Id, PayerId, LTRIM(rtrim(REPLACE(PayerName,'Servicing States','') )) from oe_2.ProfessionalPayers " +
                    "where id  in (902,8289,8297,123,127,5800,1259,2700,5978,389,2337,1460,2348,3901,2583,2588,2393,955,64,1545,3646,8589,200,201,202,203,204,205,206,207,3649,5978,8206,4763,3465,3466,3467,3468,41,387,388,389,697,698,4757, 8605, 8606, 8254, 2560, 1663,8176,1049) " +
                    " AND Status != 100 group by PayerId";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            ProfessionalPayersList.append("<option value=''>Select Insurance</option>");
            while (rset.next()) {
                if (ProfessionalPayersList.indexOf(rset.getString(3)) == -1)
                    ProfessionalPayersList.append("<option value=\"" + rset.getString(1) + "\">" + rset.getString(3) + "</option>");
            }
            rset.close();
            stmt.close();

            //Query = "Select Id, PayerId, LTRIM(rtrim(REPLACE(PayerName,'Servicing States','') )) from oe_2.ProfessionalPayers where id not in (902,8289,8297,123,127,5800,1259,2700,5978,389,2337,1460,2348,3901,2583,2588,2393,955) group by PayerId ";//where PayerName not like '%Texas%'";
            Query = "Select Id, PayerId, LTRIM(rtrim(REPLACE(PayerName,'Servicing States','') )) from oe_2.ProfessionalPayers " +
                    "where PayerName like  '%Texas%' OR PayerName like '%TX%' AND Status != 100";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (ProfessionalPayersList.indexOf(rset.getString(3)) == -1)
                    ProfessionalPayersList.append("<option value=\"" + rset.getString(1) + "\">" + rset.getString(3) + "</option>");
            }
            rset.close();
            stmt.close();

            if (ClientIndex == 25) {
                ProfessionalPayersList.append("<option value='-999'>Corporate Account</option>");
                PreparedStatement ps = conn.prepareStatement(
                        "SELECT id,Name from sanmarcos.CorporateAccountIns ");
                rset = ps.executeQuery();
                CorporateAccountProfessionalPayersList.append("<option>Select Insurance</option>");
                while (rset.next()) {
                    CorporateAccountProfessionalPayersList.append("<option value=\"" + rset.getString(1) + "\">" + rset.getString(2) + "</option>");
                }
            }

            String rqType = null;
            if (request.getParameter("rqtype") != null) {
                rqType = request.getParameter("rqtype");
            }
//            System.out.println("RQ TYPE FROM INI ** " + rqType);
            String[] month = {
                    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
                    "Nov", "Dec"};
            int day = 1;
            int year = Calendar.getInstance().get(1);
            int i;
            for (i = 1; i <= month.length; i++) {
                if (i < 10)
                    Month.append("<option value=0" + i + ">" + month[i - 1] + "</option>");
                else
                    Month.append("<option value=" + i + ">" + month[i - 1] + "</option>");
            }
            for (i = 1; i <= 31; i++) {
                if (i < 10)
                    Day.append("<option value=0" + i + ">" + i + "</option>");
                else
                    Day.append("<option value=" + i + ">" + i + "</option>");
            }
            for (i = 1901; i <= year; i++) {
                if (i == year) {
                    Year.append("<option value=" + i + " selected>" + i + "</option>");
                } else {
                    Year.append("<option value=" + i + ">" + i + "</option>");
                }
            }
            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("Date", String.valueOf(Date));
            Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
            Parser.SetField("ClientIndex_logo", String.valueOf(ClientIndex));
            Parser.SetField("ProfessionalPayersList", String.valueOf(ProfessionalPayersList));
            Parser.SetField("ProfessionalPayersList2", String.valueOf(ProfessionalPayersList));
            if (ClientIndex == 25)
                Parser.SetField("CorporateAccountIns", String.valueOf(CorporateAccountProfessionalPayersList));
            Parser.SetField("Month", String.valueOf(Month));
            Parser.SetField("Day", String.valueOf(Day));
            Parser.SetField("Year", String.valueOf(Year));
            Parser.SetField("rqtype", rqType);
            Parser.GenerateHtml(out, Services.GetHtmlPath(getServletContext()) + "Forms/PRF_files/PatientRegForm_Facilities99.html");//+ PRF_name
        } catch (Exception ex) {
            helper.SendEmailWithAttachment("Error in PatientReg ** (GetValues^^" + facilityName + ")", servletContext, ex, "PatientReg", "GetValues", conn);
            Services.DumException("GetValues^^" + facilityName + "", "PatientReg ", request, ex);
            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("FormName", "ManagementDashboard");
            Parser.SetField("ActionID", "GetInput");
            Parser.SetField("Message", "MES#001");
            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
        }
    }

    void SaveData99(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, String Database, String UserId, UtilityHelper helper, HttpServletResponse response, String DirectoryName, String IDs, String InsuranceIDsF, String InsuranceIDsB, String ClientId, HashMap<String, String> valuemap) throws FileNotFoundException {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        int AddmissionBundle = 0;
        int ClientIndex = Integer.parseInt(ClientId);//Integer.parseInt(request.getParameter("ClientIndex").trim());
        String Title = "";
        String rqtype = "";
        String FirstName = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String Address2 = "";
        String StreetAddress2 = "";
        String City = "";
        String State = "";
        String Country = "";
        String County = "";
        String ZipCode = "";
        String Ethnicity = "";
        String Race = "";
        String SSN = "";
        String SpCarePhy = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        int TravellingChk = 0;
        String TravelWhen = "";
        String TravelWhere = "";
        String TravelHowLong = "";
        int COVIDExposedChk = 0;
        int COVIDPositveChk = 0;
        String CovidPositiveDate = "";
        String CovidExpWhen = "";
        String SympFever = "0";
        String SympBodyAches = "0";
        String SympSoreThroat = "0";
        String SympFatigue = "0";
        String SympRash = "0";
        String SympVomiting = "0";
        String SympDiarrhea = "0";
        String SympCough = "0";
        String SympRunnyNose = "0";
        String SympNausea = "0";
        String SympFluSymptoms = "0";
        String SympHeadache = "0";
        String SympLossTaste = "0";
        String SympShortBreath = "0";
        String SympCongestion = "0";
        String AddInfoTextArea = "";
        String GuarantorName = "";
        String GuarantorDOB = "";
        String GuarantorNumber = "";
        String GuarantorSSN = "";
        String SympEyeConjunctivitis = "0";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String ReasonVisitOthers = "";
        int WorkersCompPolicy = 0;
        int MotorVehAccident = 0;
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String OtherInsuranceName = "";
        String PriInsurerName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        int LeaveMessageER = 0;
        String AddressER = "";
        String CityER = "";
        String StateER = "";
        String CountryER = "";
        String ZipCodeER = "";
        int ReturnPatient = 0;
        int Google = 0;
        int MapSearch = 0;
        int Billboard = 0;
        int OnlineReview = 0;
        int TV = 0;
        int Website = 0;
        int BuildingSignDriveBy = 0;
        int Facebook = 0;
        int School = 0;
        String School_text = "";
        int Twitter = 0;
        int Magazine = 0;
        String Magazine_text = "";
        int Newspaper = 0;
        String Newspaper_text = "";
        int FamilyFriend = 0;
        String FamilyFriend_text = "";
        int UrgentCare = 0;
        String UrgentCare_text = "";
        int CommunityEvent = 0;
        String CommunityEvent_text = "";
        int Work = 0;
        String Work_text = "";
        int Physician = 0;
        String Physician_text = "";
        int Other = 0;
        int Attorney = 0;
        String Other_text = "";
        String Attorney_text = "";
        int SelfPayChk = 0;
        int FrVisitedBefore = 0;
        int FrFamiliyVisitedBefore = 0;
        int FrInternet = 0;
        int FrBillboard = 0;
        int FrGoogle = 0;
        int FrBuildingSignage = 0;
        int FrFacebook = 0;
        int FrLivesNear = 0;
        int FrTwitter = 0;
        int FrTV = 0;
        int FrMapSearch = 0;
        int FrEvent = 0;
        String FrPhysicianReferral = "";
        String FrNeurologyReferral = "";
        String FrUrgentCareReferral = "";
        String FrOrganizationReferral = "";
        String FrFriendFamily = "";
        String STDrelease = "";
        String releaseRecord = "";
        String Filter_WB_SW_A = "";
        String Filter_WB_SW_Q = "";
        String PatientName = "";
        String ExtendedMRN = "";
        String VisitId = "";
        String CorporateAccountPriIns = "";
        String CorporateAccountSecIns = "";
        PreparedStatement ps = null;
        int MRN = 0;
        String CurrentDate = "";
        String bundleFunction = "";
        String facilityName = helper.getFacilityName(request, conn, servletContext, ClientIndex);

        try {
            ps = conn.prepareStatement("SELECT Bundle_FnName from oe.clients WHERE Id = " + ClientIndex);
            rset = ps.executeQuery();
            if (rset.next()) {
                bundleFunction = rset.getString(1);
            }
            ps.close();
            rset.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            try {
                if (valuemap.get("Title") == null) {
                    Title = null;
                } else {
                    Title = valuemap.get("Title").trim();
                }
                if (valuemap.get("rqtype") == null) {
                    rqtype = null;
                } else {
                    rqtype = valuemap.get("rqtype").trim();
                }
//                System.out.println("RQ TYPE IN SAVE DATA 99 " + rqtype);
                if (valuemap.get("FirstName") == null) {
                    FirstName = "";
                } else {
                    FirstName = valuemap.get("FirstName").trim();
                }
                if (valuemap.get("LastName") == null) {
                    LastName = "Mr";
                } else {
                    LastName = valuemap.get("LastName").trim();
                }
                if (valuemap.get("MiddleInitial") == null) {
                    MiddleInitial = "";
                } else {
                    MiddleInitial = valuemap.get("MiddleInitial").trim();
                }
                if (valuemap.get("MaritalStatus") == null) {
                    MaritalStatus = "";
                } else {
                    MaritalStatus = valuemap.get("MaritalStatus").trim();
                }
                if (valuemap.get("DOB") == null) {
                    DOB = "0000-00-00";
                } else {
                    DOB = valuemap.get("DOB").trim();
                }
                if (valuemap.get("Age") == null) {
                    Age = "0";
                } else {
                    Age = valuemap.get("Age").trim();
                }
                if (valuemap.get("gender") == null) {
                    gender = "male";
                } else {
                    gender = valuemap.get("gender").trim();
                }
                if (valuemap.get("Email") == null) {
                    Email = "";
                } else {
                    Email = valuemap.get("Email").trim();
                }
                if (valuemap.get("PhNumber") == null) {
                    PhNumber = "0";
                } else {
                    PhNumber = valuemap.get("PhNumber").trim();
                }
                if (valuemap.get("Address") == null) {
                    Address = "";
                } else {
                    Address = valuemap.get("Address").trim();
                }
                if (valuemap.get("Address2") == null) {
                    Address2 = "";
                } else {
                    Address2 = valuemap.get("Address2").trim();
                }
                if (valuemap.get("StreetAddress2") == null) {
                    StreetAddress2 = "";
                } else {
                    StreetAddress2 = valuemap.get("StreetAddress2").trim();
                }
                if (valuemap.get("City") == null) {
                    City = "";
                } else {
                    City = valuemap.get("City").trim();
                }
                if (valuemap.get("State") == null) {
                    State = "";
                } else {
                    State = valuemap.get("State").trim();
                }
                if (valuemap.get("Country") == null) {
                    Country = "";
                } else {
                    Country = valuemap.get("Country").trim();
                }
                if (valuemap.get("Ethnicity") == null) {
                    Ethnicity = "";
                } else {
                    Ethnicity = valuemap.get("Ethnicity").trim();
                }
                if (valuemap.get("Race") == null) {
                    Race = "";
                } else {
                    Race = valuemap.get("Race").trim();
                }
                if (valuemap.get("County") == null) {
                    County = "";
                } else {
                    County = valuemap.get("County").trim();
                }
                if (valuemap.get("ZipCode") == null) {
                    ZipCode = "";
                } else {
                    ZipCode = valuemap.get("ZipCode").trim();
                }
                if (valuemap.get("SSN") == null) {
                    SSN = "";
                } else {
                    SSN = valuemap.get("SSN").trim();
                }
                if (valuemap.get("SpCarePhy") == null) {
                    SpCarePhy = "";
                } else {
                    SpCarePhy = valuemap.get("SpCarePhy").trim();
                }
                if (valuemap.get("Occupation") == null) {
                    Occupation = "";
                } else {
                    Occupation = valuemap.get("Occupation").trim();
                }
                if (valuemap.get("Employer") == null) {
                    Employer = "";
                } else {
                    Employer = valuemap.get("Employer").trim();
                }
                if (valuemap.get("EmpContact") == null) {
                    EmpContact = "";
                } else {
                    EmpContact = valuemap.get("EmpContact").trim();
                }
                if (valuemap.get("GuarantorName") == null) {
                    GuarantorName = "";
                } else {
                    GuarantorName = valuemap.get("GuarantorName").trim();
                }
                if (valuemap.get("GuarantorDOB") == null) {
                    GuarantorDOB = "";
                } else {
                    GuarantorDOB = valuemap.get("GuarantorDOB").trim();
                }
                if (valuemap.get("GuarantorNumber") == null) {
                    GuarantorNumber = "";
                } else {
                    GuarantorNumber = valuemap.get("GuarantorNumber").trim();
                }
                if (valuemap.get("GuarantorSSN") == null) {
                    GuarantorSSN = "";
                } else {
                    GuarantorSSN = valuemap.get("GuarantorSSN").trim();
                }
                if (valuemap.get("COVIDPositveChk") == null) {
                    COVIDPositveChk = 0;
                } else {
                    COVIDPositveChk = Integer.parseInt(valuemap.get("COVIDPositveChk").trim());
                }
                if (valuemap.get("CovidPositiveDate") == null) {
                    CovidPositiveDate = "";
                } else {
                    CovidPositiveDate = valuemap.get("CovidPositiveDate").trim();
                }
                if (valuemap.get("TravellingChk") == null) {
                    TravellingChk = 0;
                } else {
                    TravellingChk = Integer.parseInt(valuemap.get("TravellingChk").trim());
                }
                if (TravellingChk == 1) {
                    if (valuemap.get("TravelWhen") == null) {
                        TravelWhen = "";
                    } else {
                        TravelWhen = valuemap.get("TravelWhen").trim();
                    }
                    if (valuemap.get("TravelWhere") == null) {
                        TravelWhere = "";
                    } else {
                        TravelWhere = valuemap.get("TravelWhere").trim();
                    }
                    if (valuemap.get("TravelHowLong") == null) {
                        TravelHowLong = "";
                    } else {
                        TravelHowLong = valuemap.get("TravelHowLong").trim();
                    }
                }
                if (valuemap.get("COVIDExposedChk") == null) {
                    COVIDExposedChk = 0;
                } else {
                    COVIDExposedChk = Integer.parseInt(valuemap.get("COVIDExposedChk").trim());
                }
                if (valuemap.get("CovidExpWhen") == null) {
                    CovidExpWhen = "";
                } else {
                    CovidExpWhen = valuemap.get("CovidExpWhen").trim();
                }
                if (valuemap.get("SympFever") == null) {
                    SympFever = "0";
                } else {
                    SympFever = "1";
                }
                if (valuemap.get("SympBodyAches") == null) {
                    SympBodyAches = "0";
                } else {
                    SympBodyAches = "1";
                }
                if (valuemap.get("SympSoreThroat") == null) {
                    SympSoreThroat = "0";
                } else {
                    SympSoreThroat = "1";
                }
                if (valuemap.get("SympFatigue") == null) {
                    SympFatigue = "0";
                } else {
                    SympFatigue = "1";
                }
                if (valuemap.get("SympRash") == null) {
                    SympRash = "0";
                } else {
                    SympRash = "1";
                }
                if (valuemap.get("SympVomiting") == null) {
                    SympVomiting = "0";
                } else {
                    SympVomiting = "1";
                }
                if (valuemap.get("SympDiarrhea") == null) {
                    SympDiarrhea = "0";
                } else {
                    SympDiarrhea = "1";
                }
                if (valuemap.get("SympCough") == null) {
                    SympCough = "0";
                } else {
                    SympCough = "1";
                }
                if (valuemap.get("SympRunnyNose") == null) {
                    SympRunnyNose = "0";
                } else {
                    SympRunnyNose = "1";
                }
                if (valuemap.get("SympNausea") == null) {
                    SympNausea = "0";
                } else {
                    SympNausea = "1";
                }
                if (valuemap.get("SympFluSymptoms") == null) {
                    SympFluSymptoms = "0";
                } else {
                    SympFluSymptoms = "1";
                }
                if (valuemap.get("SympHeadache") == null) {
                    SympHeadache = "0";
                } else {
                    SympHeadache = "1";
                }
                if (valuemap.get("SympLossTaste") == null) {
                    SympLossTaste = "0";
                } else {
                    SympLossTaste = "1";
                }
                if (valuemap.get("SympShortBreath") == null) {
                    SympShortBreath = "0";
                } else {
                    SympShortBreath = "1";
                }
                if (valuemap.get("SympCongestion") == null) {
                    SympCongestion = "0";
                } else {
                    SympCongestion = "1";
                }
                if (valuemap.get("AddInfoTextArea") == null) {
                    AddInfoTextArea = "";
                } else {
                    AddInfoTextArea = valuemap.get("AddInfoTextArea").trim();
                }
                if (valuemap.get("PriCarePhy") == null) {
                    PriCarePhy = "";
                } else {
                    PriCarePhy = valuemap.get("PriCarePhy").trim();
                }
                if (valuemap.get("ReasonVisit") == null) {
                    ReasonVisit = "";
                } else {
                    ReasonVisit = valuemap.get("ReasonVisit").trim();
                }

                if (valuemap.get("ReasonVisitSelect") == null) {
                    ReasonVisitOthers = "";
                } else {
                    ReasonVisitOthers = valuemap.get("ReasonVisitSelect").trim();
                }


                if (valuemap.get("WorkersCompPolicy") == null) {
                    WorkersCompPolicy = 0;
                } else {
                    WorkersCompPolicy = Integer.parseInt(valuemap.get("WorkersCompPolicy").trim());
                }
                if (valuemap.get("MotorVehAccident") == null) {
                    MotorVehAccident = 0;
                } else {
                    MotorVehAccident = Integer.parseInt(valuemap.get("MotorVehAccident").trim());
                }
                if (valuemap.get("PriInsurance") == null) {
                    PriInsurance = "";
                } else {
                    PriInsurance = valuemap.get("PriInsurance").trim();
                }
                if (valuemap.get("MemId") == null) {
                    MemId = "";
                } else {
                    MemId = valuemap.get("MemId").trim();
                }
                if (valuemap.get("GrpNumber") == null) {
                    GrpNumber = "";
                } else {
                    GrpNumber = valuemap.get("GrpNumber").trim();
                }
                if (valuemap.get("PriInsuranceName") == null) {
                    PriInsuranceName = "";
                } else {
                    PriInsuranceName = valuemap.get("PriInsuranceName").trim();
                }
                if (valuemap.get("PriInsurerName") == null) {
                    PriInsurerName = "";
                } else {
                    PriInsurerName = valuemap.get("PriInsurerName").trim();
                }

                if (valuemap.get("CorporateAccountPriIns") == null) {
                    CorporateAccountPriIns = "";
                } else {
                    CorporateAccountPriIns = valuemap.get("CorporateAccountPriIns").trim();
                }

                if (valuemap.get("CorporateAccountSecIns") == null) {
                    CorporateAccountSecIns = "";
                } else {
                    CorporateAccountSecIns = valuemap.get("CorporateAccountSecIns").trim();
                }

                if (valuemap.get("OtherInsuranceName") == null) {
                    OtherInsuranceName = "";
                } else {
                    OtherInsuranceName = valuemap.get("OtherInsuranceName").trim();
                }
                if (valuemap.get("AddressIfDifferent") == null) {
                    AddressIfDifferent = "";
                } else {
                    AddressIfDifferent = valuemap.get("AddressIfDifferent").trim();
                }
                if (valuemap.get("PrimaryDOB") == null) {
                    PrimaryDOB = "";
                } else {
                    if (PrimaryDOB.length() > 0) {
                        PrimaryDOB = valuemap.get("PrimaryDOB").trim();
                    } else {
                        PrimaryDOB = "0000-00-00";
                    }
                }
                if (valuemap.get("PrimarySSN") == null) {
                    PrimarySSN = "";
                } else {
                    PrimarySSN = valuemap.get("PrimarySSN").trim();
                }
                if (valuemap.get("PatientRelationtoPrimary") == null) {
                    PatientRelationtoPrimary = "0";
                } else {
                    PatientRelationtoPrimary = valuemap.get("PatientRelationtoPrimary").trim();
                }
                if (valuemap.get("PrimaryOccupation") == null) {
                    PrimaryOccupation = "";
                } else {
                    PrimaryOccupation = valuemap.get("PrimaryOccupation").trim();
                }
                if (valuemap.get("PrimaryEmployer") == null) {
                    PrimaryEmployer = "";
                } else {
                    PrimaryEmployer = valuemap.get("PrimaryEmployer").trim();
                }
                if (valuemap.get("EmployerAddress") == null) {
                    EmployerAddress = "";
                } else {
                    EmployerAddress = valuemap.get("EmployerAddress").trim();
                }
                if (valuemap.get("EmployerPhone") == null) {
                    EmployerPhone = "";
                } else {
                    EmployerPhone = valuemap.get("EmployerPhone").trim();
                }
                if (valuemap.get("SecondryInsurance") == null) {
                    SecondryInsurance = "0";
                } else {
                    SecondryInsurance = valuemap.get("SecondryInsurance").trim();
                }
                if (valuemap.get("SubscriberName") == null) {
                    SubscriberName = "";
                } else {
                    SubscriberName = valuemap.get("SubscriberName").trim();
                }
                if (valuemap.get("SubscriberDOB").equals(null) || valuemap.get("SubscriberDOB").equals("")) {
                    SubscriberDOB = "0000-00-00";
                } else {
                    if (SubscriberDOB.length() > 0) {
                        SubscriberDOB = valuemap.get("SubscriberDOB").trim();
                    } else {
                        SubscriberDOB = "0000-00-00";
                    }
                }
                if (valuemap.get("MemberID_2") == null) {
                    MemberID_2 = "";
                } else {
                    MemberID_2 = valuemap.get("MemberID_2").trim();
                }
                if (valuemap.get("GroupNumber_2") == null) {
                    GroupNumber_2 = "";
                } else {
                    GroupNumber_2 = valuemap.get("GroupNumber_2").trim();
                }
                if (valuemap.get("PatientRelationshiptoSecondry") == null) {
                    PatientRelationshiptoSecondry = "";
                } else {
                    PatientRelationshiptoSecondry = valuemap.get("PatientRelationshiptoSecondry").trim();
                }
                if (ClientIndex == 10 || ClientIndex == 15)
                    AddmissionBundle = Integer.parseInt(valuemap.get("AddmissionBundle").trim());
                if (valuemap.get("NextofKinName") == null) {
                    NextofKinName = "";
                } else {
                    NextofKinName = valuemap.get("NextofKinName").trim();
                }
                if (valuemap.get("RelationToPatientER") == null) {
                    RelationToPatientER = "";
                } else {
                    RelationToPatientER = valuemap.get("RelationToPatientER").trim();
                }
                if (valuemap.get("PhoneNumberER") == null) {
                    PhoneNumberER = "";
                } else {
                    PhoneNumberER = valuemap.get("PhoneNumberER").trim();
                }
                if (valuemap.get("LeaveMessageER") == null) {
                    LeaveMessageER = 0;
                } else {
                    LeaveMessageER = Integer.parseInt(valuemap.get("LeaveMessageER").trim());
                }
                if (valuemap.get("AddressER") == null) {
                    AddressER = "";
                } else {
                    AddressER = valuemap.get("AddressER").trim();
                }
                if (valuemap.get("CityER") == null) {
                    CityER = "";
                } else {
                    CityER = valuemap.get("CityER").trim();
                }
                if (valuemap.get("StateER") == null) {
                    StateER = "";
                } else {
                    StateER = valuemap.get("StateER").trim();
                }
                if (valuemap.get("CountryER") == null) {
                    CountryER = "";
                } else {
                    CountryER = valuemap.get("CountryER").trim();
                }
                if (valuemap.get("ZipCodeER") == null) {
                    ZipCodeER = "";
                } else {
                    ZipCodeER = valuemap.get("ZipCodeER").trim();
                }
                if (valuemap.get("ReturnPatient") == null) {
                    ReturnPatient = 0;
                } else {
                    ReturnPatient = 1;
                }
                if (valuemap.get("Google") == null) {
                    Google = 0;
                } else {
                    Google = 1;
                }
                if (valuemap.get("MapSearch") == null) {
                    MapSearch = 0;
                } else {
                    MapSearch = 1;
                }
                if (valuemap.get("Billboard") == null) {
                    Billboard = 0;
                } else {
                    Billboard = 1;
                }
                if (valuemap.get("OnlineReview") == null) {
                    OnlineReview = 0;
                } else {
                    OnlineReview = 1;
                }
                if (valuemap.get("TV") == null) {
                    TV = 0;
                } else {
                    TV = 2;
                }
                if (valuemap.get("Website") == null) {
                    Website = 0;
                } else {
                    Website = 1;
                }
                if (valuemap.get("BuildingSignDriveBy") == null) {
                    BuildingSignDriveBy = 0;
                } else {
                    BuildingSignDriveBy = 1;
                }
                if (valuemap.get("Facebook") == null) {
                    Facebook = 0;
                } else {
                    Facebook = 1;
                }
                if (valuemap.get("School") == null) {
                    School = 0;
                    School_text = "-";
                } else {
                    School = 1;
                    if (valuemap.get("School_text").trim().equals(null) || valuemap.get("School_text").trim().equals("")) {
                        School_text = "-";
                    } else {
                        School_text = valuemap.get("School_text").trim();
                    }
                }
                if (valuemap.get("Twitter") == null) {
                    Twitter = 0;
                } else {
                    Twitter = 1;
                }
                if (valuemap.get("Magazine") == null) {
                    Magazine = 0;
                    Magazine_text = "";
                } else {
                    Magazine = 1;
                    if (valuemap.get("Magazine_text").trim().equals(null) || valuemap.get("Magazine_text").trim().equals("")) {
                        Magazine_text = "";
                    } else {
                        Magazine_text = valuemap.get("Magazine_text").trim();
                    }
                }
                if (valuemap.get("Newspaper") == null) {
                    Newspaper = 0;
                    Newspaper_text = "";
                } else {
                    Newspaper = 1;
                    if (valuemap.get("Newspaper_text").trim().equals(null) || valuemap.get("Newspaper_text").trim().equals("")) {
                        Newspaper_text = "";
                    } else {
                        Newspaper_text = valuemap.get("Newspaper_text").trim();
                    }
                }
                if (valuemap.get("FamilyFriend") == null) {
                    FamilyFriend = 0;
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = 1;
                    if (valuemap.get("FamilyFriend_text").trim().equals(null) || valuemap.get("FamilyFriend_text").trim().equals("")) {
                        FamilyFriend_text = "";
                    } else {
                        FamilyFriend_text = valuemap.get("FamilyFriend_text").trim();
                    }
                }
                if (valuemap.get("UrgentCare") == null) {
                    UrgentCare = 0;
                    UrgentCare_text = "";
                } else {
                    UrgentCare = 1;
                    if (valuemap.get("UrgentCare_text").trim().equals(null) || valuemap.get("UrgentCare_text").trim().equals("")) {
                        UrgentCare_text = "";
                    } else {
                        UrgentCare_text = valuemap.get("UrgentCare_text").trim();
                    }
                }
                if (valuemap.get("CommunityEvent") == null) {
                    CommunityEvent = 0;
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = 1;
                    if (valuemap.get("CommunityEvent_text").trim().equals(null) || valuemap.get("CommunityEvent_text").trim().equals("")) {
                        CommunityEvent_text = "";
                    } else {
                        CommunityEvent_text = valuemap.get("CommunityEvent_text").trim();
                    }
                }
                if (valuemap.get("Work") == null) {
                    Work = 0;
                    Work_text = "";
                } else {
                    Work = 1;
                    if (valuemap.get("Work_text").trim().equals(null) || valuemap.get("Work_text").trim().equals("")) {
                        Work_text = "";
                    } else {
                        Work_text = valuemap.get("Work_text").trim();
                    }
                }
                if (valuemap.get("Physician") == null) {
                    Physician = 0;
                    Physician_text = "";
                } else {
                    Physician = 1;
                    if (valuemap.get("Physician_text").trim().equals(null) || valuemap.get("Physician_text").trim().equals("")) {
                        Physician_text = "";
                    } else {
                        Physician_text = valuemap.get("Physician_text").trim();
                    }
                }
                if (valuemap.get("Other") == null) {
                    Other = 0;
                    Other_text = "";
                } else {
                    Other = 1;
                    if (valuemap.get("Other_text").trim().equals(null) || valuemap.get("Other_text").trim().equals("")) {
                        Other_text = "";
                    } else {
                        Other_text = valuemap.get("Other_text").trim();
                    }
                }


                if (valuemap.get("Attorney") == null) {
                    Attorney = 0;
                    Attorney_text = "";
                } else {
                    Attorney = 1;
                    if (valuemap.get("Attorney_text").trim().equals(null) || valuemap.get("Attorney_text").trim().equals("")) {
                        Attorney_text = "";
                    } else {
                        Attorney_text = valuemap.get("Attorney_text").trim();
                    }
                }

                if (valuemap.get("FrVisitedBefore") == null) {
                    FrVisitedBefore = 0;
                } else {
                    FrVisitedBefore = Integer.parseInt(valuemap.get("FrVisitedBefore").trim());
                }
                if (valuemap.get("FrFamiliyVisitedBefore") == null) {
                    FrFamiliyVisitedBefore = 0;
                } else {
                    FrFamiliyVisitedBefore = Integer.parseInt(valuemap.get("FrFamiliyVisitedBefore").trim());
                }
                if (valuemap.get("FrInternet") == null) {
                    FrInternet = 0;
                } else {
                    FrInternet = 1;
                }
                if (valuemap.get("FrBillboard") == null) {
                    FrBillboard = 0;
                } else {
                    FrBillboard = 1;
                }
                if (valuemap.get("FrGoogle") == null) {
                    FrGoogle = 0;
                } else {
                    FrGoogle = 1;
                }
                if (valuemap.get("FrBuildingSignage") == null) {
                    FrBuildingSignage = 0;
                } else {
                    FrBuildingSignage = 1;
                }
                if (valuemap.get("FrFacebook") == null) {
                    FrFacebook = 0;
                } else {
                    FrFacebook = 1;
                }
                if (valuemap.get("FrLivesNear") == null) {
                    FrLivesNear = 0;
                } else {
                    FrLivesNear = 1;
                }
                if (valuemap.get("FrTwitter") == null) {
                    FrTwitter = 0;
                } else {
                    FrTwitter = 1;
                }
                if (valuemap.get("FrTV") == null) {
                    FrTV = 0;
                } else {
                    FrTV = 1;
                }
                if (valuemap.get("FrMapSearch") == null) {
                    FrMapSearch = 0;
                } else {
                    FrMapSearch = 1;
                }
                if (valuemap.get("FrEvent") == null) {
                    FrEvent = 0;
                } else {
                    FrEvent = 1;
                }
                if (valuemap.get("FrPhysicianReferral") == null) {
                    FrPhysicianReferral = "";
                } else {
                    FrPhysicianReferral = valuemap.get("FrPhysicianReferral").trim();
                }
                if (valuemap.get("FrNeurologyReferral") == null) {
                    FrNeurologyReferral = "";
                } else {
                    FrNeurologyReferral = valuemap.get("FrNeurologyReferral").trim();
                }
                if (valuemap.get("FrUrgentCareReferral") == null) {
                    FrUrgentCareReferral = "";
                } else {
                    FrUrgentCareReferral = valuemap.get("FrUrgentCareReferral").trim();
                }
                if (valuemap.get("FrOrganizationReferral") == null) {
                    FrOrganizationReferral = "";
                } else {
                    FrOrganizationReferral = valuemap.get("FrOrganizationReferral").trim();
                }
                if (valuemap.get("FrFriendFamily") == null) {
                    FrFriendFamily = "";
                } else {
                    FrFriendFamily = valuemap.get("FrFriendFamily").trim();
                }


                if (ClientIndex == 41 || ClientIndex == 42 || ClientIndex == 43) {
                    if (valuemap.get("releaseRecord") == null) {
                        releaseRecord = "0";
                    } else {
                        releaseRecord = valuemap.get("releaseRecord").trim();
                    }
                    if (valuemap.get("STDrelease") == null) {
                        STDrelease = "0";
                    } else {
                        STDrelease = valuemap.get("STDrelease").trim();
                    }

                    Filter_WB_SW_A = ",STDrelease,releaseRecord";
                    Filter_WB_SW_Q = ",?,?";
                }
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData^^" + facilityName + " ##MES#002)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + "", "PatientReg##MES#002 ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                Parser.SetField("Message", "MES#002");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }

            String Date = "";
            try {
                Query = "Select Date_format(now(),'%m/%d/%Y %T')";
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    Date = rset.getString(1);
                rset.close();
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }

            //for handling refresh from signingbundle.html
            if (CheckPatient_Via_SaveData99(FirstName, LastName, DOB, Integer.parseInt(ClientId), conn, out, helper, servletContext, bundleFunction, request, response, UserId, DirectoryName, rqtype, Date)) {
                return;
            }


            try {
                Query = "Select Id,dbname from oe.clients where ltrim(rtrim(UPPER(Id))) =  ltrim(rtrim(UPPER('" + ClientIndex + "')))";
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientIndex = rset.getInt(1);
                    Database = rset.getString(2);
                }
                rset.close();
                stmt.close();
                try {
                    if (ReasonVisit.equals("")) {
                        out.println("Please Select the Reason of Visit from the DropDown that appears besides/below the ReasonVisit");
                        out.println("<br><input type=button class=button name=Back Value=\"  Back  \" onclick=history.back()></body></html>");
                        return;
                    }
                    if (ClientIndex == 27 || ClientIndex == 29) {
                        Query = "Select ReasonVisit from " + Database + ".ReasonVisits where Id = " + ReasonVisit;
                        stmt = conn.createStatement();
                        rset = stmt.executeQuery(Query);
                        if (rset.next())
                            ReasonVisit = rset.getString(1);
                        rset.close();
                        stmt.close();
                    }
                    if (MRN == 0)
                        MRN = 310001;
                    Query = "Select MRN from " + Database + ".PatientReg order by ID desc limit 1 ";
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next())
                        MRN = rset.getInt(1);
                    rset.close();
                    stmt.close();
                    if (String.valueOf(MRN).length() == 0) {
                        MRN = 310001;
                    } else if (String.valueOf(MRN).length() == 4) {
                        MRN = 310001;
                    } else if (String.valueOf(MRN).length() == 8) {
                        MRN = 310001;
                    } else if (String.valueOf(MRN).length() == 6) {
                        MRN++;
                    }
                    if (String.valueOf(ClientIndex).length() == 1) {
                        ExtendedMRN = "100" + ClientIndex + MRN;
                    } else if (String.valueOf(ClientIndex).length() == 2) {
                        ExtendedMRN = "10" + ClientIndex + MRN;
                    } else if (String.valueOf(ClientIndex).length() == 3) {
                        ExtendedMRN = "1" + ClientIndex + MRN;
                    }
                } catch (Exception ex) {
                    helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData^^" + facilityName + " ##MES#003)", servletContext, ex, "PatientReg", "SaveData", conn);
                    Services.DumException("SaveData^^" + facilityName + " ##MES#003", "PatientReg ", request, ex);
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("FormName", "PatientReg");
                    Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                    Parser.SetField("Message", "MES#003");
                    Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                    return;
                }
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData^^" + facilityName + " ##MES#004)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#004", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                Parser.SetField("Message", "MES#004");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            Query = "Select now()";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                CurrentDate = rset.getString(1);
            rset.close();
            stmt.close();

            UtilityHelper utilityHelper = new UtilityHelper();
            String ClientIp = utilityHelper.getClientIp(request);
            try {
                PreparedStatement MainReceipt = conn.prepareStatement(
                        "INSERT INTO " + Database + ".PatientReg (ClientIndex,FirstName,LastName ,MiddleInitial,DOB,Age,Gender ,Email,PhNumber ," +
                                "Address,City ,State,Country,ZipCode,SSN,Occupation ,Employer ,EmpContact,PriCarePhy,ReasonVisit,SelfPayChk," +
                                "CreatedDate,Title, MaritalStatus,CreatedBy, MRN, Status, DateofService, ExtendedMRN, County, Ethnicity, " +
                                "Address2, StreetAddress2, EnterBy, EnterIP,RegisterFrom,ViewDate,ReasonVisitOthers" + Filter_WB_SW_A + ") " +
                                "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?,0,?,?,?,?,?,?,?,?,?,NOW(),?" + Filter_WB_SW_Q + ") ");
                MainReceipt.setInt(1, ClientIndex);
                MainReceipt.setString(2, FirstName);
                MainReceipt.setString(3, LastName);
                MainReceipt.setString(4, MiddleInitial);
                MainReceipt.setString(5, DOB);
                MainReceipt.setString(6, Age);
                MainReceipt.setString(7, gender);
                MainReceipt.setString(8, Email);
                MainReceipt.setString(9, PhNumber);
                MainReceipt.setString(10, Address);
                MainReceipt.setString(11, City);
                MainReceipt.setString(12, State);
                MainReceipt.setString(13, Country);
                MainReceipt.setString(14, ZipCode);
                MainReceipt.setString(15, SSN);
                MainReceipt.setString(16, Occupation);
                MainReceipt.setString(17, Employer);
                MainReceipt.setString(18, EmpContact);
                MainReceipt.setString(19, PriCarePhy);
                MainReceipt.setString(20, ReasonVisit);
                MainReceipt.setInt(21, SelfPayChk);
                MainReceipt.setString(22, Title);
                MainReceipt.setString(23, MaritalStatus);
                MainReceipt.setString(24, "Out Patient");
                MainReceipt.setInt(25, MRN);
                MainReceipt.setString(26, CurrentDate);
                MainReceipt.setString(27, ExtendedMRN);
                MainReceipt.setString(28, County);
                MainReceipt.setString(29, Ethnicity);
                MainReceipt.setString(30, Address2);
                MainReceipt.setString(31, StreetAddress2);
                MainReceipt.setString(32, UserId);
                MainReceipt.setString(33, ClientIp);
                MainReceipt.setString(34, "QR Code PRF");
                MainReceipt.setString(35, ReasonVisitOthers);
                if (ClientIndex == 41 || ClientIndex == 42 || ClientIndex == 43) {
                    MainReceipt.setString(36, STDrelease);
                    MainReceipt.setString(37, releaseRecord);
                }
//                System.out.println("Patient REG Query -> "+MainReceipt.toString());
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion PatientReg^^" + facilityName + " ##MES#005)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#005", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                Parser.SetField("Message", "MES#005");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            try {
                Query = "Select max(ID) from " + Database + ".PatientReg ";
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    PatientRegId = rset.getInt(1);
                rset.close();
                stmt.close();
            } catch (Exception e) {
//                out.println("Error 3- :" + e.getMessage());
            }
            try {
                PreparedStatement MainReceipt = conn.prepareStatement(
                        "INSERT INTO " + Database + ".PatientVisit(MRN,PatientRegId,ReasonVisit,VisitNumber,DoctorId,DateofService," +
                                "CreatedDate,CreatedBy) VALUES (?,?,?,1,NULL,?,now(),?) ");
                MainReceipt.setInt(1, MRN);
                MainReceipt.setInt(2, PatientRegId);
                MainReceipt.setString(3, ReasonVisit);
                MainReceipt.setString(4, CurrentDate);
                MainReceipt.setString(5, UserId);
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion Patient Visit^^" + facilityName + " ##MES#006)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#006", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                Parser.SetField("Message", "MES#006");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            try {
                Query = "Select MAX(Id) from " + Database + ".PatientVisit where PatientRegId = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    VisitId = rset.getString(1);
                rset.close();
                stmt.close();
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Getting VisitId from PatientVisit Table^^" + facilityName + " ##MES#007)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#007", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                Parser.SetField("Message", "MES#007");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }

            try {
                if (!IDs.equals("")) {
                    ps = conn.prepareStatement("INSERT INTO " + Database + ".PatientDocUpload (UploadDocumentName,FileName,CreatedBy,CreatedDate,Status,VisitIdx,PatientMRN,PatientRegId,PremisisId) VALUES (?,?,'PatientRegForm',NOW(),0,?,?,?,?)");
                    ps.setString(1, "ID Front");
                    ps.setString(2, IDs);
                    ps.setString(3, VisitId);
                    ps.setInt(4, MRN);
                    ps.setInt(5, PatientRegId);
                    ps.setInt(6, ClientIndex);
                    ps.executeUpdate();
                    ps.close();
                }


                if (!InsuranceIDsF.equals("")) {
                    ps = conn.prepareStatement("INSERT INTO " + Database + ".PatientDocUpload (UploadDocumentName,FileName,CreatedBy,CreatedDate,Status,VisitIdx,PatientMRN,PatientRegId,PremisisId) VALUES (?,?,'PatientRegForm',NOW(),0,?,?,?,?)");
                    ps.setString(1, "Insurance ID Front");
                    ps.setString(2, InsuranceIDsF);
                    ps.setString(3, VisitId);
                    ps.setInt(4, MRN);
                    ps.setInt(5, PatientRegId);
                    ps.setInt(6, ClientIndex);
                    ps.executeUpdate();
                    ps.close();
                }
                if (!InsuranceIDsB.equals("")) {
                    ps = conn.prepareStatement("INSERT INTO " + Database + ".PatientDocUpload (UploadDocumentName,FileName,CreatedBy,CreatedDate,Status,VisitIdx,PatientMRN,PatientRegId,PremisisId) VALUES (?,?,'PatientRegForm',NOW(),0,?,?,?,?)");
                    ps.setString(1, "Insurance ID Back");
                    ps.setString(2, InsuranceIDsB);
                    ps.setString(3, VisitId);
                    ps.setInt(4, MRN);
                    ps.setInt(5, PatientRegId);
                    ps.setInt(6, ClientIndex);
                    ps.executeUpdate();
                    ps.close();
                }
            } catch (SQLException e) {
                System.out.println("PatientDocUpload Error ");
                System.out.println(e.getMessage());
            }
            try {
                PreparedStatement MainReceipt = conn.prepareStatement(
                        "INSERT INTO " + Database + ".PatientReg_Details (PatientRegId,MRN,TravellingChk,TravelWhen,TravelWhere ," +
                                "TravelHowLong,COVIDExposedChk,  SympFever,SympBodyAches ,SympSoreThroat,SympFatigue , SympRash,SympVomiting ," +
                                "SympDiarrhea,SympCough,SympRunnyNose,SympNausea,SympFluSymptoms ,SympEyeConjunctivitis, Race, CovidExpWhen, " +
                                "SpCarePhy,  SympHeadache, SympLossTaste, SympShortBreath, SympCongestion, AddInfoTextArea, VisitId, " +
                                "GuarantorName, GuarantorDOB,  GuarantorNumber, GuarantorSSN, COVIDPositveChk, CovidPositiveDate) " +
                                "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
                MainReceipt.setInt(1, PatientRegId);
                MainReceipt.setInt(2, MRN);
                MainReceipt.setInt(3, TravellingChk);
                if (!TravelWhen.equals(""))
                    MainReceipt.setString(4, TravelWhen);
                else
                    MainReceipt.setNull(4, Types.DATE);
                MainReceipt.setString(5, TravelWhere);
                MainReceipt.setString(6, TravelHowLong);
                MainReceipt.setInt(7, COVIDExposedChk);
                MainReceipt.setString(8, SympFever);
                MainReceipt.setString(9, SympBodyAches);
                MainReceipt.setString(10, SympSoreThroat);
                MainReceipt.setString(11, SympFatigue);
                MainReceipt.setString(12, SympRash);
                MainReceipt.setString(13, SympVomiting);
                MainReceipt.setString(14, SympDiarrhea);
                MainReceipt.setString(15, SympCough);
                MainReceipt.setString(16, SympRunnyNose);
                MainReceipt.setString(17, SympNausea);
                MainReceipt.setString(18, SympFluSymptoms);
                MainReceipt.setString(19, "");
                MainReceipt.setString(20, Race);
                MainReceipt.setString(21, CovidExpWhen);
                MainReceipt.setString(22, SpCarePhy);
                MainReceipt.setString(23, SympHeadache);
                MainReceipt.setString(24, SympLossTaste);
                MainReceipt.setString(25, SympShortBreath);
                MainReceipt.setString(26, SympCongestion);
                MainReceipt.setString(27, AddInfoTextArea);
                MainReceipt.setString(28, VisitId);
                MainReceipt.setString(29, GuarantorName);
                MainReceipt.setString(30, GuarantorDOB);
                MainReceipt.setString(31, GuarantorNumber);
                MainReceipt.setString(32, GuarantorSSN);
                MainReceipt.setInt(33, COVIDPositveChk);
                if (CovidPositiveDate.length() > 1)
                    MainReceipt.setString(34, CovidPositiveDate);
                else
                    MainReceipt.setNull(34, Types.DATE);
                //MainReceipt.setString(34, CovidPositiveDate);
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion PatientReg_Details Table^^" + facilityName + " ##MES#008)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#008", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=\"+ClientIndex+\"");
                Parser.SetField("Message", "MES#008");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            if (!PriInsuranceName.equals("")) {
                Query = "Update " + Database + ".PatientReg Set SelfPayChk = 1 where ID = " + PatientRegId;
                stmt = conn.createStatement();
                stmt.executeUpdate(Query);
                stmt.close();
                Query = "Select SelfPayChk from " + Database + ".PatientReg where ID = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    SelfPayChk = rset.getInt(1);
                rset.close();
                stmt.close();
            } else {
                Query = "Update " + Database + ".PatientReg Set SelfPayChk = 0 where ID = " + PatientRegId;
                stmt = conn.createStatement();
                stmt.executeUpdate(Query);
                stmt.close();

                Query = "Select SelfPayChk from " + Database + ".PatientReg where ID = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    SelfPayChk = rset.getInt(1);
                rset.close();
                stmt.close();

/*                int insuranceCount = 0;
                Query = "SELECT COUNT(*) FROM " + Database + ".InsuranceInfo WHERE PatientRegId=" + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    insuranceCount = rset.getInt(1);
                rset.close();
                stmt.close();

                if (insuranceCount > 0) {
                    insertInsuranceInfoHistory(request, conn, servletContext, Database, PatientRegId, out, facilityName, helper);
                    PreparedStatement preparedStatement = conn.prepareStatement(
                            "DELETE FROM " + Database + ".InsuranceInfo WHERE PatientRegId = ?");
                    preparedStatement.setInt(1, PatientRegId);
                    preparedStatement.executeUpdate();
                    preparedStatement.close();
                }*/
            }
//            System.out.println("**** SELF PAY CHECK **** " + SelfPayChk);
            if (PriInsuranceName.equals("8606")) {
                Query = "Update " + Database + ".PatientReg Set SelfPayChk = 0 where ID = " + PatientRegId;
                stmt = conn.createStatement();
                stmt.executeUpdate(Query);
                stmt.close();

                Query = "Select SelfPayChk from " + Database + ".PatientReg where ID = " + PatientRegId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next())
                    SelfPayChk = rset.getInt(1);
                rset.close();
                stmt.close();
            }
            try {
                if (SelfPayChk == 1) {
                    if (ClientIndex == 10 || ClientIndex == 15) {
                        try {
                            PreparedStatement preparedStatement = conn.prepareStatement(
                                    "INSERT INTO " + Database + ".PatientAdmissionBundle(PatientRegId,AdmissionBundle,CreatedDate) " +
                                            "VALUES (?,?,now()) ");
                            preparedStatement.setInt(1, PatientRegId);
                            preparedStatement.setInt(2, AddmissionBundle);
                            preparedStatement.executeUpdate();
                            preparedStatement.close();
                        } catch (Exception ex) {
                            helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData PatientAdmissionBundle Table^^" + facilityName + " ##MES#009)", servletContext, ex, "PatientReg", "SaveData", conn);
                            Services.DumException("SaveData^^" + facilityName + " ##MES#009", "PatientReg ", request, ex);
                            Parsehtm Parser = new Parsehtm(request);
                            Parser.SetField("FormName", "PatientReg");
                            Parser.SetField("ActionID", "GetValues&ClientIndex=\"+ClientIndex+\"");
                            Parser.SetField("Message", "MES#009");
                            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                            return;
                        }
                    }
                    PreparedStatement MainReceipt = conn.prepareStatement(
                            "INSERT INTO " + Database + ".InsuranceInfo(PatientRegId,WorkersCompPolicy,MotorVehAccident,PriInsurance," +
                                    "MemId,GrpNumber,PriInsuranceName,AddressIfDifferent,PrimaryDOB,PrimarySSN,PatientRelationtoPrimary," +
                                    "PrimaryOccupation,PrimaryEmployer,EmployerAddress,EmployerPhone,SecondryInsurance,SubscriberName," +
                                    "SubscriberDOB,MemberID_2,GroupNumber_2,PatientRelationshiptoSecondry,CreatedDate,VisitId, PriInsurerName, OtherInsuranceName,CorporateAccountPriIns,CorporateAccountSecIns) " +
                                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?,?) ");
                    MainReceipt.setInt(1, PatientRegId);
                    MainReceipt.setInt(2, WorkersCompPolicy);
                    MainReceipt.setInt(3, MotorVehAccident);
                    MainReceipt.setString(4, PriInsurance);
                    MainReceipt.setString(5, MemId);
                    MainReceipt.setString(6, GrpNumber);
                    MainReceipt.setString(7, PriInsuranceName);
                    MainReceipt.setString(8, AddressIfDifferent);
                    MainReceipt.setString(9, PrimaryDOB);
                    MainReceipt.setString(10, PrimarySSN);
                    MainReceipt.setString(11, PatientRelationtoPrimary);
                    MainReceipt.setString(12, PrimaryOccupation);
                    MainReceipt.setString(13, PrimaryEmployer);
                    MainReceipt.setString(14, EmployerAddress);
                    MainReceipt.setString(15, EmployerPhone);
                    MainReceipt.setString(16, SecondryInsurance);
                    MainReceipt.setString(17, SubscriberName);
                    MainReceipt.setString(18, SubscriberDOB);
                    MainReceipt.setString(19, MemberID_2);
                    MainReceipt.setString(20, GroupNumber_2);
                    MainReceipt.setString(21, PatientRelationshiptoSecondry);
                    MainReceipt.setString(22, VisitId);
                    MainReceipt.setString(23, PriInsurerName);
                    MainReceipt.setString(24, OtherInsuranceName);
                    MainReceipt.setString(25, CorporateAccountPriIns);
                    MainReceipt.setString(26, CorporateAccountSecIns);
                    MainReceipt.executeUpdate();
                    MainReceipt.close();
                }
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion InsuranceInfo Table^^" + facilityName + " ##MES#010)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#010", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex + "");
                Parser.SetField("Message", "MES#010");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            try {
                PreparedStatement MainReceipt = conn.prepareStatement(
                        "INSERT INTO " + Database + ".EmergencyInfo (PatientRegId,NextofKinName,RelationToPatient,PhoneNumber," +
                                "LeaveMessage,Address,City,State,Country,ZipCode,CreatedDate,VisitId) " +
                                "VALUES (?,?,?,?,?,?,?,?,?,?,now(),?) ");
                MainReceipt.setInt(1, PatientRegId);
                MainReceipt.setString(2, NextofKinName);
                MainReceipt.setString(3, RelationToPatientER);
                MainReceipt.setString(4, PhoneNumberER);
                MainReceipt.setInt(5, LeaveMessageER);
                MainReceipt.setString(6, AddressER);
                MainReceipt.setString(7, CityER);
                MainReceipt.setString(8, StateER);
                MainReceipt.setString(9, CountryER);
                MainReceipt.setString(10, ZipCodeER);
                MainReceipt.setString(11, VisitId);
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion EmergencyInfo Table^^" + facilityName + " ##MES#011)", servletContext, ex, "PatientReg", "SaveData", conn);
                Services.DumException("SaveData^^" + facilityName + " ##MES#011", "PatientReg ", request, ex);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex);
                Parser.SetField("Message", "MES#011");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            if (ClientIndex == 27 || ClientIndex == 29) {
                try {
                    PreparedStatement MainReceipt = conn.prepareStatement(
                            "INSERT INTO " + Database + ".RandomCheckInfo (PatientRegId,FrVisitedBefore, FrFamiliyVisitedBefore," +
                                    "FrInternet,FrBillboard,FrGoogle,FrBuildingSignage,FrFacebook,FrLivesNear,FrTwitter,FrTV,FrMapSearch," +
                                    "FrEvent, FrPhysicianReferral, FrNeurologyReferral,FrUrgentCareReferral,FrOrganizationReferral," +
                                    "FrFriendFamily,CreatedDate,VisitId)  " +
                                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?) ");
                    MainReceipt.setInt(1, PatientRegId);
                    MainReceipt.setInt(2, FrVisitedBefore);
                    MainReceipt.setInt(3, FrFamiliyVisitedBefore);
                    MainReceipt.setInt(4, FrInternet);
                    MainReceipt.setInt(5, FrBillboard);
                    MainReceipt.setInt(6, FrGoogle);
                    MainReceipt.setInt(7, FrBuildingSignage);
                    MainReceipt.setInt(8, FrFacebook);
                    MainReceipt.setInt(9, FrLivesNear);
                    MainReceipt.setInt(10, FrTwitter);
                    MainReceipt.setInt(11, FrTV);
                    MainReceipt.setInt(12, FrMapSearch);
                    MainReceipt.setInt(13, FrEvent);
                    MainReceipt.setString(14, FrPhysicianReferral);
                    MainReceipt.setString(15, FrNeurologyReferral);
                    MainReceipt.setString(16, FrUrgentCareReferral);
                    MainReceipt.setString(17, FrOrganizationReferral);
                    MainReceipt.setString(18, FrFriendFamily);
                    MainReceipt.setString(19, VisitId);
                    MainReceipt.executeUpdate();
                    MainReceipt.close();
                } catch (Exception ex) {
                    helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion RandomCheckInfo Frontline Table^^" + facilityName + " ##MES#012)", servletContext, ex, "PatientReg", "SaveData", conn);
                    Services.DumException("SaveData^^" + facilityName + " ##MES#012", "PatientReg ", request, ex);
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("FormName", "PatientReg");
                    Parser.SetField("ActionID", "GetValues&ClientIndex=\"+ClientIndex+\"");
                    Parser.SetField("Message", "MES#012");
                    Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                    return;
                }
            } else {
                try {
                    PreparedStatement MainReceipt = conn.prepareStatement(
                            "INSERT INTO " + Database + ".RandomCheckInfo (PatientRegId,ReturnPatient,Google,MapSearch,Billboard,OnlineReview," +
                                    "TV,Website,BuildingSignDriveBy,Facebook,School,School_text,Twitter,Magazine,Magazine_text,Newspaper," +
                                    "Newspaper_text,FamilyFriend,FamilyFriend_text,UrgentCare,UrgentCare_text,CommunityEvent," +
                                    "CommunityEvent_text,Work_text,Physician_text,Other_text,CreatedDate,VisitId,Attorney) " +
                                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?) ");
                    MainReceipt.setInt(1, PatientRegId);
                    MainReceipt.setInt(2, ReturnPatient);
                    MainReceipt.setInt(3, Google);
                    MainReceipt.setInt(4, MapSearch);
                    MainReceipt.setInt(5, Billboard);
                    MainReceipt.setInt(6, OnlineReview);
                    MainReceipt.setInt(7, TV);
                    MainReceipt.setInt(8, Website);
                    MainReceipt.setInt(9, BuildingSignDriveBy);
                    MainReceipt.setInt(10, Facebook);
                    MainReceipt.setInt(11, School);
                    MainReceipt.setString(12, School_text);
                    MainReceipt.setInt(13, Twitter);
                    MainReceipt.setInt(14, Magazine);
                    MainReceipt.setString(15, Magazine_text);
                    MainReceipt.setInt(16, Newspaper);
                    MainReceipt.setString(17, Newspaper_text);
                    MainReceipt.setInt(18, FamilyFriend);
                    MainReceipt.setString(19, FamilyFriend_text);
                    MainReceipt.setInt(20, UrgentCare);
                    MainReceipt.setString(21, UrgentCare_text);
                    MainReceipt.setInt(22, CommunityEvent);
                    MainReceipt.setString(23, CommunityEvent_text);
                    MainReceipt.setString(24, Work_text);
                    MainReceipt.setString(25, Physician_text);
                    MainReceipt.setString(26, Other_text);
                    MainReceipt.setString(27, VisitId);
                    MainReceipt.setString(28, Attorney_text);
                    MainReceipt.executeUpdate();
                    MainReceipt.close();
                } catch (Exception ex) {
                    helper.SendEmailWithAttachment("Error in PatientReg ** (SaveData Insertion RandomCheckInfo Table^^" + facilityName + " ##MES#013)", servletContext, ex, "PatientReg", "SaveData", conn);
                    Services.DumException("SaveData^^" + facilityName + " ##MES#013", "PatientReg ", request, ex);
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("FormName", "PatientReg");
                    Parser.SetField("ActionID", "GetValues&ClientIndex=\"+ClientIndex+\"");
                    Parser.SetField("Message", "MES#013");
                    Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                    return;
                }
            }
            Query = "Select CONCAT(IFNULL(Title,''), ' ' , IFNULL(FirstName,''), ' ', IFNULL(MiddleInitial,''), ' ', IFNULL(LastName,'')) from " + Database + ".PatientReg " +
                    "where ID = " + PatientRegId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                PatientName = rset.getString(1);
            rset.close();
            stmt.close();


//            System.out.println("ClientIndex " + ClientIndex);
            if (ClientIndex == 19 || ClientIndex == 33 || ClientIndex == 39 || ClientIndex == 41 ||
                    ClientIndex == 42 || ClientIndex == 43 || ClientIndex == 40 || ClientIndex == 45) {
                String temp = "";
                PatientReg99 obj = new PatientReg99();
                Class classObj = obj.getClass();

                // get all methods in the class
                Method[] allMethods = classObj.getDeclaredMethods();
//                System.out.println("bundleFunction -> "+ bundleFunction);
                for (Method m : allMethods) {
                    String methodName = m.getName();

                    if (methodName.equals(bundleFunction)) {
                        try {
                            // invoke the method directly with its
                            // parameters
                            temp = (String) m.invoke(obj, request, out, conn, servletContext, response, UserId, Database, ClientIndex, DirectoryName, PatientRegId);
//                            System.out.println("temp " + temp);
                        } catch (InvocationTargetException e) {
                            System.out.println("InvocationTargetException " + e.getMessage());
                        }
                    }
                }

//                if (ClientIndex == 41)
//                    temp = GETINPUTwillowbrook(request, out, conn, servletContext, response, UserId, Database, ClientIndex, DirectoryName, PatientRegId);
//                else if (ClientIndex == 42)
//                    temp = GETINPUTsummerwood(request, out, conn, servletContext, response, UserId, Database, ClientIndex, DirectoryName, PatientRegId);
//                else
//                    temp = SaveBundle_HopeER(request, out, conn, response, Database, ClientIndex, DirectoryName, PatientRegId, "REGISTRATION");

//                System.out.println("temp " + temp);
//                .print();
                String[] arr = temp.split("~");
                String FileName = arr[2];
                String outputFilePath = arr[1];
                String pageCount = arr[0];
                Parsehtm Parser = new Parsehtm(request);
//                Parser.SetField("Message", "Thank You " + String.valueOf(PatientName) + " We Have Registered You Successfully " + Message + ". Please walk to the front door and Press the buzzer.  DATED: " + Date);
                Parser.SetField("Message", "Thank You " + PatientName + " We Have Registered You Successfully. Please wait for further processing.  DATED: " + Date);
                Parser.SetField("MRN", "MRN: " + MRN);
//                Parser.SetField("FormName", "PatientReg");
//                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex);
                Parser.SetField("pageCount", String.valueOf(pageCount));
                Parser.SetField("FileName", String.valueOf(FileName));
                Parser.SetField("PatientRegId", String.valueOf(PatientRegId));
                Parser.SetField("outputFilePath", String.valueOf(outputFilePath));
                Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
                Parser.SetField("rqtype", rqtype);
                Parser.GenerateHtml(out, String.valueOf(Services.GetHtmlPath(getServletContext())) + "Exception/MessageVictoria.html");
            } else {
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("Message", "Thank You " + PatientName + " We Have Registered You Successfully. Please Wait for Further Processing. " + Date);
                Parser.SetField("MRN", "MRN: " + MRN);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex);
                Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
                Parser.GenerateHtml(out, String.valueOf(Services.GetHtmlPath(getServletContext())) + "Exception/Message.html");
            }

        } catch (Exception ex) {
            helper.SendEmailWithAttachment("Error in PatientReg99 ** (SaveData99 Main Catch^^" + facilityName + " ##MES#014)", servletContext, ex, "PatientReg", "SaveData", conn);
            Services.DumException("SaveData^^" + facilityName + " ##MES#014", "PatientReg ", request, ex);
            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("FormName", "PatientReg");
            Parser.SetField("ActionID", "GetValues&ClientIndex=\"+ClientIndex+\"");
            Parser.SetField("Message", "MES#014");
            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
        }
    }

    private void CheckPatient(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, String Database, UtilityHelper helper) {
        String Query = "";
        Statement stmt = null;
        ResultSet rset = null;
        String FirstName = "";
        String LastName = "";
        String DOB = "";
        int ClientIndex = 0;
        FirstName = request.getParameter("FirstName").trim();
        LastName = request.getParameter("LastName").trim();
        DOB = request.getParameter("DOB").trim();
        ClientIndex = Integer.parseInt(request.getParameter("ClientIndex").trim());
        try {
            Query = "Select dbname from oe.clients where Id = " + ClientIndex;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                Database = rset.getString(1);
            rset.close();
            stmt.close();
            int PatientFound = 0;
            String FoundMRN = "";
            Query = " Select COUNT(*), IFNULL(MRN,0) from " + Database + ".PatientReg  " +
                    "where Status = 0 and ltrim(rtrim(UPPER(FirstName))) = ltrim(rtrim(UPPER('" + FirstName.trim() + "')))  and " +
                    "ltrim(rtrim(UPPER(LastName))) = ltrim(rtrim(UPPER('" + LastName.trim() + "'))) and DOB = '" + DOB + "'";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                PatientFound = rset.getInt(1);
                FoundMRN = rset.getString(2);
            }
            rset.close();
            stmt.close();

            if (PatientFound > 0) {
                out.println(FoundMRN + "|" + PatientFound);
                return;
            }
        } catch (Exception e) {
            if (conn == null) {
                conn = Services.getMysqlConn(servletContext);
            }
            Services.DumException("CheckPatient^^Facility : " + ClientIndex + " ##MES#00001", "PatientReg ", request, e);
            helper.SendEmailWithAttachment("Error in PatientReg Facility : " + ClientIndex + " ** (CheckPatient Error in Main Catch ^^ ##MES#00001)", servletContext, e, "PatientReg", "CheckPatient", conn);

        }
    }

    private boolean CheckPatient_Via_SaveData99(String FirstName, String LastName, String DOB, int ClientIndex, Connection conn, PrintWriter out, UtilityHelper helper, ServletContext servletContext, String bundleFunction, HttpServletRequest request, HttpServletResponse response, String userId, String directoryName, String rqtype, String date) {
        String Query = "";
        String Database = "";
        Statement stmt = null;
        ResultSet rset = null;
        String PatientName = FirstName + " " + LastName;

        try {
            Query = "Select dbname from oe.clients where Id = " + ClientIndex;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                Database = rset.getString(1);
            rset.close();
            stmt.close();

            int PatientFound = 0;
            String FoundMRN = "";
            int PatientRegId = 0;
            Query = " Select COUNT(*), IFNULL(MRN,0), IFNULL(ID,0) from " + Database + ".PatientReg  " +
                    "where Status = 0 and ltrim(rtrim(UPPER(FirstName))) = ltrim(rtrim(UPPER('" + FirstName.trim() + "')))  and " +
                    "ltrim(rtrim(UPPER(LastName))) = ltrim(rtrim(UPPER('" + LastName.trim() + "'))) and DOB = '" + DOB + "'";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                PatientFound = rset.getInt(1);
                FoundMRN = rset.getString(2);
                PatientRegId = rset.getInt(3);
            }
            rset.close();
            stmt.close();

            if (PatientFound > 0) {
//                System.out.println("patient found");
                if (ClientIndex == 19 || ClientIndex == 33 || ClientIndex == 39 || ClientIndex == 41 || ClientIndex == 42 || ClientIndex == 43 || ClientIndex == 40) {
                    String temp = "";
                    PatientReg99 obj = new PatientReg99();
                    Class classObj = obj.getClass();

                    // get all methods in the class
                    Method[] allMethods = classObj.getDeclaredMethods();
//                System.out.println("bundleFunction -> "+ bundleFunction);
                    for (Method m : allMethods) {
                        String methodName = m.getName();

                        if (methodName.equals(bundleFunction)) {
                            try {
                                // invoke the method directly with its
                                // parameters
                                temp = (String) m.invoke(obj, request, out, conn, servletContext, response, userId, Database, ClientIndex, directoryName, PatientRegId);
//                            System.out.println("temp " + temp);
                            } catch (InvocationTargetException e) {
                                System.out.println("InvocationTargetException " + e.getMessage());
                            }
                        }
                    }

                    String[] arr = temp.split("~");
                    String FileName = arr[2];
                    String outputFilePath = arr[1];
                    String pageCount = arr[0];
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("Message", "Thank You " + PatientName + " We Have Registered You Successfully. Please wait for further processing.  DATED: " + date);
                    Parser.SetField("MRN", "MRN: " + FoundMRN);
                    Parser.SetField("pageCount", String.valueOf(pageCount));
                    Parser.SetField("FileName", String.valueOf(FileName));
                    Parser.SetField("PatientRegId", String.valueOf(PatientRegId));
                    Parser.SetField("outputFilePath", String.valueOf(outputFilePath));
                    Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
                    Parser.SetField("rqtype", "GetValues");
                    Parser.GenerateHtml(out, String.valueOf(Services.GetHtmlPath(getServletContext())) + "Exception/MessageVictoria.html");
                } else {
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("Message", "Thank You " + PatientName + " We Have Registered You Successfully. Please Wait for Further Processing. " + date);
                    Parser.SetField("MRN", "MRN: " + FoundMRN);
                    Parser.SetField("FormName", "PatientReg");
                    Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex);
                    Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
                    Parser.GenerateHtml(out, String.valueOf(Services.GetHtmlPath(getServletContext())) + "Exception/Message.html");
                }
                return true;
            }
        } catch (Exception e) {
            if (conn == null) {
                conn = Services.getMysqlConn(servletContext);
            }
            Services.DumException("CheckPatient^^Facility : " + ClientIndex + " ##MES#00001", "PatientReg ", request, e);
            helper.SendEmailWithAttachment("Error in PatientReg Facility : " + ClientIndex + " ** (CheckPatient Error in Main Catch ^^ ##MES#00001)", servletContext, e, "PatientReg", "CheckPatient", conn);

        }
        return false;
    }

    private void ReasonVisits(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, String Database, UtilityHelper helper) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        StringBuffer ReasonVisitS = new StringBuffer();
        int ClientIndex = Integer.parseInt(request.getParameter("ClientIndex").trim());
        // String facilityName = helper.getFacilityName(request, conn, servletContext, ClientIndex);
        try {
            String ReasonVisit = request.getParameter("ReasonVisitSelect").trim();
            Query = "Select dbname from oe.clients where Id = " + ClientIndex;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                Database = rset.getString(1);
            rset.close();
            stmt.close();
            if (ClientIndex == 27 || ClientIndex == 29) {
                ReasonVisitS.append("<label><font color=\"black\">Reason For Visit <span class=\"text-danger\">*</span> </font></label>");
                ReasonVisitS.append("<select class=\"form-control\" id=\"ReasonVisit\" name=\"ReasonVisit\" style=\"color:black;\" >");
                ReasonVisitS.append("<option value=\"\">Select Reason of Visit</option>\n");
                Query = "Select Id,ReasonVisit from " + Database + ".ReasonVisits where ltrim(rtrim(UPPER(Catagory))) = ltrim(rtrim(UPPER('" + ReasonVisit + "')))";
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next())
                    ReasonVisitS.append("<option value=\"" + rset.getString(1).trim() + "\">" + rset.getString(2).trim() + "</option>\n");
                rset.close();
                stmt.close();
                ReasonVisitS.append("</select>");
            } else if (ReasonVisit.toUpperCase().trim().equals("COVID")) {
                ReasonVisitS.append("<label><font color=\"black\">Reason For Visit <span class=\"text-danger\">*</span> </font></label>");
                ReasonVisitS.append("<input type=\"text\" placeholder=\"\" class=\"form-control\"id=\"ReasonVisit\" name=\"ReasonVisit\" value=\"COVID Testing\" readonly>");
            } else {
                ReasonVisitS.append("<label><font color=\"black\">Reason For Visit <span class=\"text-danger\">*</span> </font></label>");
                ReasonVisitS.append("<input type=\"text\" placeholder=\"\" class=\"form-control\"id=\"ReasonVisit\" name=\"ReasonVisit\" >");
            }
            out.println(ReasonVisitS);
        } catch (Exception e) {
/*            out.println("1");
            out.println(Query);
            System.out.println("Error in Getting Reasons:--" + e.getStackTrace());
            String str = "";
            for (int i = 0; i < (e.getStackTrace()).length; i++)
                str = str + e.getStackTrace()[i] + "<br>";
            out.println(str);*/
            if (conn == null) {
                conn = Services.getMysqlConn(servletContext);
            }
            Services.DumException("ReasonVisits^^Facility : " + ClientIndex + " ##MES#00002", "PatientReg ", request, e);
            helper.SendEmailWithAttachment("Error in ReasonVisits Facility : " + ClientIndex + " ** (EditSave_New Error in Main Catch ^^ ##MES#00002)", servletContext, e, "PatientReg", "ReasonVisits", conn);
        }
    }

    public String GETINPUTSAustin(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, final String UserId, final String Database, final int ClientId, final String DirectoryName, int patientRegId) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        final String State = "";
        final String Country = "";
        final String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        int pageCount = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        final int LeaveMessageER = 0;
        String AddressER = "";
        final String CityER = "";
        final String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        final String CountryER = "";
        final String ZipCodeER = "";
        final String DateConcent = "";
        final String WitnessConcent = "";
        final String PatientBehalfConcent = "";
        final String RelativeSignConcent = "";
        final String DateConcent2 = "";
        final String WitnessConcent2 = "";
        final String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        final String Work = "";
        String Work_text = "";
        final String Physician = "";
        String Physician_text = "";
        final String Other = "";
        String Other_text = "";
        int SelfPayChk = 0;
        final int VerifyChkBox = 0;
        final int ID = patientRegId;// Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
//                    out.println("Inside Get Doc Name");
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        DoctorName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                } else {
//                    out.println("Inside Get Doc Name empty");
                    DoctorName = "";
                }
            } catch (Exception e) {
//                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            if (SelfPayChk == 1) {
                Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,'-'), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,'-'), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-') from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WorkersCompPolicy = rset.getInt(1);
                    MotorVehAccident = rset.getInt(2);
                    if (WorkersCompPolicy == 0) {
                        WorkersCompPolicyString = "Is this a worker\u2019s comp policy: NO";
                    } else {
                        WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES";
                    }
                    if (MotorVehAccident == 0) {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : NO";
                    } else {
                        MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES";
                    }
                    PriInsurance = rset.getString(3);
                    MemId = rset.getString(4);
                    GrpNumber = rset.getString(5);
                    PriInsuranceName = rset.getString(6);
                    AddressIfDifferent = rset.getString(7);
                    PrimaryDOB = rset.getString(8);
                    PrimarySSN = rset.getString(9);
                    PatientRelationtoPrimary = rset.getString(10);
                    PrimaryOccupation = rset.getString(11);
                    PrimaryEmployer = rset.getString(12);
                    EmployerAddress = rset.getString(13);
                    EmployerPhone = rset.getString(14);
                    SecondryInsurance = rset.getString(15);
                    SubscriberName = rset.getString(16);
                    SubscriberDOB = rset.getString(17);
                    PatientRelationshiptoSecondry = rset.getString(18);
                    MemberID_2 = rset.getString(19);
                    GroupNumber_2 = rset.getString(20);
                }
                rset.close();
                stmt.close();
            }
            try {
                if (!PriInsuranceName.equals("-") || PriInsuranceName.equals("")) {
//                    out.println("Inside PriInsuranceName");
                    Query = "Select PayerName from " + Database + ".ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        PriInsuranceName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
//                out.println("Error is PriInsurance: " + e.getMessage());
//                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                } else {
                    Other_text = rset.getString(25);
                }
            }
            rset.close();
            stmt.close();

            String inputFilePath = "";
            final InetAddress ip = InetAddress.getLocalHost();
            final String hostname = ip.getHostName();
//            System.out.println("Your current IP address : " + ip);
//            System.out.println("Your current Hostname : " + hostname);
//            if (hostname.trim().equals("dev-rover-01")) {
//                inputFilePath = "";
//            } else {
//                inputFilePath = "/sftpdrive";
//            }
//            System.out.println("Your current inputFilePath : " + inputFilePath);
            final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
            if (ClientId == 19)
                inputFilePath = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/hopeBundle.pdf";
            else
                inputFilePath = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/adminsaustin.pdf";
            //inputFilePath = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/adminsaustin.pdf";
            final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + filename;
            final OutputStream fos = new FileOutputStream(new File(outputFilePath));
            final PdfReader pdfReader = new PdfReader(inputFilePath);
            final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            pageCount = pdfReader.getNumberOfPages();
//            final GenerateBarCode barCode = new GenerateBarCode();
//            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
//            final Image image = Image.getInstance(BarCodeFilePath);
//            image.scaleAbsolute(150.0f, 30.0f);
            for (int i = 1; i <= pdfReader.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 570.0f);
                    pdfContentByte.showText(ReturnPatient);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 555.0f);
                    pdfContentByte.showText(Google);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 540.0f);
                    pdfContentByte.showText(MapSearch);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 525.0f);
                    pdfContentByte.showText(Billboard);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 505.0f);
                    pdfContentByte.showText(OnlineReview);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 490.0f);
                    pdfContentByte.showText(TV);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 470.0f);
                    pdfContentByte.showText(Website);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 455.0f);
                    pdfContentByte.showText(BuildingSignDriveBy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 440.0f);
                    pdfContentByte.showText(Facebook);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 423.0f);
                    pdfContentByte.showText(School);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(190.0f, 423.0f);
                    pdfContentByte.showText(School_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 405.0f);
                    pdfContentByte.showText(Twitter);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 385.0f);
                    pdfContentByte.showText(Magazine);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 385.0f);
                    pdfContentByte.showText(Magazine_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 365.0f);
                    pdfContentByte.showText(Newspaper);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0f, 365.0f);
                    pdfContentByte.showText(Newspaper_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 350.0f);
                    pdfContentByte.showText(FamilyFriend);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0f, 350.0f);
                    pdfContentByte.showText(FamilyFriend_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 336.0f);
                    pdfContentByte.showText(UrgentCare);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(220.0f, 336.0f);
                    pdfContentByte.showText(UrgentCare_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 320.0f);
                    pdfContentByte.showText(CommunityEvent);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0f, 320.0f);
                    pdfContentByte.showText(CommunityEvent_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0f, 265.0f);
                    pdfContentByte.showText(Work_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0f, 252.0f);
                    pdfContentByte.showText(Physician_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(150.0f, 233.0f);
                    pdfContentByte.showText(Other_text);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0f, 125.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480.0f, 125.0f);
                    pdfContentByte.showText(Time);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setTextMatrix(105.0f, 640.0f);
                    pdfContentByte.showText(LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 640.0f);
                    pdfContentByte.showText(FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0f, 640.0f);
                    pdfContentByte.showText(MiddleInitial);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 605.0f);
                    pdfContentByte.showText("Title: " + Title);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 600.0f);
                    pdfContentByte.showText(MaritalStatus);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0f, 600.0f);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0f, 600.0f);
                    pdfContentByte.showText(Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510.0f, 600.0f);
                    pdfContentByte.showText(gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 570.0f);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 570.0f);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0f, 570.0f);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0f, 540.0f);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0f, 540.0f);
                    pdfContentByte.showText(Occupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 540.0f);
                    pdfContentByte.showText(Employer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0f, 540.0f);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 510.0f);
                    pdfContentByte.showText(PriCarePhy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 510.0f);
                    pdfContentByte.showText(Email);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 510.0f);
                    pdfContentByte.showText(ReasonVisit);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 445.0f);
                    pdfContentByte.showText(WorkersCompPolicyString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0f, 445.0f);
                    pdfContentByte.showText(MotorVehAccidentString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 415.0f);
                    pdfContentByte.showText(PriInsurance);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(280.0f, 415.0f);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0f, 415.0f);
                    pdfContentByte.showText(GrpNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 375.0f);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 375.0f);
                    pdfContentByte.showText(AddressIfDifferent);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0f, 375.0f);
                    pdfContentByte.showText(CityStateZip);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 335.0f);
                    pdfContentByte.showText(PrimaryDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0f, 335.0f);
                    pdfContentByte.showText(PrimarySSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0f, 335.0f);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0f, 335.0f);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 300.0f);
                    pdfContentByte.showText(PrimaryOccupation);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0f, 300.0f);
                    pdfContentByte.showText(PrimaryEmployer);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 300.0f);
                    pdfContentByte.showText(EmployerAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460.0f, 300.0f);
                    pdfContentByte.showText(EmployerPhone);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 275.0f);
                    pdfContentByte.showText(SecondryInsurance);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 275.0f);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0f, 275.0f);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0f, 240.0f);
                    pdfContentByte.showText(PatientRelationshiptoSecondry);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 240.0f);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420.0f, 240.0f);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0f, 190.0f);
                    pdfContentByte.showText(NextofKinName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 190.0f);
                    pdfContentByte.showText(RelationToPatientER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 190.0f);
                    pdfContentByte.showText(PhoneNumberER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510.0f, 190.0f);
                    pdfContentByte.showText(LeaveMessageERString);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(40.0f, 150.0f);
                    pdfContentByte.showText(AddressER);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 150.0f);
                    pdfContentByte.showText(CityStateZipER);
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0f, 75.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 3) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(325.0f, 210.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0f, 130.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 4) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(285.0f, 120.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 5) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0f, 390.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0f, 250.0f);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                }
                if (i == 6) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(95.0f, 550.0f);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0f, 550.0f);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(490.0f, 550.0f);
                    pdfContentByte.showText(PatientRelationtoPrimary);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0f, 525.0f);
                    pdfContentByte.showText(PriInsuranceName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0f, 500.0f);
                    pdfContentByte.showText(MemId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 470.0f);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 365.0f);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330.0f, 200.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();

                }
                if (i == 7) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 490.0f);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 465.0f);
                    pdfContentByte.showText(SubscriberName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0f, 465.0f);
                    pdfContentByte.showText(SubscriberDOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110.0f, 440.0f);
                    pdfContentByte.showText(MemberID_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 440.0f);
                    pdfContentByte.showText(GroupNumber_2);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(120.0f, 415.0f);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0f, 240.0f);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();

                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 130.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 100.0f);
                    pdfContentByte.showText(Date);
                }
                if (i == 8) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0f, 620.0f);
                    pdfContentByte.showText(Title + " " + FirstName + " " + MiddleInitial + " " + LastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 620.0f);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50.0f, 580.0f);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 580.0f);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 480.0f);
                    pdfContentByte.showText(" ");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 440.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340.0f, 440.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 400.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 360.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 130.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
                if (i == 9) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();


                }
                if (i == 10) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();
                }
                if (i == 11) {
                    final PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(35.0f, 750.0f);
                    pdfContentByte.showText("MRN: " + MRN);
                    pdfContentByte.endText();
//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 765.0f);
                    pdfContentByte.showText(LastName + " , " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 755.0f);
                    pdfContentByte.showText(ClientName + "        Sex:" + gender);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 745.0f);
                    pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 735.0f);
                    pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 725.0f);
                    pdfContentByte.showText("Dr. " + DoctorName);
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Bold", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 90.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper.close();
            pdfReader.close();
//            final File pdfFile = new File(outputFilePath);
////            response.setContentType("application/pdf");
////            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
////            response.setContentLength((int) pdfFile.length());
//            final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//            final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//            int bytes;
//            while ((bytes = fileInputStream.read()) != -1) {
//                responseOutputStream.write(bytes);
//            }
            return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
        } catch (Exception e) {
//            out.println(e.getMessage());
        }
        return "";
    }

    String GETINPUTwillowbrook(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, final String UserId, final String Database, final int ClientId, final String DirectoryName, int PatientRegId) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        final String State = "";
        final String Country = "";
        final String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        int pageCount = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        final int LeaveMessageER = 0;
        String AddressER = "";
        final String CityER = "";
        final String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        final String CountryER = "";
        final String ZipCodeER = "";
        final String DateConcent = "";
        final String WitnessConcent = "";
        final String PatientBehalfConcent = "";
        final String RelativeSignConcent = "";
        final String DateConcent2 = "";
        final String WitnessConcent2 = "";
        final String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        final String Work = "";
        String Work_text = "";
        final String Physician = "";
        String Physician_text = "";
        final String Other = "";
        String Other_text = "";
        String ResultPdf = "";
        String PriInsurerName = "";
        String[] PriInsurer;
        MergePdf mergePdf = new MergePdf();
        int SelfPayChk = 0;
        final int VerifyChkBox = 0;
        final int ID = PatientRegId;
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        DoctorName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                } else {
                    DoctorName = "";
                }
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            //            if (SelfPayChk == 1) {
            Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,''), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,''), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-'), IFNULL(PriInsurerName,null) from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                WorkersCompPolicy = rset.getInt(1);
                MotorVehAccident = rset.getInt(2);
                if (WorkersCompPolicy == 0) {
                    WorkersCompPolicyString = "NO";
                } else {
                    WorkersCompPolicyString = "YES";
                }
                if (MotorVehAccident == 0) {
                    MotorVehAccidentString = "NO";
                } else {
                    MotorVehAccidentString = "YES";
                }
                PriInsurance = rset.getString(3);
                MemId = rset.getString(4);
                GrpNumber = rset.getString(5);
                PriInsuranceName = rset.getString(6);
                AddressIfDifferent = rset.getString(7);
                PrimaryDOB = rset.getString(8);
                PrimarySSN = rset.getString(9);
                PatientRelationtoPrimary = rset.getString(10);
                PrimaryOccupation = rset.getString(11);
                PrimaryEmployer = rset.getString(12);
                EmployerAddress = rset.getString(13);
                EmployerPhone = rset.getString(14);
                SecondryInsurance = rset.getString(15);
                SubscriberName = rset.getString(16);
                SubscriberDOB = rset.getString(17);
                PatientRelationshiptoSecondry = rset.getString(18);
                MemberID_2 = rset.getString(19);
                GroupNumber_2 = rset.getString(20);
                PriInsurerName = rset.getString(21);
            }
            rset.close();
            stmt.close();
            //            }
            try {
                if (SelfPayChk != 0 && !PriInsuranceName.equals("-") || !PriInsuranceName.equals("") || !PriInsuranceName.isEmpty()) {
                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        PriInsuranceName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id =" + SecondryInsurance;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        SecondryInsurance = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
//                out.println("Error is PriInsurance: " + e.getMessage());
//                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                } else {
                    Other_text = rset.getString(25);
                }
            }
            rset.close();
            stmt.close();
            String HearAboutUsString = "";
            String HearAboutUsString2 = "";
            if (ReturnPatient.toUpperCase().equals("YES")) {
                HearAboutUsString += "Return Patient, ";
            }
            if (Google.toUpperCase().equals("YES")) {
                HearAboutUsString += "Google, ";
            }
            if (MapSearch.toUpperCase().equals("YES")) {
                HearAboutUsString += "Map Search, ";
            }
            if (OnlineReview.toUpperCase().equals("YES")) {
                HearAboutUsString += "Online Review, ";
            }
            if (TV.toUpperCase().equals("YES")) {
                HearAboutUsString += "TV, ";
            }
            if (Website.toUpperCase().equals("YES")) {
                HearAboutUsString += "Website, ";
            }
            if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                HearAboutUsString += "Building Sign, ";
            }
            if (Facebook.toUpperCase().equals("YES")) {
                HearAboutUsString += "Facebook, ";
            }
            if (School.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "School, ";
            }
            if (Twitter.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Twitter, ";
            }
            if (Magazine.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Magazine, ";
            }
            if (Newspaper.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Newspaper, ";
            }
            if (FamilyFriend.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Friend / Family, ";
            }
            if (UrgentCare.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Urgent Care, ";
            }
            if (CommunityEvent.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Comminuty Event, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Work, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Physician, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Others ";
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            final InetAddress ip = InetAddress.getLocalHost();
            final String hostname = ip.getHostName();
            if (hostname.trim().equals("rover-01")) {
                inputFilePath = "";
            } else {
                inputFilePath = "/sftpdrive";
            }
            final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
            if (SelfPayChk == 0) {
                inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/SELFPAYPATIENTPACKET.pdf";

                final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final OutputStream fos = new FileOutputStream(new File(outputFilePath));
                final PdfReader pdfReader = new PdfReader(inputFilePath);
                final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
                pageCount = pdfReader.getNumberOfPages();
                //            final GenerateBarCode barCode = new GenerateBarCode();
                //            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
                //            final Image image = Image.getInstance(BarCodeFilePath);
                //            image.scaleAbsolute(150.0f, 30.0f);
                // loop on all the PDF pages
                // i is the pdfPageNumber
                // loop on all the PDF pages
                // i is the pdfPageNumber
                for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                    if (i == 1) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 675); // set x and y co-ordinates
                        pdfContentByte.showText(Time);//"TIME "); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 585); // set x and y co-ordinates
                        pdfContentByte.showText(LastName);//"Last Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(365, 585); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"First Name"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        pdfContentByte.setTextMatrix(217, 545); // set x and y co-ordinates
                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.setTextMatrix(217, 545);// *YES* PATIENT BEFORE add the text
                        } else {
                            pdfContentByte.setTextMatrix(259, 545);// *NO* PATIENT BEFORE add the text
                        }
                        pdfContentByte.showText("*"); // *YES* PATIENT BEFORE add the text
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(259, 545); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *NO* PATIENT BEFORE add the text
                        //                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 515); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); //   add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(360, 515); // set x and y co-ordinates
                        pdfContentByte.showText(Age);//"Age"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(130, 465); // set x and y co-ordinates
                        pdfContentByte.showText(ReasonVisit);//"Reason Of Visit"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 285); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician Name"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Clinic Sign/Drive By add the text
                            pdfContentByte.endText();
                        }

                        if (Website.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // LIFESAVERER.com  add the text
                            pdfContentByte.endText();
                        }

                        if (!Other_text.toUpperCase().equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(380, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(512, 168); // set x and y co-ordinates
                            pdfContentByte.showText(Other_text); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                        }

                        if (Google.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Web Browser (Google, Bing, Yahoo) add the text
                            pdfContentByte.endText();
                        }

                        if (!Physician_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Doctor  add the text
                            pdfContentByte.endText();
                        }

                        if (!CommunityEvent_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(381, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Children’s Festival add the text
                            pdfContentByte.endText();
                        }

                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  I was a former patient add the text
                            pdfContentByte.endText();
                        }

                        if (!FamilyFriend_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Family or Friend  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 125); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Radio advertisement add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Former patient recommendation add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Employer  add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // GOOGLE add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Insurance Company recommendation add the text
                        //                        pdfContentByte.endText();
                        if (!Newspaper_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 83); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Newspaper  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Yelp add the text
                        //                        pdfContentByte.endText();

                        if (TV.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 63); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  TV Advertisement add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 63); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Marketing/Public Relation Representative  add the text
                        //                        pdfContentByte.endText();

                    }

                    if (i == 2) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(70, 640); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 640); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(85, 620); // set x and y co-ordinates
                        pdfContentByte.showText(Address);//"Address"); // add the text
                        pdfContentByte.endText();

                        if (!CityStateZip.equals("")) {
                            String[] cityStateZip = CityStateZip.split("/");
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(405, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[0]);//"City"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(503, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[1]);//"State"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(570, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[2]); // add the text
                            pdfContentByte.endText();
                        }


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(95, 600); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 580); // set x and y co-ordinates
                        pdfContentByte.showText(SSN);//"SSN"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 580); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (gender.equals("male")) {
                            pdfContentByte.setTextMatrix(477.5f, 578);// *MALE* Sex add the text
                        } else {
                            pdfContentByte.setTextMatrix(413.5f, 578);//*FEMALE* Sex add the text
                        }
                        pdfContentByte.showText("*"); //
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (MaritalStatus.equals("Single")) {
                            pdfContentByte.setTextMatrix(100, 558);// *SINGLE* Marital Status
                        } else if (MaritalStatus.equals("Mar")) {
                            pdfContentByte.setTextMatrix(152, 558);// *Married* Marital Status
                        } else if (MaritalStatus.equals("Wid")) {
                            pdfContentByte.setTextMatrix(283.5f, 558);// *Widowed* Marital Status
                        } else if (MaritalStatus.equals("Div")) {
                            pdfContentByte.setTextMatrix(215, 558);// *Divorced* Marital Status
                        }
                        pdfContentByte.showText("*"); // *SINGLE* Marital Status add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420, 560); // set x and y co-ordinates
                        pdfContentByte.showText(Email);//"Email"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(385, 540); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"Emergency Contact Name"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(315, 520); // set x and y co-ordinates
                        pdfContentByte.showText(AddressER);//"Emergency Address"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 470); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician"); // add the text
                        pdfContentByte.endText();


                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(240, 520); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 450); // set x and y co-ordinates
                        pdfContentByte.showText(Employer);//"Employer"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(320, 450); // set x and y co-ordinates
                        pdfContentByte.showText(Occupation);//"Occupation"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(460, 450); // set x and y co-ordinates
                        pdfContentByte.showText(EmployerPhone);//"Phone Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 405); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 375); // set x and y co-ordinates
                        pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(390, 375); // set x and y co-ordinates
                        pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 360); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsurerName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 360); // set x and y co-ordinates
                        pdfContentByte.showText(PrimaryDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 340); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(440, 340); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 325); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 300); // set x and y co-ordinates
                        pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 275); // set x and y co-ordinates
                        pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 275); // set x and y co-ordinates
                        pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 260); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 260); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 250); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(460, 250); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 230); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 3) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 150); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(50, 105); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"Print Patient Name"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 4) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 180); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"Relationship to ER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 140); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                    }

                    if (i == 5) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 430); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(80, 350); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(500, 350); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 285); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 245); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"NameER"); // add the text
                        pdfContentByte.endText();
                    }


                    if (i == 6) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 100); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 100); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 60); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"RealtionshipER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 60); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }
                    if (i == 7) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 610); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                    }
                }
                pdfStamper.close();
                pdfReader.close();

                return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
//                final File pdfFile = new File(outputFilePath);
//                response.setContentType("application/pdf");
//                response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//                response.setContentLength((int) pdfFile.length());
//                final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//                final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//                int bytes;
//                while ((bytes = fileInputStream.read()) != -1) {
//                    responseOutputStream.write(bytes);
//                }
            } else {
                inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/INSUREDPATIENTPACKET.pdf";
                final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final OutputStream fos = new FileOutputStream(new File(outputFilePath));
                final PdfReader pdfReader = new PdfReader(inputFilePath);
                final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
                pageCount = pdfReader.getNumberOfPages();

                //            final GenerateBarCode barCode = new GenerateBarCode();
                //            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
                //            final Image image = Image.getInstance(BarCodeFilePath);
                //            image.scaleAbsolute(150.0f, 30.0f);
                // loop on all the PDF pages
                // i is the pdfPageNumber
                for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                    if (i == 1) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 675); // set x and y co-ordinates
                        pdfContentByte.showText(Time);//"TIME "); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 565); // set x and y co-ordinates
                        pdfContentByte.showText(LastName);//"Last Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(365, 565); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"First Name"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.setTextMatrix(217, 525);// *YES* PATIENT BEFORE add the text
                        } else {
                            pdfContentByte.setTextMatrix(259, 525);
                            ;// *NO* PATIENT BEFORE add the text
                        }
                        pdfContentByte.setTextMatrix(217, 525); // set x and y co-ordinates
                        pdfContentByte.showText("*"); // *YES* PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 500); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(360, 500); // set x and y co-ordinates
                        pdfContentByte.showText(Age);//"Age"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(130, 445); // set x and y co-ordinates
                        pdfContentByte.showText(ReasonVisit);//"Reason Of Visit"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician Name"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Clinic Sign/Drive By add the text
                            pdfContentByte.endText();
                        }

                        if (Website.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // LIFESAVERER.com  add the text
                            pdfContentByte.endText();
                        }

                        if (!Other_text.toUpperCase().equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(380, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(512, 168); // set x and y co-ordinates
                            pdfContentByte.showText(Other_text); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                        }

                        if (Google.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Web Browser (Google, Bing, Yahoo) add the text
                            pdfContentByte.endText();
                        }

                        if (!Physician_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Doctor  add the text
                            pdfContentByte.endText();
                        }

                        if (!CommunityEvent_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(381, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Children’s Festival add the text
                            pdfContentByte.endText();
                        }

                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  I was a former patient add the text
                            pdfContentByte.endText();
                        }

                        if (!FamilyFriend_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Family or Friend  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 125); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Radio advertisement add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Former patient recommendation add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Employer  add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // GOOGLE add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Insurance Company recommendation add the text
                        //                        pdfContentByte.endText();
                        if (!Newspaper_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 83); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Newspaper  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Yelp add the text
                        //                        pdfContentByte.endText();

                        if (TV.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 63); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  TV Advertisement add the text
                            pdfContentByte.endText();
                        }


                    }

                    if (i == 2) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(70, 645); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 645); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(85, 625); // set x and y co-ordinates
                        pdfContentByte.showText(Address);//"Address"); // add the text
                        pdfContentByte.endText();
                        if (!CityStateZip.equals("")) {
                            String[] cityStateZip = CityStateZip.split("/");
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(405, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[0]);//"City"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(503, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[1]);//"State"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(570, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[2]); // add the text
                            pdfContentByte.endText();
                        }


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(95, 605); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 585); // set x and y co-ordinates
                        pdfContentByte.showText(SSN);//"SSN"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 585); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (gender.equals("male")) {
                            pdfContentByte.setTextMatrix(477.5f, 583); // *MALE* Sex set x and y co-ordinates
                        } else {
                            pdfContentByte.setTextMatrix(413.5f, 583); // *FEMALE* Sexset x and y co-ordinates
                        }
                        pdfContentByte.showText("*"); // *FEMALE* Sex add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
//                        System.out.println("MaritalStatus -> " + MaritalStatus);

                        if (MaritalStatus.equals("Single")) {
//                            System.out.println(" Single MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(100, 563);// *SINGLE* Marital Status
                        } else if (MaritalStatus.equals("Mar")) {
//                            System.out.println("Mar MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(152, 563); // set x and y co-ordinates
                        } else if (MaritalStatus.equals("Wid")) {
//                            System.out.println("Wid MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(283.5f, 563); // set x and y co-ordinates
                        } else if (MaritalStatus.equals("Div")) {
//                            System.out.println("Div MaritalStatus -> " + MaritalStatus);

                            pdfContentByte.setTextMatrix(215, 563); // set x and y co-ordinates
                        }
                        pdfContentByte.showText("*"); // *SINGLE* Marital Status add the text
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(152, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Married* Marital Status add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(215, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Divorced* Marital Status add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(283.5f, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Widowed* Sex add the text
                        //                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420, 565); // set x and y co-ordinates
                        pdfContentByte.showText(Email);//"Email"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(385, 545); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"Emergency Contact Name"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(315, 525); // set x and y co-ordinates
                        pdfContentByte.showText(AddressER);//"Emergency Address"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 478); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 458); // set x and y co-ordinates
                        pdfContentByte.showText(Employer);//"Employer"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(320, 458); // set x and y co-ordinates
                        pdfContentByte.showText(Occupation);//"Occupation"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(460, 458); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 405); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 380); // set x and y co-ordinates
                        pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(390, 380); // set x and y co-ordinates
                        pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 365); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsurerName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 365); // set x and y co-ordinates
                        pdfContentByte.showText(PrimaryDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 348); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(440, 348); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 335); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 300); // set x and y co-ordinates
                        pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 283); // set x and y co-ordinates
                        pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 283); // set x and y co-ordinates
                        pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 268); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 268); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 255); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(460, 255); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 235); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();
                    }

                    if (i == 3) {

                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(180, 270); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 180); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"Relationship to ER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 140); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 4) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(70, 200); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 200); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(50, 150); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Print Patient Name"); // add the text
                        pdfContentByte.endText();


                    }

                    if (i == 5) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 405); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(80, 315); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(500, 315); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 230); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"NameER"); // add the text
                        pdfContentByte.endText();
                    }


                    if (i == 6) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 128); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 128); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 85); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"RealtionshipER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 85); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }
                    if (i == 7) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 585); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                    }
                }
                pdfStamper.close();
                pdfReader.close();
//                final File pdfFile = new File(outputFilePath);
//                response.setContentType("application/pdf");
//                response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//                response.setContentLength((int) pdfFile.length());
//                final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//                final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//                int bytes;
//                while ((bytes = fileInputStream.read()) != -1) {
//                    responseOutputStream.write(bytes);
//                }

                return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";


/*
                System.out.println("Mouhid....");
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("outputFilePath", outputFilePath);
//            Parser.SetField("imagelist", String.valueOf(imagelist));
                Parser.SetField("pageCount", String.valueOf(pageCount));
                Parser.SetField("PatientRegId", String.valueOf(ID));
                Parser.SetField("FileName", FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
                Parser.SetField("ClientID", String.valueOf(ClientId));
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Forms/DownloadBundleHTML.html");
*/

            }


        } catch (Exception e) {
            //            out.println(e.getMessage());
            System.out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < e.getStackTrace().length; ++j) {
                str = str + e.getStackTrace()[j] + "<br>";
            }
            System.out.println(str);
        }
        return "";
    }

    String GETINPUTsummerwood(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, final String UserId, final String Database, final int ClientId, final String DirectoryName, int PatientRegId) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
//        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        final String State = "";
        final String Country = "";
        final String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        int pageCount = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        final int LeaveMessageER = 0;
        String AddressER = "";
        final String CityER = "";
        final String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        final String CountryER = "";
        final String ZipCodeER = "";
        final String DateConcent = "";
        final String WitnessConcent = "";
        final String PatientBehalfConcent = "";
        final String RelativeSignConcent = "";
        final String DateConcent2 = "";
        final String WitnessConcent2 = "";
        final String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        final String Work = "";
        String Work_text = "";
        final String Physician = "";
        String Physician_text = "";
        final String Other = "";
        String Other_text = "";
        String ResultPdf = "";
        String PriInsurerName = "";
        String[] PriInsurer;
        MergePdf mergePdf = new MergePdf();
        int SelfPayChk = 0;
        final int VerifyChkBox = 0;
        final int ID = PatientRegId;//Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
//                    out.println("Inside Get Doc Name");
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        DoctorName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                } else {
//                    out.println("Inside Get Doc Name empty");
                    DoctorName = "";
                }
            } catch (Exception e) {
//                out.println("Error In PateintReg:--" + e.getMessage());
//                out.println(Query);
            }
            //            if (SelfPayChk == 1) {
            Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,''), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,''), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-'), IFNULL(PriInsurerName,null) from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                WorkersCompPolicy = rset.getInt(1);
                MotorVehAccident = rset.getInt(2);
                if (WorkersCompPolicy == 0) {
                    WorkersCompPolicyString = "NO";
                } else {
                    WorkersCompPolicyString = "YES";
                }
                if (MotorVehAccident == 0) {
                    MotorVehAccidentString = "NO";
                } else {
                    MotorVehAccidentString = "YES";
                }
                PriInsurance = rset.getString(3);
                MemId = rset.getString(4);
                GrpNumber = rset.getString(5);
                PriInsuranceName = rset.getString(6);
                AddressIfDifferent = rset.getString(7);
                PrimaryDOB = rset.getString(8);
                PrimarySSN = rset.getString(9);
                PatientRelationtoPrimary = rset.getString(10);
                PrimaryOccupation = rset.getString(11);
                PrimaryEmployer = rset.getString(12);
                EmployerAddress = rset.getString(13);
                EmployerPhone = rset.getString(14);
                SecondryInsurance = rset.getString(15);
                SubscriberName = rset.getString(16);
                SubscriberDOB = rset.getString(17);
                PatientRelationshiptoSecondry = rset.getString(18);
                MemberID_2 = rset.getString(19);
                GroupNumber_2 = rset.getString(20);
                PriInsurerName = rset.getString(21);
            }
            rset.close();
            stmt.close();
            //            }
            try {
                if (SelfPayChk != 0 && !PriInsuranceName.equals("-") || !PriInsuranceName.equals("")) {
//                    out.println("Inside PriInsuranceName");
                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        PriInsuranceName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id =" + SecondryInsurance;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        SecondryInsurance = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
//                out.println("Error is PriInsurance: " + e.getMessage());
//                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                } else {
                    Other_text = rset.getString(25);
                }
            }
            rset.close();
            stmt.close();
            String HearAboutUsString = "";
            String HearAboutUsString2 = "";
            if (ReturnPatient.toUpperCase().equals("YES")) {
                HearAboutUsString += "Return Patient, ";
            }
            if (Google.toUpperCase().equals("YES")) {
                HearAboutUsString += "Google, ";
            }
            if (MapSearch.toUpperCase().equals("YES")) {
                HearAboutUsString += "Map Search, ";
            }
            if (OnlineReview.toUpperCase().equals("YES")) {
                HearAboutUsString += "Online Review, ";
            }
            if (TV.toUpperCase().equals("YES")) {
                HearAboutUsString += "TV, ";
            }
            if (Website.toUpperCase().equals("YES")) {
                HearAboutUsString += "Website, ";
            }
            if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                HearAboutUsString += "Building Sign, ";
            }
            if (Facebook.toUpperCase().equals("YES")) {
                HearAboutUsString += "Facebook, ";
            }
            if (School.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "School, ";
            }
            if (Twitter.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Twitter, ";
            }
            if (Magazine.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Magazine, ";
            }
            if (Newspaper.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Newspaper, ";
            }
            if (FamilyFriend.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Friend / Family, ";
            }
            if (UrgentCare.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Urgent Care, ";
            }
            if (CommunityEvent.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Comminuty Event, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Work, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Physician, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Others ";
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            final InetAddress ip = InetAddress.getLocalHost();
            final String hostname = ip.getHostName();
            if (hostname.trim().equals("rover-01")) {
                inputFilePath = "";
            } else {
                inputFilePath = "/sftpdrive";
            }

            if (SelfPayChk == 0) {

                String UID = "";
                Image SignImages = null;
                final File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                final boolean exists = tmpDir.exists();
                if (exists) {
                    Query = "Select UID from " + Database + ".SignRequest where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        UID = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                    SignImages.scaleAbsolute(80.0f, 30.0f);
                    //outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
                } else {
                    SignImages = null;
                }
                inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/SELFPAYPATIENTPACKET.pdf";

                final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final OutputStream fos = new FileOutputStream(new File(outputFilePath));
                final PdfReader pdfReader = new PdfReader(inputFilePath);
                final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
                pageCount = pdfReader.getNumberOfPages();
                final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";

                //            final GenerateBarCode barCode = new GenerateBarCode();
                //            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
                //            final Image image = Image.getInstance(BarCodeFilePath);
                //            image.scaleAbsolute(150.0f, 30.0f);
                // loop on all the PDF pages
                // i is the pdfPageNumber
                // loop on all the PDF pages
                // i is the pdfPageNumber
                for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                    if (i == 1) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 675); // set x and y co-ordinates
                        pdfContentByte.showText(Time);//"TIME "); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 585); // set x and y co-ordinates
                        pdfContentByte.showText(LastName);//"Last Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(365, 585); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"First Name"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        pdfContentByte.setTextMatrix(217, 545); // set x and y co-ordinates
                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.setTextMatrix(217, 545);// *YES* PATIENT BEFORE add the text
                        } else {
                            pdfContentByte.setTextMatrix(259, 545);// *NO* PATIENT BEFORE add the text
                        }
                        pdfContentByte.showText("*"); // *YES* PATIENT BEFORE add the text
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(259, 545); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *NO* PATIENT BEFORE add the text
                        //                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 515); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); //   add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(360, 515); // set x and y co-ordinates
                        pdfContentByte.showText(Age);//"Age"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(130, 465); // set x and y co-ordinates
                        pdfContentByte.showText(ReasonVisit);//"Reason Of Visit"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 285); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician Name"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Clinic Sign/Drive By add the text
                            pdfContentByte.endText();
                        }

                        if (Website.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // LIFESAVERER.com  add the text
                            pdfContentByte.endText();
                        }

                        if (!Other_text.toUpperCase().equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(380, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(512, 168); // set x and y co-ordinates
                            pdfContentByte.showText(Other_text); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                        }

                        if (Google.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Web Browser (Google, Bing, Yahoo) add the text
                            pdfContentByte.endText();
                        }

                        if (!Physician_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Doctor  add the text
                            pdfContentByte.endText();
                        }

                        if (!CommunityEvent_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(381, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Children’s Festival add the text
                            pdfContentByte.endText();
                        }

                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  I was a former patient add the text
                            pdfContentByte.endText();
                        }

                        if (!FamilyFriend_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Family or Friend  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 125); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Radio advertisement add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Former patient recommendation add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Employer  add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // GOOGLE add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Insurance Company recommendation add the text
                        //                        pdfContentByte.endText();
                        if (!Newspaper_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 83); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Newspaper  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Yelp add the text
                        //                        pdfContentByte.endText();

                        if (TV.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 63); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  TV Advertisement add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 63); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Marketing/Public Relation Representative  add the text
                        //                        pdfContentByte.endText();

                    }

                    if (i == 2) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(70, 640); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 640); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(85, 620); // set x and y co-ordinates
                        pdfContentByte.showText(Address);//"Address"); // add the text
                        pdfContentByte.endText();

                        if (!CityStateZip.equals("")) {
                            String[] cityStateZip = CityStateZip.split("/");
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(405, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[0]);//"City"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(503, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[1]);//"State"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(570, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[2]); // add the text
                            pdfContentByte.endText();
                        }


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(95, 600); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 580); // set x and y co-ordinates
                        pdfContentByte.showText(SSN);//"SSN"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 580); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (gender.equals("male")) {
                            pdfContentByte.setTextMatrix(477.5f, 578);// *MALE* Sex add the text
                        } else {
                            pdfContentByte.setTextMatrix(413.5f, 578);//*FEMALE* Sex add the text
                        }
                        pdfContentByte.showText("*"); //
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (MaritalStatus.equals("Single")) {
                            pdfContentByte.setTextMatrix(100, 558);// *SINGLE* Marital Status
                        } else if (MaritalStatus.equals("Mar")) {
                            pdfContentByte.setTextMatrix(152, 558);// *Married* Marital Status
                        } else if (MaritalStatus.equals("Wid")) {
                            pdfContentByte.setTextMatrix(283.5f, 558);// *Widowed* Marital Status
                        } else if (MaritalStatus.equals("Div")) {
                            pdfContentByte.setTextMatrix(215, 558);// *Divorced* Marital Status
                        }
                        pdfContentByte.showText("*"); // *SINGLE* Marital Status add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420, 560); // set x and y co-ordinates
                        pdfContentByte.showText(Email);//"Email"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(385, 540); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"Emergency Contact Name"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(315, 520); // set x and y co-ordinates
                        pdfContentByte.showText(AddressER);//"Emergency Address"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 470); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician"); // add the text
                        pdfContentByte.endText();


                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(240, 520); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 450); // set x and y co-ordinates
                        pdfContentByte.showText(Employer);//"Employer"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(320, 450); // set x and y co-ordinates
                        pdfContentByte.showText(Occupation);//"Occupation"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(460, 450); // set x and y co-ordinates
                        pdfContentByte.showText(EmployerPhone);//"Phone Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 405); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 375); // set x and y co-ordinates
                        pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(390, 375); // set x and y co-ordinates
                        pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 360); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsurerName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 360); // set x and y co-ordinates
                        pdfContentByte.showText(PrimaryDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 340); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(440, 340); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 325); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 300); // set x and y co-ordinates
                        pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 275); // set x and y co-ordinates
                        pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 275); // set x and y co-ordinates
                        pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 260); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 260); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 250); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(460, 250); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 230); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 3) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 150); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(50, 105); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"Print Patient Name"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 4) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 180); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"Relationship to ER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 140); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                    }

                    if (i == 5) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 430); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                        pdfContentByte.endText();

                        if (SignImages != null) {
                            SignImages.setAbsolutePosition(80, 350);
                            pdfContentByte.addImage(SignImages);
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(80, 350); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(500, 350); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 285); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 245); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"NameER"); // add the text
                        pdfContentByte.endText();
                    }


                    if (i == 6) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();
                        if (SignImages != null) {
                            SignImages.setAbsolutePosition(150, 100);
                            pdfContentByte.addImage(SignImages);
                        }
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 100); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 100); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 60); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"RealtionshipER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 60); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }
                    if (i == 7) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 610); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                    }
                }
                pdfStamper.close();
                pdfReader.close();
                return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";

//                final File pdfFile = new File(outputFilePath);
//                response.setContentType("application/pdf");
//                response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//                response.setContentLength((int) pdfFile.length());
//                final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//                final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//                int bytes;
//                while ((bytes = fileInputStream.read()) != -1) {
//                    responseOutputStream.write(bytes);
//                }
            } else {
                String UID = "";
                Image SignImages = null;
                final File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                final boolean exists = tmpDir.exists();
                if (exists) {
                    Query = "Select UID from " + Database + ".SignRequest where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        UID = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                    SignImages.scaleAbsolute(80.0f, 30.0f);
                    //outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
                } else {
                    SignImages = null;
                }
                inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/INSUREDPATIENTPACKET.pdf";
                final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final OutputStream fos = new FileOutputStream(new File(outputFilePath));
                final PdfReader pdfReader = new PdfReader(inputFilePath);
                final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
                pageCount = pdfReader.getNumberOfPages();
                //            final GenerateBarCode barCode = new GenerateBarCode();
                //            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
                //            final Image image = Image.getInstance(BarCodeFilePath);
                //            image.scaleAbsolute(150.0f, 30.0f);
                // loop on all the PDF pages
                // i is the pdfPageNumber
                for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                    if (i == 1) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 675); // set x and y co-ordinates
                        pdfContentByte.showText(Time);//"TIME "); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 565); // set x and y co-ordinates
                        pdfContentByte.showText(LastName);//"Last Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(365, 565); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"First Name"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.setTextMatrix(217, 525);// *YES* PATIENT BEFORE add the text
                        } else {
                            pdfContentByte.setTextMatrix(259, 525);
                            ;// *NO* PATIENT BEFORE add the text
                        }
                        pdfContentByte.setTextMatrix(217, 525); // set x and y co-ordinates
                        pdfContentByte.showText("*"); // *YES* PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 500); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(360, 500); // set x and y co-ordinates
                        pdfContentByte.showText(Age);//"Age"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(130, 445); // set x and y co-ordinates
                        pdfContentByte.showText(ReasonVisit);//"Reason Of Visit"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician Name"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Clinic Sign/Drive By add the text
                            pdfContentByte.endText();
                        }

                        if (Website.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // LIFESAVERER.com  add the text
                            pdfContentByte.endText();
                        }

                        if (!Other_text.toUpperCase().equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(380, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(512, 168); // set x and y co-ordinates
                            pdfContentByte.showText(Other_text); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                        }

                        if (Google.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Web Browser (Google, Bing, Yahoo) add the text
                            pdfContentByte.endText();
                        }

                        if (!Physician_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Doctor  add the text
                            pdfContentByte.endText();
                        }

                        if (!CommunityEvent_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(381, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Children’s Festival add the text
                            pdfContentByte.endText();
                        }

                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  I was a former patient add the text
                            pdfContentByte.endText();
                        }

                        if (!FamilyFriend_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Family or Friend  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 125); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Radio advertisement add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Former patient recommendation add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Employer  add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // GOOGLE add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Insurance Company recommendation add the text
                        //                        pdfContentByte.endText();
                        if (!Newspaper_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 83); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Newspaper  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Yelp add the text
                        //                        pdfContentByte.endText();

                        if (TV.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 63); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  TV Advertisement add the text
                            pdfContentByte.endText();
                        }


                    }

                    if (i == 2) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(70, 645); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 645); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(85, 625); // set x and y co-ordinates
                        pdfContentByte.showText(Address);//"Address"); // add the text
                        pdfContentByte.endText();
                        if (!CityStateZip.equals("")) {
                            String[] cityStateZip = CityStateZip.split("/");
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(405, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[0]);//"City"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(503, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[1]);//"State"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(570, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[2]); // add the text
                            pdfContentByte.endText();
                        }


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(95, 605); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 585); // set x and y co-ordinates
                        pdfContentByte.showText(SSN);//"SSN"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 585); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (gender.equals("male")) {
                            pdfContentByte.setTextMatrix(477.5f, 583); // *MALE* Sex set x and y co-ordinates
                        } else {
                            pdfContentByte.setTextMatrix(413.5f, 583); // *FEMALE* Sexset x and y co-ordinates
                        }
                        pdfContentByte.showText("*"); // *FEMALE* Sex add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
//                        System.out.println("MaritalStatus -> " + MaritalStatus);

                        if (MaritalStatus.equals("Single")) {
//                            System.out.println(" Single MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(100, 563);// *SINGLE* Marital Status
                        } else if (MaritalStatus.equals("Mar")) {
//                            System.out.println("Mar MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(152, 563); // set x and y co-ordinates
                        } else if (MaritalStatus.equals("Wid")) {
//                            System.out.println("Wid MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(283.5f, 563); // set x and y co-ordinates
                        } else if (MaritalStatus.equals("Div")) {
//                            System.out.println("Div MaritalStatus -> " + MaritalStatus);

                            pdfContentByte.setTextMatrix(215, 563); // set x and y co-ordinates
                        }
                        pdfContentByte.showText("*"); // *SINGLE* Marital Status add the text
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(152, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Married* Marital Status add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(215, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Divorced* Marital Status add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(283.5f, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Widowed* Sex add the text
                        //                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420, 565); // set x and y co-ordinates
                        pdfContentByte.showText(Email);//"Email"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(385, 545); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"Emergency Contact Name"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(315, 525); // set x and y co-ordinates
                        pdfContentByte.showText(AddressER);//"Emergency Address"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 478); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 458); // set x and y co-ordinates
                        pdfContentByte.showText(Employer);//"Employer"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(320, 458); // set x and y co-ordinates
                        pdfContentByte.showText(Occupation);//"Occupation"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(460, 458); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 405); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 380); // set x and y co-ordinates
                        pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(390, 380); // set x and y co-ordinates
                        pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 365); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsurerName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 365); // set x and y co-ordinates
                        pdfContentByte.showText(PrimaryDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 348); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(440, 348); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 335); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 300); // set x and y co-ordinates
                        pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 283); // set x and y co-ordinates
                        pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 283); // set x and y co-ordinates
                        pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 268); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 268); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 255); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(460, 255); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 235); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();
                    }

                    if (i == 3) {

                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

//                        pdfContentByte.beginText();
//                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                        pdfContentByte.setColorFill(BaseColor.BLACK);
//                        pdfContentByte.setTextMatrix(180, 270); // set x and y co-ordinates
//                        pdfContentByte.showText("Signature"); // add the text
//                        pdfContentByte.endText();


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 180); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"Relationship to ER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 140); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 4) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(70, 200); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 200); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(50, 150); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Print Patient Name"); // add the text
                        pdfContentByte.endText();


                    }

                    if (i == 5) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 405); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(80, 315); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(500, 315); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 230); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"NameER"); // add the text
                        pdfContentByte.endText();
                    }


                    if (i == 6) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 128); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 128); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 85); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"RealtionshipER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 85); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }
                    if (i == 7) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 585); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                    }
                }
                pdfStamper.close();
                pdfReader.close();

                return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
//
//                final File pdfFile = new File(outputFilePath);
//                response.setContentType("application/pdf");
//                response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//                response.setContentLength((int) pdfFile.length());
//                final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//                final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//                int bytes;
//                while ((bytes = fileInputStream.read()) != -1) {
//                    responseOutputStream.write(bytes);
//                }
            }


        } catch (Exception e) {
            //            out.println(e.getMessage());
            System.out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < e.getStackTrace().length; ++j) {
                str = str + e.getStackTrace()[j] + "<br>";
            }
            System.out.println(str);
        }
        return "";
    }

    String GETINPUTSchertz(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, final String UserId, final String Database, final int ClientId, final String DirectoryName, int patientRegId) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        final String State = "";
        final String Country = "";
        final String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        int pageCount = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        final int LeaveMessageER = 0;
        String AddressER = "";
        final String CityER = "";
        final String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        final String CountryER = "";
        final String ZipCodeER = "";
        final String DateConcent = "";
        final String WitnessConcent = "";
        final String PatientBehalfConcent = "";
        final String RelativeSignConcent = "";
        final String DateConcent2 = "";
        final String WitnessConcent2 = "";
        final String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        final String Work = "";
        String Work_text = "";
        final String Physician = "";
        String Physician_text = "";
        final String Other = "";
        String Other_text = "";
        String ResultPdf = "";
        String PriInsurerName = "";
        String[] PriInsurer;
        MergePdf mergePdf = new MergePdf();
        int SelfPayChk = 0;
        final int VerifyChkBox = 0;
        final int ID = patientRegId;//Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
//                    out.println("Inside Get Doc Name");
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        DoctorName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                } else {
//                    out.println("Inside Get Doc Name empty");
                    DoctorName = "";
                }
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
//            if (SelfPayChk == 1) {
            Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,''), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,''), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-'), IFNULL(PriInsurerName,null) from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                WorkersCompPolicy = rset.getInt(1);
                MotorVehAccident = rset.getInt(2);
                if (WorkersCompPolicy == 0) {
                    WorkersCompPolicyString = "NO";
                } else {
                    WorkersCompPolicyString = "YES";
                }
                if (MotorVehAccident == 0) {
                    MotorVehAccidentString = "NO";
                } else {
                    MotorVehAccidentString = "YES";
                }
                PriInsurance = rset.getString(3);
                MemId = rset.getString(4);
                GrpNumber = rset.getString(5);
                PriInsuranceName = rset.getString(6);
                AddressIfDifferent = rset.getString(7);
                PrimaryDOB = rset.getString(8);
                PrimarySSN = rset.getString(9);
                PatientRelationtoPrimary = rset.getString(10);
                PrimaryOccupation = rset.getString(11);
                PrimaryEmployer = rset.getString(12);
                EmployerAddress = rset.getString(13);
                EmployerPhone = rset.getString(14);
                SecondryInsurance = rset.getString(15);
                SubscriberName = rset.getString(16);
                SubscriberDOB = rset.getString(17);
                PatientRelationshiptoSecondry = rset.getString(18);
                MemberID_2 = rset.getString(19);
                GroupNumber_2 = rset.getString(20);
                PriInsurerName = rset.getString(21);
            }
            rset.close();
            stmt.close();
//            }
            try {
                if (SelfPayChk != 0 && !PriInsuranceName.equals("-") || !PriInsuranceName.equals("")) {
//                    out.println("Inside PriInsuranceName");
                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        PriInsuranceName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id =" + SecondryInsurance;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        SecondryInsurance = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
                out.println("Error is PriInsurance: " + e.getMessage());
                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                } else {
                    Other_text = rset.getString(25);
                }
            }
            rset.close();
            stmt.close();
            String HearAboutUsString = "";
            String HearAboutUsString2 = "";
            if (ReturnPatient.toUpperCase().equals("YES")) {
                HearAboutUsString += "Return Patient, ";
            }
            if (Google.toUpperCase().equals("YES")) {
                HearAboutUsString += "Google, ";
            }
            if (MapSearch.toUpperCase().equals("YES")) {
                HearAboutUsString += "Map Search, ";
            }
            if (OnlineReview.toUpperCase().equals("YES")) {
                HearAboutUsString += "Online Review, ";
            }
            if (TV.toUpperCase().equals("YES")) {
                HearAboutUsString += "TV, ";
            }
            if (Website.toUpperCase().equals("YES")) {
                HearAboutUsString += "Website, ";
            }
            if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                HearAboutUsString += "Building Sign, ";
            }
            if (Facebook.toUpperCase().equals("YES")) {
                HearAboutUsString += "Facebook, ";
            }
            if (School.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "School, ";
            }
            if (Twitter.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Twitter, ";
            }
            if (Magazine.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Magazine, ";
            }
            if (Newspaper.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Newspaper, ";
            }
            if (FamilyFriend.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Friend / Family, ";
            }
            if (UrgentCare.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Urgent Care, ";
            }
            if (CommunityEvent.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Comminuty Event, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Work, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Physician, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Others ";
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            final InetAddress ip = InetAddress.getLocalHost();
            final String hostname = ip.getHostName();
            if (hostname.trim().equals("rover-01")) {
                inputFilePath = "";
            } else {
                inputFilePath = "/sftpdrive";
            }

            inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/PatientRegForm.pdf";

            if (MotorVehAccident == 1) {
                mergePdf.GETINPUT(request, response, out, conn, Database, inputFilePath, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/MVAForm.pdf", ClientId, MRN);
                inputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/Result_" + ClientId + "_" + MRN + ".pdf";
            }
            final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
            final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
            final OutputStream fos = new FileOutputStream(new File(outputFilePath));
            final PdfReader pdfReader = new PdfReader(inputFilePath);
            final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            pageCount = pdfReader.getNumberOfPages();
//            final GenerateBarCode barCode = new GenerateBarCode();
//            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
//            final Image image = Image.getInstance(BarCodeFilePath);
//            image.scaleAbsolute(150.0f, 30.0f);
            // loop on all the PDF pages
            // i is the pdfPageNumber
            for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {
                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


                    /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(70, 640); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date "); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 600); // set x and y co-ordinates
                    pdfContentByte.showText(LastName);//"Last Name"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(185, 600); // set x and y co-ordinates
                    pdfContentByte.showText(FirstName);//"First Name"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(315, 600); // set x and y co-ordinates
                    pdfContentByte.showText(MiddleInitial);//"Middle"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(365, 605); // set x and y co-ordinates
                    pdfContentByte.showText(Title);//"Title"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450, 602); // set x and y co-ordinates
                    pdfContentByte.showText(MaritalStatus);//"Marital Status"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60, 580); // set x and y co-ordinates
                    pdfContentByte.showText(SSN);//"SSN"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 580); // set x and y co-ordinates
                    pdfContentByte.showText(PhNumber);//"PhNumber"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(365, 580); // set x and y co-ordinates
                    pdfContentByte.showText(DOB);//"BirthDate"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480, 580); // set x and y co-ordinates
                    pdfContentByte.showText(gender);//"Sex"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 560); // set x and y co-ordinates
                    pdfContentByte.showText(Address);//"Address"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 560); // set x and y co-ordinates
                    pdfContentByte.showText(CityStateZip);//"City/State/Zip"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430, 560); // set x and y co-ordinates
                    pdfContentByte.showText(Email);//"Email"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 540); // set x and y co-ordinates
                    pdfContentByte.showText(Employer);//"Employer"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 540); // set x and y co-ordinates
                    pdfContentByte.showText(EmpContact);//"Employer Ph"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(375, 540); // set x and y co-ordinates
                    pdfContentByte.showText(EmployerAddress);//"Employer Address"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 520); // set x and y co-ordinates
                    pdfContentByte.showText(Physician);//"PCP"); // add the text
                    pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(240, 520); // set x and y co-ordinates
//                pdfContentByte.showText("PhNumber"); // add the text
//                pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 495); // set x and y co-ordinates
                    pdfContentByte.showText(HearAboutUsString);//"Heard about us1"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 485); // set x and y co-ordinates
                    pdfContentByte.showText(HearAboutUsString2);//"Heard about us2"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(135, 450); // set x and y co-ordinates
                    pdfContentByte.showText(WorkersCompPolicyString);//"Yes/NO");//"WC"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(340, 450); // set x and y co-ordinates
                    pdfContentByte.showText(MotorVehAccidentString);//"Yes/NO");//"MVA"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 425); // set x and y co-ordinates
                    pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 400); // set x and y co-ordinates
                    pdfContentByte.showText(PriInsurerName);//"Subscriber’s Last Name"); // add the text
                    pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(200, 400); // set x and y co-ordinates
//                pdfContentByte.showText(PriInsurerName); // add the text
//                pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(330, 400); // set x and y co-ordinates
                    pdfContentByte.showText(PrimarySSN);//"Subscriber’s Social Security"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480, 400); // set x and y co-ordinates
                    pdfContentByte.showText(PrimaryDOB);//"Subscriber’s Birth Date:"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 375); // set x and y co-ordinates
                    pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 375); // set x and y co-ordinates
                    pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380, 375); // set x and y co-ordinates
                    pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 355); // set x and y co-ordinates
                    pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 335); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberName);//"Subscriber’s Last Name"); // add the text
                    pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(200, 335); // set x and y co-ordinates
//                pdfContentByte.showText("First"); // add the text
//                pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(330, 335); // set x and y co-ordinates
//                pdfContentByte.showText(SSN"Subscriber’s Social Security"); // add the text
//                pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480, 335); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberDOB); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 315); // set x and y co-ordinates
                    pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 315); // set x and y co-ordinates
                    pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380, 315); // set x and y co-ordinates
                    pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 130); // set x and y co-ordinates
                    pdfContentByte.showText(NextofKinName);//"Name of Relative"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(290, 130); // set x and y co-ordinates
                    pdfContentByte.showText(RelationToPatientER);//"Relationship"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410, 130); // set x and y co-ordinates
                    pdfContentByte.showText(PhoneNumberER);//"Home Phone"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(520, 130); // set x and y co-ordinates
                    pdfContentByte.showText(LeaveMessageERString);//"Leave Msg"); // add the text
                    pdfContentByte.endText();
                }

                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510, 75); // set x and y co-ordinates
                    pdfContentByte.showText(FirstName);//"Patient’s Initial"); // add the text
                    pdfContentByte.endText();
                }

                if (i == 3) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(70, 170); // set x and y co-ordinates
//                pdfContentByte.showText("Signature"); // add the text
//                pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80, 120); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390, 120); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440, 100); // set x and y co-ordinates
                    pdfContentByte.showText(RelationToPatientER);//"Relationship"); // add the text
                    pdfContentByte.endText();

                }

                if (i == 5) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(155, 450); // set x and y co-ordinates
                    pdfContentByte.showText(SecondryInsurance);//"Secondary health insurance"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145, 425); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberName);//"Subscriber Name"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400, 425); // set x and y co-ordinates
                    pdfContentByte.showText(DOB);//"DOB"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145, 400); // set x and y co-ordinates
                    pdfContentByte.showText(MemberID_2);//"Member ID"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300, 400); // set x and y co-ordinates
                    pdfContentByte.showText(GroupNumber_2);//"Group No"); // add the text
                    pdfContentByte.endText();


//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(150, 140); // set x and y co-ordinates
//                pdfContentByte.showText("Signature"); // add the text
//                pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430, 140); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430, 85); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();

                }
            }
            pdfStamper.close();
            pdfReader.close();
//            final File pdfFile = new File(outputFilePath);
//            response.setContentType("application/pdf");
//            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//            response.setContentLength((int) pdfFile.length());
//            final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//            final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//            int bytes;
//            while ((bytes = fileInputStream.read()) != -1) {
//                responseOutputStream.write(bytes);
//            }
            return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";

        } catch (Exception e) {
//            out.println(e.getMessage());
            System.out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < e.getStackTrace().length; ++j) {
                str = str + e.getStackTrace()[j] + "<br>";
            }
            System.out.println(str);
        }
        return "";
    }

    String GETINPUTfloresville(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, final String UserId, final String Database, final int ClientId, final String DirectoryName, int patientRegId) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        final String State = "";
        final String Country = "";
        final String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        int pageCount = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        final int LeaveMessageER = 0;
        String AddressER = "";
        final String CityER = "";
        final String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        final String CountryER = "";
        final String ZipCodeER = "";
        final String DateConcent = "";
        final String WitnessConcent = "";
        final String PatientBehalfConcent = "";
        final String RelativeSignConcent = "";
        final String DateConcent2 = "";
        final String WitnessConcent2 = "";
        final String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        final String Work = "";
        String Work_text = "";
        final String Physician = "";
        String Physician_text = "";
        final String Other = "";
        String Other_text = "";
        String ResultPdf = "";
        String PriInsurerName = "";
        String[] PriInsurer;
        MergePdf mergePdf = new MergePdf();
        int SelfPayChk = 0;
        final int VerifyChkBox = 0;
        final int ID = patientRegId;//Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
//                    out.println("Inside Get Doc Name");
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        DoctorName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                } else {
//                    out.println("Inside Get Doc Name empty");
                    DoctorName = "";
                }
            } catch (Exception e) {
//                out.println("Error In PateintReg:--" + e.getMessage());
//                out.println(Query);
            }
//            if (SelfPayChk == 1) {
            Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,''), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,''), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-'), IFNULL(PriInsurerName,null) from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                WorkersCompPolicy = rset.getInt(1);
                MotorVehAccident = rset.getInt(2);
                if (WorkersCompPolicy == 0) {
                    WorkersCompPolicyString = "NO";
                } else {
                    WorkersCompPolicyString = "YES";
                }
                if (MotorVehAccident == 0) {
                    MotorVehAccidentString = "NO";
                } else {
                    MotorVehAccidentString = "YES";
                }
                PriInsurance = rset.getString(3);
                MemId = rset.getString(4);
                GrpNumber = rset.getString(5);
                PriInsuranceName = rset.getString(6);
                AddressIfDifferent = rset.getString(7);
                PrimaryDOB = rset.getString(8);
                PrimarySSN = rset.getString(9);
                PatientRelationtoPrimary = rset.getString(10);
                PrimaryOccupation = rset.getString(11);
                PrimaryEmployer = rset.getString(12);
                EmployerAddress = rset.getString(13);
                EmployerPhone = rset.getString(14);
                SecondryInsurance = rset.getString(15);
                SubscriberName = rset.getString(16);
                SubscriberDOB = rset.getString(17);
                PatientRelationshiptoSecondry = rset.getString(18);
                MemberID_2 = rset.getString(19);
                GroupNumber_2 = rset.getString(20);
                PriInsurerName = rset.getString(21);
            }
            rset.close();
            stmt.close();
//            }
            try {
                if (SelfPayChk != 0 && !PriInsuranceName.equals("-") || !PriInsuranceName.equals("")) {
//                    out.println("Inside PriInsuranceName");
                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        PriInsuranceName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id =" + SecondryInsurance;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        SecondryInsurance = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
//                out.println("Error is PriInsurance: " + e.getMessage());
//                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                } else {
                    Other_text = rset.getString(25);
                }
            }
            rset.close();
            stmt.close();
            String HearAboutUsString = "";
            String HearAboutUsString2 = "";
            if (ReturnPatient.toUpperCase().equals("YES")) {
                HearAboutUsString += "Return Patient, ";
            }
            if (Google.toUpperCase().equals("YES")) {
                HearAboutUsString += "Google, ";
            }
            if (MapSearch.toUpperCase().equals("YES")) {
                HearAboutUsString += "Map Search, ";
            }
            if (OnlineReview.toUpperCase().equals("YES")) {
                HearAboutUsString += "Online Review, ";
            }
            if (TV.toUpperCase().equals("YES")) {
                HearAboutUsString += "TV, ";
            }
            if (Website.toUpperCase().equals("YES")) {
                HearAboutUsString += "Website, ";
            }
            if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                HearAboutUsString += "Building Sign, ";
            }
            if (Facebook.toUpperCase().equals("YES")) {
                HearAboutUsString += "Facebook, ";
            }
            if (School.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "School, ";
            }
            if (Twitter.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Twitter, ";
            }
            if (Magazine.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Magazine, ";
            }
            if (Newspaper.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Newspaper, ";
            }
            if (FamilyFriend.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Friend / Family, ";
            }
            if (UrgentCare.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Urgent Care, ";
            }
            if (CommunityEvent.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Comminuty Event, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Work, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Physician, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Others ";
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            final InetAddress ip = InetAddress.getLocalHost();
            final String hostname = ip.getHostName();
            if (hostname.trim().equals("rover-01")) {
                inputFilePath = "";
            } else {
                inputFilePath = "/sftpdrive";
            }

            inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/PATIENTREGISTRATIONFORMFLORESVILLE.pdf";

//        if (MotorVehAccident == 1) {
//            mergePdf.GETINPUT(request, response, out, conn, Database, inputFilePath, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/MVAForm.pdf", ClientId, MRN);
//            inputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/Result_" + ClientId + "_" + MRN + ".pdf";
//        }

            String UID = "";
            Image SignImages = null;
            final File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
            final boolean exists = tmpDir.exists();
            if (exists) {
                Query = "Select UID from " + Database + ".SignRequest where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    UID = rset.getString(1);
                }
                rset.close();
                stmt.close();

                SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                SignImages.scaleAbsolute(80.0f, 30.0f);
                //outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
            } else {
                SignImages = null;
            }

            final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
            final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
            final OutputStream fos = new FileOutputStream(new File(outputFilePath));
            final PdfReader pdfReader = new PdfReader(inputFilePath);
            final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            pageCount = pdfReader.getNumberOfPages();
//            final GenerateBarCode barCode = new GenerateBarCode();
//            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
//            final Image image = Image.getInstance(BarCodeFilePath);
//            image.scaleAbsolute(150.0f, 30.0f);
            // loop on all the PDF pages
            // i is the pdfPageNumber
            for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                if (i == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


                    /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80, 700); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date "); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 655); // set x and y co-ordinates
                    pdfContentByte.showText(LastName);//"Last Name"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(185, 655); // set x and y co-ordinates
                    pdfContentByte.showText(FirstName);//"First Name"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(310, 655); // set x and y co-ordinates
                    pdfContentByte.showText(MiddleInitial);//"Middle"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(355, 668); // set x and y co-ordinates
                    pdfContentByte.showText("Title: ");//"Title"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(365, 655); // set x and y co-ordinates
                    pdfContentByte.showText(Title);//"Title"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450, 655); // set x and y co-ordinates
                    pdfContentByte.showText(MaritalStatus);//"Marital Status"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60, 620); // set x and y co-ordinates
                    pdfContentByte.showText(SSN);//"SSN"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 620); // set x and y co-ordinates
                    pdfContentByte.showText(PhNumber);//"PhNumber"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(365, 620); // set x and y co-ordinates
                    pdfContentByte.showText(DOB);//"BirthDate"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(480, 620); // set x and y co-ordinates
                    pdfContentByte.showText(gender);//"Sex"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 590); // set x and y co-ordinates
                    pdfContentByte.showText(Address);//"Address"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 590); // set x and y co-ordinates
                    pdfContentByte.showText(CityStateZip);//"City/State/Zip"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(420, 590); // set x and y co-ordinates
                    pdfContentByte.showText(Email);//"Email"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 555); // set x and y co-ordinates
                    pdfContentByte.showText(Employer);//"Employer"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 555); // set x and y co-ordinates
                    pdfContentByte.showText(EmployerPhone);//"Employer Ph"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(375, 555); // set x and y co-ordinates
                    pdfContentByte.showText(EmployerAddress);//"Employer Address"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 525); // set x and y co-ordinates
                    pdfContentByte.showText(Physician);//"PCP"); // add the text
                    pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(240, 525); // set x and y co-ordinates
//                pdfContentByte.showText("PhNumber"); // add the text
//                pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 495); // set x and y co-ordinates
                    pdfContentByte.showText(HearAboutUsString);//"Heard about us1"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 485); // set x and y co-ordinates
                    pdfContentByte.showText(HearAboutUsString2);//"Heard about us2"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 425); // set x and y co-ordinates
                    pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 400); // set x and y co-ordinates
                    pdfContentByte.showText(PriInsurerName);//"Subscriber’s Last Name"); // add the text
                    pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(200, 400); // set x and y co-ordinates
//                pdfContentByte.showText("First"); // add the text
//                pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(325, 400); // set x and y co-ordinates
                    pdfContentByte.showText(PrimarySSN);//"Subscriber’s Social Security"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460, 400); // set x and y co-ordinates
                    pdfContentByte.showText(PrimaryDOB);//"Subscriber’s Birth Date:"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 372); // set x and y co-ordinates
                    pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 372); // set x and y co-ordinates
                    pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380, 372); // set x and y co-ordinates
                    pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 350); // set x and y co-ordinates
                    pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 320); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberName);//"Subscriber’s Last Name"); // add the text
                    pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(200, 320); // set x and y co-ordinates
//                pdfContentByte.showText("First"); // add the text
//                pdfContentByte.endText();
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(325, 320); // set x and y co-ordinates
//                pdfContentByte.showText("Subscriber’s Social Security"); // add the text
//                pdfContentByte.endText();
//                pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460, 320); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberDOB);//"Subscriber’s Birth Date:"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 292); // set x and y co-ordinates
                    pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240, 292); // set x and y co-ordinates
                    pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380, 292); // set x and y co-ordinates
                    pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(50, 105); // set x and y co-ordinates
                    pdfContentByte.showText(NextofKinName);//"Name of Relative"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(290, 105); // set x and y co-ordinates
                    pdfContentByte.showText(RelationToPatientER);//"Relationship"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410, 105); // set x and y co-ordinates
                    pdfContentByte.showText(PhoneNumberER);//"Home Phone"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(520, 105); // set x and y co-ordinates
                    pdfContentByte.showText(LeaveMessageERString);//"Leave Msg"); // add the text
                    pdfContentByte.endText();
                }

                if (i == 2) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(510, 115); // set x and y co-ordinates
                    pdfContentByte.showText(FirstName);//"Patient’s Initial"); // add the text
                    pdfContentByte.endText();
                }

                if (i == 3) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(70, 170);
                        pdfContentByte.addImage(SignImages);
                    }
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(70, 170); // set x and y co-ordinates
//                pdfContentByte.showText("Signature"); // add the text
//                pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80, 120); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390, 120); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440, 90); // set x and y co-ordinates
                    pdfContentByte.showText(PatientRelationtoPrimary);//"Relationship"); // add the text
                    pdfContentByte.endText();

                }

                if (i == 4) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(155, 540); // set x and y co-ordinates
                    pdfContentByte.showText(SecondryInsurance);//"Secondary health insurance"); // add the text
                    pdfContentByte.endText();


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145, 505); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberName);//"Subscriber Name"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460, 505); // set x and y co-ordinates
                    pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145, 480); // set x and y co-ordinates
                    pdfContentByte.showText(MemberID_2);//"Member ID"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145, 450); // set x and y co-ordinates
                    pdfContentByte.showText(GroupNumber_2);//"Group No"); // add the text
                    pdfContentByte.endText();


                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(180, 225);
                        pdfContentByte.addImage(SignImages);
                    }
//                pdfContentByte.beginText();
//                pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                pdfContentByte.setColorFill(BaseColor.BLACK);
//                pdfContentByte.setTextMatrix(180, 225); // set x and y co-ordinates
//                pdfContentByte.showText("Signature"); // add the text
//                pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(435, 225); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // add the text
                    pdfContentByte.endText();


                }

                if (i == 5) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80, 370); // set x and y co-ordinates
                    pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                    pdfContentByte.endText();
                }

                if (i == 6) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(150, 140);
                        pdfContentByte.addImage(SignImages);
                    }
                }

                if (i == 7) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(150, 185);
                        pdfContentByte.addImage(SignImages);
                    }
                }

            }
            pdfStamper.close();
            pdfReader.close();
//        final File pdfFile = new File(outputFilePath);
//        response.setContentType("application/pdf");
//        response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//        response.setContentLength((int) pdfFile.length());
//        final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//        final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//        int bytes;
//        while ((bytes = fileInputStream.read()) != -1) {
//            responseOutputStream.write(bytes);
//        }

            return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
        } catch (Exception e) {
//            out.println(e.getMessage());
            System.out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < e.getStackTrace().length; ++j) {
                str = str + e.getStackTrace()[j] + "<br>";
            }
            System.out.println(str);
        }
        return "";
    }

    String GETINPUTheights(final HttpServletRequest request, final PrintWriter out, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, final String UserId, final String Database, final int ClientId, final String DirectoryName, int PatientRegId) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
//        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        String Title = "";
        String FirstName = "";
        String FirstNameNoSpaces = "";
        String LastName = "";
        String MiddleInitial = "";
        String MaritalStatus = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String PhNumber = "";
        String Address = "";
        String CityStateZip = "";
        final String State = "";
        final String Country = "";
        final String ZipCode = "";
        String SSN = "";
        String Occupation = "";
        String Employer = "";
        String EmpContact = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String MRN = "";
        int ClientIndex = 0;
        int pageCount = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        String DoctorName = null;
        int WorkersCompPolicy = 0;
        String WorkersCompPolicyString = "Is this a worker\u2019s comp policy: YES/NO";
        int MotorVehAccident = 0;
        String MotorVehAccidentString = "Is this a Motor Vehicle Accident : YES/NO";
        String PriInsurance = "";
        String MemId = "";
        String GrpNumber = "";
        String PriInsuranceName = "";
        String AddressIfDifferent = "";
        String PrimaryDOB = "";
        String PrimarySSN = "";
        String PatientRelationtoPrimary = "";
        String PrimaryOccupation = "";
        String PrimaryEmployer = "";
        String EmployerAddress = "";
        String EmployerPhone = "";
        String SecondryInsurance = "";
        String SubscriberName = "";
        String SubscriberDOB = "";
        String MemberID_2 = "";
        String GroupNumber_2 = "";
        String PatientRelationshiptoSecondry = "";
        String NextofKinName = "";
        String RelationToPatientER = "";
        String PhoneNumberER = "";
        final int LeaveMessageER = 0;
        String AddressER = "";
        final String CityER = "";
        final String StateER = "";
        String LeaveMessageERString = "";
        String CityStateZipER = "";
        final String CountryER = "";
        final String ZipCodeER = "";
        final String DateConcent = "";
        final String WitnessConcent = "";
        final String PatientBehalfConcent = "";
        final String RelativeSignConcent = "";
        final String DateConcent2 = "";
        final String WitnessConcent2 = "";
        final String PatientSignConcent = "";
        String ReturnPatient = "";
        String Google = "";
        String MapSearch = "";
        String Billboard = "";
        String OnlineReview = "";
        String TV = "";
        String Website = "";
        String BuildingSignDriveBy = "";
        String Facebook = "";
        String School = "";
        String School_text = "";
        String Twitter = "";
        String Magazine = "";
        String Magazine_text = "";
        String Newspaper = "";
        String Newspaper_text = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String CommunityEvent = "";
        String CommunityEvent_text = "";
        final String Work = "";
        String Work_text = "";
        final String Physician = "";
        String Physician_text = "";
        final String Other = "";
        String Other_text = "";
        String ResultPdf = "";
        String PriInsurerName = "";
        String[] PriInsurer;
        MergePdf mergePdf = new MergePdf();
        int SelfPayChk = 0;
        final int VerifyChkBox = 0;
        final int ID = PatientRegId;//Integer.parseInt(request.getParameter("ID").trim());
        try {
            Query = "select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            stmt.close();
            try {
                Query = " Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                stmt.close();
                Query = "Select name from oe.clients where Id = " + ClientId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (!DoctorId.equals("-")) {
//                    out.println("Inside Get Doc Name");
                    Query = "Select CONCAT(DoctorsFirstName, ' ', DoctorsLastName) from " + Database + ".DoctorsList where Id = " + DoctorId;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    while (rset.next()) {
                        DoctorName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                } else {
//                    out.println("Inside Get Doc Name empty");
                    DoctorName = "";
                }
            } catch (Exception e) {
//                out.println("Error In PateintReg:--" + e.getMessage());
//                out.println(Query);
            }
            //            if (SelfPayChk == 1) {
            Query = " Select IFNULL(WorkersCompPolicy,0), IFNULL(MotorVehAccident,0), IFNULL(PriInsurance,'-'),IFNULL(MemId,'-'), IFNULL(GrpNumber,'-'),  IFNULL(PriInsuranceName,'-'), IFNULL(AddressIfDifferent,'-'), IFNULL(DATE_FORMAT(PrimaryDOB,'%m/%d/%Y'),'-'), IFNULL(PrimarySSN,'-'),  IFNULL(PatientRelationtoPrimary,''), IFNULL(PrimaryOccupation,'-'), IFNULL(PrimaryEmployer,'-'), IFNULL(EmployerAddress,'-'),  IFNULL(EmployerPhone, '-'), IFNULL(SecondryInsurance,'-'), IFNULL(SubscriberName,'-'), IFNULL(DATE_FORMAT(SubscriberDOB,'%m/%d/%Y'),'-'),  IFNULL(PatientRelationshiptoSecondry,''), IFNULL(MemberID_2,'-'), IFNULL(GroupNumber_2,'-'), IFNULL(PriInsurerName,null) from " + Database + ".InsuranceInfo  where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                WorkersCompPolicy = rset.getInt(1);
                MotorVehAccident = rset.getInt(2);
                if (WorkersCompPolicy == 0) {
                    WorkersCompPolicyString = "NO";
                } else {
                    WorkersCompPolicyString = "YES";
                }
                if (MotorVehAccident == 0) {
                    MotorVehAccidentString = "NO";
                } else {
                    MotorVehAccidentString = "YES";
                }
                PriInsurance = rset.getString(3);
                MemId = rset.getString(4);
                GrpNumber = rset.getString(5);
                PriInsuranceName = rset.getString(6);
                AddressIfDifferent = rset.getString(7);
                PrimaryDOB = rset.getString(8);
                PrimarySSN = rset.getString(9);
                PatientRelationtoPrimary = rset.getString(10);
                PrimaryOccupation = rset.getString(11);
                PrimaryEmployer = rset.getString(12);
                EmployerAddress = rset.getString(13);
                EmployerPhone = rset.getString(14);
                SecondryInsurance = rset.getString(15);
                SubscriberName = rset.getString(16);
                SubscriberDOB = rset.getString(17);
                PatientRelationshiptoSecondry = rset.getString(18);
                MemberID_2 = rset.getString(19);
                GroupNumber_2 = rset.getString(20);
                PriInsurerName = rset.getString(21);
            }
            rset.close();
            stmt.close();
            //            }
            try {
                if (SelfPayChk != 0 && !PriInsuranceName.equals("-") || !PriInsuranceName.equals("")) {
//                    out.println("Inside PriInsuranceName");
                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id = " + PriInsuranceName;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        PriInsuranceName = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    Query = "Select PayerName from oe_2.ProfessionalPayers where Id =" + SecondryInsurance;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        SecondryInsurance = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();
                }
            } catch (Exception e) {
//                out.println("Error is PriInsurance: " + e.getMessage());
//                out.println(Query);
            }
            Query = "Select IFNULL(NextofKinName,'-'), IFNULL(RelationToPatient,'-'), IFNULL(PhoneNumber,'-'), CASE WHEN LeaveMessage = 1 THEN 'YES' WHEN LeaveMessage = 0 THEN 'NO' ELSE ' YES / NO'END,  IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-') from " + Database + ".EmergencyInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                NextofKinName = rset.getString(1);
                RelationToPatientER = rset.getString(2);
                PhoneNumberER = rset.getString(3);
                LeaveMessageERString = rset.getString(4);
                AddressER = rset.getString(5);
                CityStateZipER = rset.getString(6);
            }
            rset.close();
            stmt.close();
            Query = " Select ReturnPatient, Google, MapSearch, Billboard, OnlineReview, TV, Website, BuildingSignDriveBy, Facebook, School, IFNULL(School_text ,'-'), Twitter, Magazine, IFNULL(Magazine_text,'-'), Newspaper, IFNULL(Newspaper_text,'-'), FamilyFriend, IFNULL(FamilyFriend_text,'-'), UrgentCare, IFNULL(UrgentCare_text,'-'), CommunityEvent, IFNULL(CommunityEvent_text,'-'),  IFNULL(Work_text,'-'), IFNULL(Physician_text, '-'), IFNULL(Other_text,'-') from " + Database + ".RandomCheckInfo where PatientRegId = " + ID;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            while (rset.next()) {
                if (rset.getInt(1) == 0) {
                    ReturnPatient = "";
                } else {
                    ReturnPatient = "YES";
                }
                if (rset.getInt(2) == 0) {
                    Google = "";
                } else {
                    Google = "YES";
                }
                if (rset.getInt(3) == 0) {
                    MapSearch = "";
                } else {
                    MapSearch = "YES";
                }
                if (rset.getInt(4) == 0) {
                    Billboard = "";
                } else {
                    Billboard = "YES";
                }
                if (rset.getInt(5) == 0) {
                    OnlineReview = "";
                } else {
                    OnlineReview = "YES";
                }
                if (rset.getInt(6) == 0) {
                    TV = "";
                } else {
                    TV = "YES";
                }
                if (rset.getInt(7) == 0) {
                    Website = "";
                } else {
                    Website = "YES";
                }
                if (rset.getInt(8) == 0) {
                    BuildingSignDriveBy = "";
                } else {
                    BuildingSignDriveBy = "YES";
                }
                if (rset.getInt(9) == 0) {
                    Facebook = "";
                } else {
                    Facebook = "YES";
                }
                if (rset.getInt(10) == 0) {
                    School = "";
                    School_text = "";
                } else {
                    School = "YES";
                    School_text = rset.getString(11);
                }
                if (rset.getInt(12) == 0) {
                    Twitter = "";
                } else {
                    Twitter = "YES";
                }
                if (rset.getInt(13) == 0) {
                    Magazine = "";
                    Magazine_text = "";
                } else {
                    Magazine = "YES";
                    Magazine_text = rset.getString(14);
                }
                if (rset.getInt(15) == 0) {
                    Newspaper = "";
                    Newspaper_text = "";
                } else {
                    Newspaper = "YES";
                    Newspaper_text = rset.getString(16);
                }
                if (rset.getInt(17) == 0) {
                    FamilyFriend = "";
                    FamilyFriend_text = "";
                } else {
                    FamilyFriend = "YES";
                    FamilyFriend_text = rset.getString(18);
                }
                if (rset.getInt(19) == 0) {
                    UrgentCare = "";
                    UrgentCare_text = "";
                } else {
                    UrgentCare = "YES";
                    UrgentCare_text = rset.getString(20);
                }
                if (rset.getInt(21) == 0) {
                    CommunityEvent = "";
                    CommunityEvent_text = "";
                } else {
                    CommunityEvent = "YES";
                    CommunityEvent_text = rset.getString(22);
                }
                if (rset.getString(23) == "" || rset.getString(23) == null) {
                    Work_text = "";
                } else {
                    Work_text = rset.getString(23);
                }
                if (rset.getString(24) == "" || rset.getString(24) == null) {
                    Physician_text = "";
                } else {
                    Physician_text = rset.getString(24);
                }
                if (rset.getString(25) == "" || rset.getString(25) == null) {
                    Other_text = "";
                } else {
                    Other_text = rset.getString(25);
                }
            }
            rset.close();
            stmt.close();
            String HearAboutUsString = "";
            String HearAboutUsString2 = "";
            if (ReturnPatient.toUpperCase().equals("YES")) {
                HearAboutUsString += "Return Patient, ";
            }
            if (Google.toUpperCase().equals("YES")) {
                HearAboutUsString += "Google, ";
            }
            if (MapSearch.toUpperCase().equals("YES")) {
                HearAboutUsString += "Map Search, ";
            }
            if (OnlineReview.toUpperCase().equals("YES")) {
                HearAboutUsString += "Online Review, ";
            }
            if (TV.toUpperCase().equals("YES")) {
                HearAboutUsString += "TV, ";
            }
            if (Website.toUpperCase().equals("YES")) {
                HearAboutUsString += "Website, ";
            }
            if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                HearAboutUsString += "Building Sign, ";
            }
            if (Facebook.toUpperCase().equals("YES")) {
                HearAboutUsString += "Facebook, ";
            }
            if (School.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "School, ";
            }
            if (Twitter.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Twitter, ";
            }
            if (Magazine.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Magazine, ";
            }
            if (Newspaper.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Newspaper, ";
            }
            if (FamilyFriend.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Friend / Family, ";
            }
            if (UrgentCare.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Urgent Care, ";
            }
            if (CommunityEvent.toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Comminuty Event, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Work, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Physician, ";
            }
            if ("".toUpperCase().equals("YES")) {
                HearAboutUsString2 += "Others ";
            }
            rset.close();
            stmt.close();
            String inputFilePath = "";
            final InetAddress ip = InetAddress.getLocalHost();
            final String hostname = ip.getHostName();
            if (hostname.trim().equals("rover-01")) {
                inputFilePath = "";
            } else {
                inputFilePath = "/sftpdrive";
            }

            if (SelfPayChk == 0) {

                String UID = "";
                Image SignImages = null;
                final File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                final boolean exists = tmpDir.exists();
                if (exists) {
                    Query = "Select UID from " + Database + ".SignRequest where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        UID = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                    SignImages.scaleAbsolute(80.0f, 30.0f);
                    //outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
                } else {
                    SignImages = null;
                }
                inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/SELFPAYPATIENTPACKET.pdf";

                final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final OutputStream fos = new FileOutputStream(new File(outputFilePath));
                final PdfReader pdfReader = new PdfReader(inputFilePath);
                final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
                pageCount = pdfReader.getNumberOfPages();
                final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";

                //            final GenerateBarCode barCode = new GenerateBarCode();
                //            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
                //            final Image image = Image.getInstance(BarCodeFilePath);
                //            image.scaleAbsolute(150.0f, 30.0f);
                // loop on all the PDF pages
                // i is the pdfPageNumber
                // loop on all the PDF pages
                // i is the pdfPageNumber
                for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                    if (i == 1) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 675); // set x and y co-ordinates
                        pdfContentByte.showText(Time);//"TIME "); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 585); // set x and y co-ordinates
                        pdfContentByte.showText(LastName);//"Last Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(365, 585); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"First Name"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        pdfContentByte.setTextMatrix(217, 545); // set x and y co-ordinates
                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.setTextMatrix(217, 545);// *YES* PATIENT BEFORE add the text
                        } else {
                            pdfContentByte.setTextMatrix(259, 545);// *NO* PATIENT BEFORE add the text
                        }
                        pdfContentByte.showText("*"); // *YES* PATIENT BEFORE add the text
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(259, 545); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *NO* PATIENT BEFORE add the text
                        //                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 515); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); //   add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(360, 515); // set x and y co-ordinates
                        pdfContentByte.showText(Age);//"Age"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(130, 465); // set x and y co-ordinates
                        pdfContentByte.showText(ReasonVisit);//"Reason Of Visit"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 285); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician Name"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Clinic Sign/Drive By add the text
                            pdfContentByte.endText();
                        }

                        if (Website.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // LIFESAVERER.com  add the text
                            pdfContentByte.endText();
                        }

                        if (!Other_text.toUpperCase().equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(380, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(512, 168); // set x and y co-ordinates
                            pdfContentByte.showText(Other_text); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                        }

                        if (Google.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Web Browser (Google, Bing, Yahoo) add the text
                            pdfContentByte.endText();
                        }

                        if (!Physician_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Doctor  add the text
                            pdfContentByte.endText();
                        }

                        if (!CommunityEvent_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(381, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Children’s Festival add the text
                            pdfContentByte.endText();
                        }

                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  I was a former patient add the text
                            pdfContentByte.endText();
                        }

                        if (!FamilyFriend_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Family or Friend  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 125); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Radio advertisement add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Former patient recommendation add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Employer  add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // GOOGLE add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Insurance Company recommendation add the text
                        //                        pdfContentByte.endText();
                        if (!Newspaper_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 83); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Newspaper  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Yelp add the text
                        //                        pdfContentByte.endText();

                        if (TV.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 63); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  TV Advertisement add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 63); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Marketing/Public Relation Representative  add the text
                        //                        pdfContentByte.endText();

                    }

                    if (i == 2) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(70, 640); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 640); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(85, 620); // set x and y co-ordinates
                        pdfContentByte.showText(Address);//"Address"); // add the text
                        pdfContentByte.endText();

                        if (!CityStateZip.equals("")) {
                            String[] cityStateZip = CityStateZip.split("/");
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(405, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[0]);//"City"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(503, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[1]);//"State"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(570, 620); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[2]); // add the text
                            pdfContentByte.endText();
                        }


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(95, 600); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 580); // set x and y co-ordinates
                        pdfContentByte.showText(SSN);//"SSN"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 580); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (gender.equals("male")) {
                            pdfContentByte.setTextMatrix(477.5f, 578);// *MALE* Sex add the text
                        } else {
                            pdfContentByte.setTextMatrix(413.5f, 578);//*FEMALE* Sex add the text
                        }
                        pdfContentByte.showText("*"); //
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (MaritalStatus.equals("Single")) {
                            pdfContentByte.setTextMatrix(100, 558);// *SINGLE* Marital Status
                        } else if (MaritalStatus.equals("Mar")) {
                            pdfContentByte.setTextMatrix(152, 558);// *Married* Marital Status
                        } else if (MaritalStatus.equals("Wid")) {
                            pdfContentByte.setTextMatrix(283.5f, 558);// *Widowed* Marital Status
                        } else if (MaritalStatus.equals("Div")) {
                            pdfContentByte.setTextMatrix(215, 558);// *Divorced* Marital Status
                        }
                        pdfContentByte.showText("*"); // *SINGLE* Marital Status add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420, 560); // set x and y co-ordinates
                        pdfContentByte.showText(Email);//"Email"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(385, 540); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"Emergency Contact Name"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(315, 520); // set x and y co-ordinates
                        pdfContentByte.showText(AddressER);//"Emergency Address"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 470); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician"); // add the text
                        pdfContentByte.endText();


                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(240, 520); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 450); // set x and y co-ordinates
                        pdfContentByte.showText(Employer);//"Employer"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(320, 450); // set x and y co-ordinates
                        pdfContentByte.showText(Occupation);//"Occupation"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(460, 450); // set x and y co-ordinates
                        pdfContentByte.showText(EmployerPhone);//"Phone Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 405); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 375); // set x and y co-ordinates
                        pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(390, 375); // set x and y co-ordinates
                        pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 360); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsurerName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 360); // set x and y co-ordinates
                        pdfContentByte.showText(PrimaryDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 340); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(440, 340); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 325); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 300); // set x and y co-ordinates
                        pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 275); // set x and y co-ordinates
                        pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 275); // set x and y co-ordinates
                        pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 260); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 260); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 250); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(460, 250); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 230); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 3) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 150); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(50, 105); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"Print Patient Name"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 4) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);
                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 180); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"Relationship to ER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 140); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                    }

                    if (i == 5) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 430); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                        pdfContentByte.endText();

                        if (SignImages != null) {
                            SignImages.setAbsolutePosition(80, 350);
                            pdfContentByte.addImage(SignImages);
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(80, 350); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(500, 350); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 285); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 245); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"NameER"); // add the text
                        pdfContentByte.endText();
                    }


                    if (i == 6) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();
                        if (SignImages != null) {
                            SignImages.setAbsolutePosition(150, 100);
                            pdfContentByte.addImage(SignImages);
                        }
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 100); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 100); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 60); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"RealtionshipER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 60); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }
                    if (i == 7) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 760.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 750.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 740.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 730.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420.0f, 720.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 610); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                    }
                }
                pdfStamper.close();
                pdfReader.close();
                return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";

//                final File pdfFile = new File(outputFilePath);
//                response.setContentType("application/pdf");
//                response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//                response.setContentLength((int) pdfFile.length());
//                final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//                final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//                int bytes;
//                while ((bytes = fileInputStream.read()) != -1) {
//                    responseOutputStream.write(bytes);
//                }
            } else {
                String UID = "";
                Image SignImages = null;
                final File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                final boolean exists = tmpDir.exists();
                if (exists) {
                    Query = "Select UID from " + Database + ".SignRequest where PatientRegId = " + ID;
                    stmt = conn.createStatement();
                    rset = stmt.executeQuery(Query);
                    if (rset.next()) {
                        UID = rset.getString(1);
                    }
                    rset.close();
                    stmt.close();

                    SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                    SignImages.scaleAbsolute(80.0f, 30.0f);
                    //outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
                } else {
                    SignImages = null;
                }
                inputFilePath += "/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/" + DirectoryName + "/INSUREDPATIENTPACKET.pdf";
                final String filename = FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
                final OutputStream fos = new FileOutputStream(new File(outputFilePath));
                final PdfReader pdfReader = new PdfReader(inputFilePath);
                final PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
                pageCount = pdfReader.getNumberOfPages();
                //            final GenerateBarCode barCode = new GenerateBarCode();
                //            final String BarCodeFilePath = barCode.GetBarCode(request, out, conn, servletContext, UserId, Database, ClientId, MRN);
                //            final Image image = Image.getInstance(BarCodeFilePath);
                //            image.scaleAbsolute(150.0f, 30.0f);
                // loop on all the PDF pages
                // i is the pdfPageNumber
                for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {

                    if (i == 1) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(480, 675); // set x and y co-ordinates
                        pdfContentByte.showText(Time);//"TIME "); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 565); // set x and y co-ordinates
                        pdfContentByte.showText(LastName);//"Last Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(365, 565); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName);//"First Name"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.setTextMatrix(217, 525);// *YES* PATIENT BEFORE add the text
                        } else {
                            pdfContentByte.setTextMatrix(259, 525);
                            ;// *NO* PATIENT BEFORE add the text
                        }
                        pdfContentByte.setTextMatrix(217, 525); // set x and y co-ordinates
                        pdfContentByte.showText("*"); // *YES* PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 500); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(360, 500); // set x and y co-ordinates
                        pdfContentByte.showText(Age);//"Age"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(130, 445); // set x and y co-ordinates
                        pdfContentByte.showText(ReasonVisit);//"Reason Of Visit"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician Name"); //  PATIENT BEFORE add the text
                        pdfContentByte.endText();


                        if (BuildingSignDriveBy.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Clinic Sign/Drive By add the text
                            pdfContentByte.endText();
                        }

                        if (Website.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // LIFESAVERER.com  add the text
                            pdfContentByte.endText();
                        }

                        if (!Other_text.toUpperCase().equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(380, 165); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(512, 168); // set x and y co-ordinates
                            pdfContentByte.showText(Other_text); // Other (Please Specify)   add the text
                            pdfContentByte.endText();
                        }

                        if (Google.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Web Browser (Google, Bing, Yahoo) add the text
                            pdfContentByte.endText();
                        }

                        if (!Physician_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Doctor  add the text
                            pdfContentByte.endText();
                        }

                        if (!CommunityEvent_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(381, 145); // set x and y co-ordinates
                            pdfContentByte.showText("*"); // Children’s Festival add the text
                            pdfContentByte.endText();
                        }

                        if (ReturnPatient.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  I was a former patient add the text
                            pdfContentByte.endText();
                        }

                        if (!FamilyFriend_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 125); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Family or Friend  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 125); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Radio advertisement add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Former patient recommendation add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(239.25f, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Employer  add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 103); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // GOOGLE add the text
                        //                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(23.25f, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); //  Insurance Company recommendation add the text
                        //                        pdfContentByte.endText();
                        if (!Newspaper_text.equals("")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(239.25f, 83); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  Newspaper  add the text
                            pdfContentByte.endText();
                        }

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(381, 83); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // Yelp add the text
                        //                        pdfContentByte.endText();

                        if (TV.toUpperCase().equals("YES")) {
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.RED);
                            pdfContentByte.setTextMatrix(23.25f, 63); // set x and y co-ordinates
                            pdfContentByte.showText("*"); //  TV Advertisement add the text
                            pdfContentByte.endText();
                        }


                    }

                    if (i == 2) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        /////////////////////////////////////Patient Information//////////////////////////////////////////////////
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(70, 645); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 645); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(85, 625); // set x and y co-ordinates
                        pdfContentByte.showText(Address);//"Address"); // add the text
                        pdfContentByte.endText();
                        if (!CityStateZip.equals("")) {
                            String[] cityStateZip = CityStateZip.split("/");
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(405, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[0]);//"City"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(503, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[1]);//"State"); // add the text
                            pdfContentByte.endText();
                            pdfContentByte.beginText();
                            pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                            pdfContentByte.setColorFill(BaseColor.BLACK);
                            pdfContentByte.setTextMatrix(570, 625); // set x and y co-ordinates
                            pdfContentByte.showText(cityStateZip[2]); // add the text
                            pdfContentByte.endText();
                        }


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(95, 605); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(110, 585); // set x and y co-ordinates
                        pdfContentByte.showText(SSN);//"SSN"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 585); // set x and y co-ordinates
                        pdfContentByte.showText(DOB);//"DOB"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        if (gender.equals("male")) {
                            pdfContentByte.setTextMatrix(477.5f, 583); // *MALE* Sex set x and y co-ordinates
                        } else {
                            pdfContentByte.setTextMatrix(413.5f, 583); // *FEMALE* Sexset x and y co-ordinates
                        }
                        pdfContentByte.showText("*"); // *FEMALE* Sex add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.RED);
                        System.out.println("MaritalStatus -> " + MaritalStatus);

                        if (MaritalStatus.equals("Single")) {
                            System.out.println(" Single MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(100, 563);// *SINGLE* Marital Status
                        } else if (MaritalStatus.equals("Mar")) {
                            System.out.println("Mar MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(152, 563); // set x and y co-ordinates
                        } else if (MaritalStatus.equals("Wid")) {
                            System.out.println("Wid MaritalStatus -> " + MaritalStatus);
                            pdfContentByte.setTextMatrix(283.5f, 563); // set x and y co-ordinates
                        } else if (MaritalStatus.equals("Div")) {
                            System.out.println("Div MaritalStatus -> " + MaritalStatus);

                            pdfContentByte.setTextMatrix(215, 563); // set x and y co-ordinates
                        }
                        pdfContentByte.showText("*"); // *SINGLE* Marital Status add the text
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(152, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Married* Marital Status add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(215, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Divorced* Marital Status add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.RED);
                        //                        pdfContentByte.setTextMatrix(283.5f, 563); // set x and y co-ordinates
                        //                        pdfContentByte.showText("*"); // *Widowed* Sex add the text
                        //                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(420, 565); // set x and y co-ordinates
                        pdfContentByte.showText(Email);//"Email"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(385, 545); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"Emergency Contact Name"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(315, 525); // set x and y co-ordinates
                        pdfContentByte.showText(AddressER);//"Emergency Address"); // add the text
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(135, 478); // set x and y co-ordinates
                        pdfContentByte.showText(Physician);//"Physician"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(90, 458); // set x and y co-ordinates
                        pdfContentByte.showText(Employer);//"Employer"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(320, 458); // set x and y co-ordinates
                        pdfContentByte.showText(Occupation);//"Occupation"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(460, 458); // set x and y co-ordinates
                        pdfContentByte.showText(PhNumber);//"Phone Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 405); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsuranceName);//"Primary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 380); // set x and y co-ordinates
                        pdfContentByte.showText(MemId);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(390, 380); // set x and y co-ordinates
                        pdfContentByte.showText(GrpNumber);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 365); // set x and y co-ordinates
                        pdfContentByte.showText(PriInsurerName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 365); // set x and y co-ordinates
                        pdfContentByte.showText(PrimaryDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 348); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(440, 348); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 335); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationtoPrimary);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 300); // set x and y co-ordinates
                        pdfContentByte.showText(SecondryInsurance);//"Secondary Insurance"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(100, 283); // set x and y co-ordinates
                        pdfContentByte.showText(MemberID_2);//"Member Id Number"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 283); // set x and y co-ordinates
                        pdfContentByte.showText(GroupNumber_2);//"Group Number"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 268); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberName);//"Subscriber NAME"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 268); // set x and y co-ordinates
                        pdfContentByte.showText(SubscriberDOB);//"DOB"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 255); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Subscriber’s Address"); // add the text
                        //                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(460, 255); // set x and y co-ordinates
                        //                        pdfContentByte.showText("PhNumber"); // add the text
                        //                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 9); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 235); // set x and y co-ordinates
                        pdfContentByte.showText(PatientRelationshiptoSecondry);//"Patient’s relationship"); // add the text
                        pdfContentByte.endText();
                    }

                    if (i == 3) {

                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

//                        pdfContentByte.beginText();
//                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
//                        pdfContentByte.setColorFill(BaseColor.BLACK);
//                        pdfContentByte.setTextMatrix(180, 270); // set x and y co-ordinates
//                        pdfContentByte.showText("Signature"); // add the text
//                        pdfContentByte.endText();


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(180, 180); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"Relationship to ER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 140); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }

                    if (i == 4) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(70, 200); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();


                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 200); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(50, 150); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Print Patient Name"); // add the text
                        pdfContentByte.endText();


                    }

                    if (i == 5) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();

                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 405); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Patient Name"); // add the text
                        pdfContentByte.endText();

                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(80, 315); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(500, 315); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 270); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(450, 230); // set x and y co-ordinates
                        pdfContentByte.showText(NextofKinName);//"NameER"); // add the text
                        pdfContentByte.endText();
                    }


                    if (i == 6) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);


//                    image.setAbsolutePosition(10.0f, 710.0f);
//                    pdfContentByte.addImage(image);
                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();
                        //                        pdfContentByte.beginText();
                        //                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        //                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        //                        pdfContentByte.setTextMatrix(150, 128); // set x and y co-ordinates
                        //                        pdfContentByte.showText("Signature"); // add the text
                        //                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400, 128); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(290, 85); // set x and y co-ordinates
                        pdfContentByte.showText(RelationToPatientER);//"RealtionshipER"); // add the text
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(490, 85); // set x and y co-ordinates
                        pdfContentByte.showText(Date);//"Date"); // add the text
                        pdfContentByte.endText();

                    }
                    if (i == 7) {
                        PdfContentByte pdfContentByte = pdfStamper.getOverContent(i);

                        //LABEL
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 765.0f);
                        pdfContentByte.showText(LastName + " , " + FirstName);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 755.0f);
                        pdfContentByte.showText(ClientName + "        Sex:" + gender);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 745.0f);
                        pdfContentByte.showText("DOB: " + DOB + "        Age:" + Age);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 735.0f);
                        pdfContentByte.showText("MRN: " + MRN + "        DOS: " + DOS);
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 8.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(410.0f, 725.0f);
                        pdfContentByte.showText("Dr. " + DoctorName);
                        pdfContentByte.endText();


                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(150, 585); // set x and y co-ordinates
                        pdfContentByte.showText(FirstName + " " + MiddleInitial + " " + LastName);//"Name"); // add the text
                        pdfContentByte.endText();
                    }
                }
                pdfStamper.close();
                pdfReader.close();
                return pdfReader.getNumberOfPages() + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
//
//                final File pdfFile = new File(outputFilePath);
//                response.setContentType("application/pdf");
//                response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + LastName + ID + "_" + DateTime + ".pdf");
//                response.setContentLength((int) pdfFile.length());
//                final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//                final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//                int bytes;
//                while ((bytes = fileInputStream.read()) != -1) {
//                    responseOutputStream.write(bytes);
//                }
            }


        } catch (Exception e) {
            //            out.println(e.getMessage());
            System.out.println(e.getMessage());
            String str = "";
            for (int j = 0; j < e.getStackTrace().length; ++j) {
                str = str + e.getStackTrace()[j] + "<br>";
            }
            System.out.println(str);
        }
        return "";
    }

    void PatientsDocUpload_Save(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, HttpServletResponse response, int facilityIndex) {
//        System.out.println("inside 9999 PatientsDocUpload_Save");
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        String PatientId = "";
        String DocumentName = "";
        String UserId = "";
        String ClientIndex = "";
        String ClientId = "";
        int PremisisId = 0;
        int PatientRegId = 0;
        String PatientMRN = "";
        String PatientName = "";
        String DirectoryName = "";
        String Database = "";
        String DocumentType = "";
        String VisitNo = "";
        String Path = null;
        String UploadPath = null;


        boolean IdFound = false;
        boolean FileFound = false;
        boolean insuranceF = false;
        boolean insuranceB = false;
//        boolean insurance = false;
        byte[] Data = null;
        String key = "";
        String filename = "";
        String IDs = "";
        String InsuranceIDsF = "";
        String InsuranceIDsB = "";
        String Idfront = "";
        String insuranceFront = "";
        String insuranceBack = "";
        String IdfrontName = "";
        String insuranceFrontName = "";
        String insuranceBackName = "";
        String value = "";


        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement("Select Id, dbname,DirectoryName from oe.clients where Id =" + facilityIndex);

            rset = ps.executeQuery();
            if (rset.next()) {
                PremisisId = rset.getInt(1);
                Database = rset.getString(2);
                DirectoryName = rset.getString(3);
            }
            rset.close();
            ps.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }


        HashMap<String, String> valuemap = new HashMap<String, String>();


        try {
            Dictionary d = doUpload(request, response, out);
            Enumeration<String> en = d.keys();
            while (en.hasMoreElements()) {
                key = en.nextElement();
                FileFound = false;
//                System.out.println("KEY -> " + key);
                if (!(key.startsWith("Idfront") || key.startsWith("insuranceFront") || key.startsWith("insuranceBack"))) {
                    value = (String) d.get(key);
                    valuemap.put(key, value.substring(4));
                }
                if (key.startsWith("ClientIndex")) {
                    ClientId = (String) d.get(key);
                } else if ((key.startsWith("Idfront") && key.endsWith(".jpg")) || (key.startsWith("Idfront") && key.endsWith(".png"))) {
                    filename = key;
                    FileFound = true;
                    IdFound = true;
                    IDs = key;
//                    System.out.println("ID FOUND!!!!!!!!!!!!!!");
                    ByteArrayOutputStream baos = null;
                    baos = (ByteArrayOutputStream) d.get(key);
                    Data = baos.toByteArray();
                } else if ((key.startsWith("insuranceFront") && key.endsWith(".jpg")) || (key.startsWith("insuranceFront") && key.endsWith(".png"))) {
                    filename = key;
                    FileFound = true;
                    InsuranceIDsF = key;
                    insuranceF = true;
//                    System.out.println("INSURANCE ID FRONT FOUND!!!!!!!!!!!!!!");

                    ByteArrayOutputStream baos = null;
                    baos = (ByteArrayOutputStream) d.get(key);
                    Data = baos.toByteArray();
                } else if ((key.startsWith("insuranceBack") && key.endsWith(".jpg")) || (key.startsWith("insuranceBack") && key.endsWith(".png"))) {
                    filename = key;
                    FileFound = true;
                    insuranceB = true;
                    InsuranceIDsB = key;

//                    System.out.println("INSURANCE ID BACK FOUND!!!!!!!!!!!!!!");

                    ByteArrayOutputStream baos = null;
                    baos = (ByteArrayOutputStream) d.get(key);
                    Data = baos.toByteArray();
                }
//                System.out.println("FileFound : " + FileFound);
                if (FileFound) {
                    UploadPath = "/sftpdrive/AdmissionBundlePdf/Attachment/" + DirectoryName + "/";
//                    System.out.println("UploadPath : " + UploadPath);

                    filename = filename.replaceAll("\\s+", "");

                    File fe = new File(String.valueOf(String.valueOf(UploadPath)) + filename);
                    if (fe.exists())
                        fe.delete();
                    FileOutputStream fouts = new FileOutputStream(fe);
                    fouts.write(Data);
                    fouts.flush();
                    fouts.close();
                }
            }


            ClientId = ClientId.substring(4);

//            ps = conn.prepareStatement("Select Id from " + Database + ".PatientReg order by ID desc limit 1 ");
//            rset = ps.executeQuery();
//            if (rset.next()) {
//                PatientId = rset.getString(1);
//            }

            rset.close();
            ps.close();
//            System.out.println("PatientId : " + PatientId);
//            System.out.println("PremisisId : " + PremisisId);
//            System.out.println("Database : " + Database);
//            System.out.println("DirectoryName : " + DirectoryName);

//            ps = conn.prepareStatement("UPDATE  " + Database + ".PatientReg  SET IDFront = ? , InsuranceFront = ? , InsuranceBack = ? WHERE Id = ?");
//            if (!IDs.equals("")) {
//                ps.setString(1, IDs);
//            } else {
//                ps.setString(1, null);
//            }
//            if (!InsuranceIDsF.equals("")) {
//                ps.setString(2, InsuranceIDsF);
//            } else {
//                ps.setString(2, null);
//            }
//            if (!InsuranceIDsB.equals("")) {
//                ps.setString(3, InsuranceIDsB);
//            } else {
//                ps.setString(3, null);
//            }
//            ps.setString(4, PatientId);
//            ps.executeUpdate();
//            ps.close();

//            try {
////                Query = "";
////                stmt = conn.createStatement();
////                rset = stmt.executeQuery(Query);
////                if
//
////                PreparedStatement MainReceipt = conn.prepareStatement(
////                        "Insert into " + Database + ".PatientDocUpload (PremisisId, PatientRegId, PatientMRN, PatientName, " +
////                                "UploadDocumentName, FileName, CreatedBy, CreatedDate, DocumentType, VisitIdx) " +
////                                "values (?,?,?,?,?,?,?,now(),?,?) ");
////                MainReceipt.setInt(1, PremisisId);
////                MainReceipt.setInt(2, PatientRegId);
////                MainReceipt.setString(3, PatientMRN);
////                MainReceipt.setString(4, PatientName);
////                MainReceipt.setString(5, DocumentName);
////                MainReceipt.setString(6, FileName);
////                MainReceipt.setString(7, UserId);
////                MainReceipt.setString(8, DocumentType);
////                MainReceipt.setString(9, VisitNo);
////                MainReceipt.executeUpdate();
////
////                MainReceipt.close();
//            } catch (Exception e) {
//                out.println("Error in Insertion:-" + e.getMessage());
//            }

            /*String target = "";
            String firstname = "";
            String lastname = "";
            String Message = "";
            if (DocumentType.compareTo("1") == 0) {
                Query = "SELECT directory_1 FROM oe.clients WHERE Id = " + PremisisId;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next())
                    target = rset.getString(1);
                rset.close();
                stmt.close();
                File source = new File(String.valueOf(String.valueOf(UploadPath)) + FileName);
                File dest = new File(String.valueOf("/opt/" + FileName));
                int i = copyFileUsingJava7Files(source, dest);
            }*/
//            Parsehtm Parser = new Parsehtm(request);
//            Parser.SetField("Message", "File Has been Uploaded Successfully");
//            Parser.SetField("FormName", "RegisteredPatients2");
//            Parser.SetField("ActionID", "PatientsDocUpload&PatientId=" + PatientRegId);
//            Parser.SetField("UserId", UserId);
//            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/Success.html");
            UtilityHelper helper = new UtilityHelper();
            if (Integer.parseInt(ClientId) == 9)
                SaveDataVictoria_2_2(request, conn, servletContext, response, helper, valuemap, out, IDs, InsuranceIDsF, InsuranceIDsB, ClientId);
            else
                SaveData99(request, out, conn, servletContext, Database, UserId, helper, response, DirectoryName, IDs, InsuranceIDsF, InsuranceIDsB, ClientId, valuemap);

        } catch (Exception e2) {
            out.println("Error in Upload DOcuments!!" + e2.getMessage());
            String str = "";
            for (int i = 0; i < (e2.getStackTrace()).length; i++)
                str = str + e2.getStackTrace()[i] + "<br>";
            out.println(str);
        }
    }

    void SaveDataVictoria_2_2(HttpServletRequest request, final Connection conn, final ServletContext servletContext, final HttpServletResponse response, UtilityHelper helper, HashMap<String, String> valuemap, PrintWriter out, String IDs, String InsuranceIDsF, String InsuranceIDsB, String clientId) throws FileNotFoundException {
        String facilityName = "";

        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        String Database = "";
        String DirectoryName = "";
        int MRN = 0;
        String ExtendedMRN = "0";
        int PatientRegId = 0;
        String Date = "";
        final String ClientId = clientId;//"";
        int ClientIndex = 0;
        String Title = null;
        String FirstName = null;
        String LastName = null;
        String MiddleInitial = null;
        String County = null;
        String DOB = null;
        String Month = "00";
        String Day = "00";
        String Year = "0000";
        String Age = null;
        String gender = null;
        String Email = null;
        String rqtype = null;
        String ConfirmEmail = null;
        String MaritalStatus = null;
        String AreaCode = null;
        String PhNumber = null;
        String Address = null;
        String Address2 = null;
        String City = null;
        String State = null;
        String ZipCode = null;
        String Country = null;
        String Ethnicity = null;
        String Race = null;
        final String Ethnicity_OthersText = null;
        String SSN = null;
        String EmployementChk = "0";
        String Employer = null;
        String Occupation = null;
        String EmpContact = null;
        String PrimaryCarePhysicianChk = "0";
        String PriCarePhy = null;
        String ReasonVisit = null;

        String SympChkCOVID = "0";
        String DateSympOnset = null;
        String SympFever = "0";
        String SympCough = "0";
        String SympShortBreath = "0";
        String SympFatigue = "0";
        String SympMuscBodyAches = "0";
        String SympHeadache = "0";
        String SympLossTaste = "0";
        String SympSoreThroat = "0";
        String SympCongestionRunNos = "0";
        String SympNauseaVomit = "0";
        String SympDiarrhea = "0";
        String SympPerPainChest = "0";
        String SympNewConfusion = "0";
        String SympInabWake = "0";
        String SympOthers = "0";
        String SympOthersTxt = "";
        String EmpHealthChk = null;
        String PregChk = null;
        String TestForTravel = null;

        String PriCarePhyAddress = "";
        String PriCarePhyAddress2 = "";
        String PriCarePhyCity = null;
        String PriCarePhyState = null;
        String PriCarePhyZipCode = null;
        String PatientMinorChk = "0";
        String GuarantorChk = "0";
        String GuarantorEmployer = null;
        String GuarantorEmployerAreaCode = null;
        String GuarantorEmployerPhNumber = null;
        String GuarantorEmployerAddress = "";
        String GuarantorEmployerAddress2 = "";
        String GuarantorEmployerCity = null;
        String GuarantorEmployerState = null;
        String GuarantorEmployerZipCode = null;
        String WorkersCompPolicyChk = "0";
        String WCPDateofInjury = null;
        String WCPCaseNo = null;
        String WCPGroupNo = null;
        String WCPMemberId = null;
        String WCPInjuryRelatedAutoMotorAccident = "0";
        String WCPInjuryRelatedWorkRelated = "0";
        String WCPInjuryRelatedOtherAccident = "0";
        String WCPInjuryRelatedNoAccident = "0";
        String WCPInjuryOccurVehicle = "0";
        String WCPInjuryOccurWork = "0";
        String WCPInjuryOccurHome = "0";
        String WCPInjuryOccurOther = "0";
        String WCPInjuryDescription = null;
        String WCPHRFirstName = null;
        String WCPHRLastName = null;
        String WCPHRAreaCode = null;
        String WCPHRPhoneNumber = null;
        String WCPHRAddress = "";
        String WCPHRAddress2 = "";
        String WCPHRCity = null;
        String WCPHRState = null;
        String WCPHRZipCode = null;
        String WCPPlanName = null;
        String WCPCarrierName = null;
        String WCPPayerAreaCode = null;
        String WCPPayerPhoneNumber = null;
        String WCPCarrierAddress = "";
        String WCPCarrierAddress2 = "";
        String WCPCarrierCity = null;
        String WCPCarrierState = null;
        String WCPCarrierZipCode = null;
        String WCPAdjudicatorFirstName = null;
        String WCPAdjudicatorLastName = null;
        String WCPAdjudicatorAreaCode = null;
        String WCPAdjudicatorPhoneNumber = null;
        String WCPAdjudicatorFaxAreaCode = null;
        String WCPAdjudicatorFaxPhoneNumber = null;
        String MotorVehicleAccidentChk = "0";
        String AutoInsuranceInformationChk = "0";
        String AIIDateofAccident = "";
        String AIIAutoClaim = null;
        String AIIAccidentLocationAddress = null;
        String AIIAccidentLocationAddress2 = null;
        String AIIAccidentLocationCity = null;
        String AIIAccidentLocationState = null;
        String AIIAccidentLocationZipCode = null;
        String AIIRoleInAccident = null;
        String AIITypeOfAutoIOnsurancePolicy = null;
        String AIIPrefixforReponsibleParty = null;
        String AIIFirstNameforReponsibleParty = null;
        String AIIMiddleNameforReponsibleParty = null;
        String AIILastNameforReponsibleParty = null;
        String AIISuffixforReponsibleParty = null;
        String AIICarrierResponsibleParty = null;
        String AIICarrierResponsiblePartyAddress = null;
        String AIICarrierResponsiblePartyAddress2 = null;
        String AIICarrierResponsiblePartyCity = null;
        String AIICarrierResponsiblePartyState = null;
        String AIICarrierResponsiblePartyZipCode = null;
        String AIICarrierResponsiblePartyAreaCode = null;
        String AIICarrierResponsiblePartyPhoneNumber = null;
        String AIICarrierResponsiblePartyPolicyNumber = null;
        String AIIResponsiblePartyAutoMakeModel = null;
        String AIIResponsiblePartyLicensePlate = null;
        String AIIFirstNameOfYourPolicyHolder = null;
        String AIILastNameOfYourPolicyHolder = null;
        String AIINameAutoInsuranceOfYourVehicle = null;
        String AIIYourInsuranceAddress = null;
        String AIIYourInsuranceAddress2 = null;
        String AIIYourInsuranceCity = null;
        String AIIYourInsuranceState = null;
        String AIIYourInsuranceZipCode = null;
        String AIIYourInsuranceAreaCode = null;
        String AIIYourInsurancePhoneNumber = null;
        String AIIYourInsurancePolicyNo = null;
        String AIIYourLicensePlate = null;
        String AIIYourCarMakeModelYear = null;
        String HealthInsuranceChk = "0";
        String GovtFundedInsurancePlanChk = "0";
        String GFIPMedicare = "0";
        String GFIPMedicaid = "0";
        String GFIPCHIP = "0";
        String GFIPTricare = "0";
        String GFIPVHA = "0";
        String GFIPIndianHealth = "0";
        String InsuranceSubPatient = "0";
        String InsuranceSubGuarantor = "0";
        String InsuranceSubOther = "0";
        String HIPrimaryInsurance = null;
        String HISubscriberFirstName = null;
        String HISubscriberLastName = null;
        String HISubscriberDOB = null;
        String HISubscriberSSN = null;
        String HISubscriberRelationtoPatient = null;
        String HISubscriberGroupNo = null;
        String HISubscriberPolicyNo = null;
        String SecondHealthInsuranceChk = null;
        String SHISecondaryName = "";
        String SHISubscriberFirstName = "";
        String SHISubscriberLastName = "";
        String SHISubscriberDOB = "";
        String SHISubscriberRelationtoPatient = "";
        String SHISubscriberGroupNo = "";
        String SHISubscriberPolicyNo = "";
        String MFFirstVisit = "";

        String MFReturnPat = "";
        String MFInternetFind = "";
        String Facebook = "";
        String MapSearch = "";
        String GoogleSearch = "";
        String VERWebsite = "";
        String WebsiteAds = "";
        String OnlineAdvertisements = "";
        String OnlineReviews = "";
        String Twitter = "";
        String LinkedIn = "";
        String EmailBlast = "";
        String YouTube = "";
        String TV = "";
        String Billboard = "";
        String Radio = "";
        String Brochure = "";
        String DirectMail = "";
        String CitizensDeTar = "";
        String LiveWorkNearby = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String NewspaperMagazine = "";
        String NewspaperMagazine_text = "";
        String School = "";
        String School_text = "";
        String Hotel = "";
        String Hotel_text = "";
        String EmployerSentMe = "";
        String EmployerSentMe_text = "";
        String PatientCell = "";
        String MFPhysicianRefChk = "";
        String MFPhysician = "";
        String RecInitial = "";
        int VisitId = 0;
        try {

//                        "INSERT INTO oe.EligibilityInquiry (PatientMRN,DateofService,TraceId ,PolicyStatus,strmsg, " +
//                                "Name, DateofBirth, Gender, InsuranceNum, GediPayerId, CreatedBy, CreatedDate,ResponseType) " +
//                                "VALUES (?,?,?,?,?,?,?,?,?,?,?,now(),?) ");
            PreparedStatement ps = conn.prepareStatement("Select Id, dbname,DirectoryName from oe.clients where ltrim(rtrim(UPPER(id))) = ?");
            ps.setString(1, ClientId);
//            System.out.println("****Query -> " + ps.toString());
            rset = ps.executeQuery();
            if (rset.next()) {
                ClientIndex = rset.getInt(1);
                Database = rset.getString(2);
                DirectoryName = rset.getString(3);
            }
            rset.close();
            ps.close();

//            for (String name : valuemap.keySet()) {
//                String key = name.toString();
//                String value = valuemap.get(name).toString();
//                System.out.println(key + " " + value);
//            }

//            System.out.println("query 1 converted");
//            HttpServletRequest request;
            facilityName = helper.getFacilityName(request, conn, servletContext, ClientIndex);
            if (valuemap.get("Title") == null) {
                Title = "Mr.";
            } else {
                Title = valuemap.get("Title").trim();
            }
            if (valuemap.get("FirstName") == null) {
                FirstName = "";
            } else {
                FirstName = valuemap.get("FirstName").trim();
            }
            if (valuemap.get("LastName") == null) {
                LastName = "";
            } else {
                LastName = valuemap.get("LastName").trim();
            }
            if (valuemap.get("MiddleInitial") == null) {
                MiddleInitial = "";
            } else {
                MiddleInitial = valuemap.get("MiddleInitial").trim();
            }

            if (valuemap.get("Month") == null) {
                Month = "";
            } else {
                Month = valuemap.get("Month").trim();
            }
            if (valuemap.get("Day") == null) {
                Day = "";
            } else {
                Day = valuemap.get("Day").trim();
            }
            if (valuemap.get("Year") == null) {
                Year = "";
            } else {
                Year = valuemap.get("Year").trim();
            }
            DOB = Year + "-" + Month + "-" + Day;

//            if (valuemap.get("DOB") == null) {
//                DOB = "0000-00-00";
//            } else {
//                DOB = valuemap.get("DOB").trim();
//                DOB = String.valueOf(String.valueOf(DOB.substring(6, 10))) + "-" + DOB.substring(0, 2) + "-" + DOB.substring(3, 5);
//            }
            if (valuemap.get("Age") == null) {
                Age = "";
            } else {
                Age = valuemap.get("Age").trim();
            }
            if (valuemap.get("gender") == null) {
                gender = "";
            } else {
                gender = valuemap.get("gender").trim();
            }


            int PatientFound = 0;
            String FoundMRN = "";
            try {
                ps = conn.prepareStatement(" Select COUNT(*), IFNULL(MRN,0) from " + Database + ".PatientReg  " +
                        "where Status = 0 and ltrim(rtrim(UPPER(FirstName))) = ?  and " +
                        " ltrim(rtrim(UPPER(LastName))) = ? and DOB = ?");
                ps.setString(1, FirstName.trim().toUpperCase());
                ps.setString(2, LastName.trim().toUpperCase());
                ps.setString(3, DOB);

                rset = ps.executeQuery();
                if (rset.next()) {
                    PatientFound = rset.getInt(1);
                    FoundMRN = rset.getString(2);
                }
                rset.close();
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println("query " + ps.toString());
                System.out.println("Error -> " + e.getMessage());
            }

//            System.out.println("query 2 converted");


            if (PatientFound > 0) {
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("Title", "Patient Already Found. MRN: " + FoundMRN);
                Parser.SetField("Text", "Please Proceed to Front Desk with the MRN.");
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientId + "");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/Warning.html");
                return;
            }

            if (valuemap.get("rqtype") == null) {
                rqtype = null;
            } else {
                rqtype = valuemap.get("rqtype").trim();
            }
            if (valuemap.get("Email") == null) {
                Email = "";
            } else {
                Email = valuemap.get("Email").trim();
            }
            if (valuemap.get("ConfirmEmail") == null) {
                ConfirmEmail = "";
            } else {
                ConfirmEmail = valuemap.get("ConfirmEmail").trim();
            }
            if (valuemap.get("MaritalStatus") == null) {
                MaritalStatus = "";
            } else {
                MaritalStatus = valuemap.get("MaritalStatus").trim();
            }
            if (valuemap.get("AreaCode") == null) {
                AreaCode = "";
            } else {
                AreaCode = valuemap.get("AreaCode").trim();
            }
            if (valuemap.get("PhNumber") == null) {
                PhNumber = "";
            } else {
                PhNumber = valuemap.get("PhNumber").trim();
            }
            if (valuemap.get("Address") == null) {
                Address = "";
            } else {
                Address = valuemap.get("Address").trim();
            }
            if (valuemap.get("Address2") == null) {
                Address2 = "";
            } else {
                Address2 = valuemap.get("Address2").trim();
            }
            if (valuemap.get("City") == null) {
                City = "";
            } else {
                City = valuemap.get("City").trim();
            }
            if (valuemap.get("State") == null) {
                State = "";
            } else {
                State = valuemap.get("State").trim();
            }
            if (valuemap.get("County") == null) {
                County = "";
            } else {
                County = valuemap.get("County").trim();
            }
            if (valuemap.get("Country") == null) {
                Country = "";
            } else {
                Country = valuemap.get("Country").trim();
            }
            if (valuemap.get("ZipCode") == null) {
                ZipCode = "";
            } else {
                ZipCode = valuemap.get("ZipCode").trim();
            }
            if (valuemap.get("Ethnicity") == null) {
                Ethnicity = "Not Specified";
            } else {
                Ethnicity = valuemap.get("Ethnicity").trim();
            }
            if (valuemap.get("Race") == null) {
                Race = "Not Specified";
            } else {
                Race = valuemap.get("Race").trim();
            }
            if (valuemap.get("SSN") == null) {
                SSN = "";
            } else {
                SSN = valuemap.get("SSN").trim();
            }
            if (valuemap.get("ReasonVisit") == null) {
                ReasonVisit = "";
            } else {
                ReasonVisit = valuemap.get("ReasonVisit").trim();
            }

            if (valuemap.get("SympChkCOVID") == null) {
                SympChkCOVID = "0";
            } else {
                SympChkCOVID = valuemap.get("SympChkCOVID").trim();
            }

            if (valuemap.get("TestForTravelChk") == null) {
                TestForTravel = "0";
            } else {
                TestForTravel = valuemap.get("TestForTravelChk").trim();
            }


            if (valuemap.get("DateSympOnset") == null) {
                DateSympOnset = "0000-00-00";
            } else {
                DateSympOnset = valuemap.get("DateSympOnset").trim();
//                if (DateSympOnset.length() <= 10)
//                    DateSympOnset = DateSympOnset.substring(6, 10) + "-" + DateSympOnset.substring(0, 2) + "-" + DateSympOnset.substring(3, 5);
            }

            if (valuemap.get("SympFever") == null) {
                SympFever = "0";
            } else {
                SympFever = "1";
            }
            if (valuemap.get("SympCough") == null) {
                SympCough = "0";
            } else {
                SympCough = "1";
            }
            if (valuemap.get("SympShortBreath") == null) {
                SympShortBreath = "0";
            } else {
                SympShortBreath = "1";
            }
            if (valuemap.get("SympFatigue") == null) {
                SympFatigue = "0";
            } else {
                SympFatigue = "1";
            }
            if (valuemap.get("SympMuscBodyAches") == null) {
                SympMuscBodyAches = "0";
            } else {
                SympMuscBodyAches = "1";
            }
            if (valuemap.get("SympHeadache") == null) {
                SympHeadache = "0";
            } else {
                SympHeadache = "1";
            }
            if (valuemap.get("SympLossTaste") == null) {
                SympLossTaste = "0";
            } else {
                SympLossTaste = "1";
            }
            if (valuemap.get("SympSoreThroat") == null) {
                SympSoreThroat = "0";
            } else {
                SympSoreThroat = "1";
            }
            if (valuemap.get("SympCongestionRunNos") == null) {
                SympCongestionRunNos = "0";
            } else {
                SympCongestionRunNos = "1";
            }
            if (valuemap.get("SympNauseaVomit") == null) {
                SympNauseaVomit = "0";
            } else {
                SympNauseaVomit = "1";
            }
            if (valuemap.get("SympDiarrhea") == null) {
                SympDiarrhea = "0";
            } else {
                SympDiarrhea = "1";
            }
            if (valuemap.get("SympPerPainChest") == null) {
                SympPerPainChest = "0";
            } else {
                SympPerPainChest = "1";
            }
            if (valuemap.get("SympNewConfusion") == null) {
                SympNewConfusion = "0";
            } else {
                SympNewConfusion = "1";
            }
            if (valuemap.get("SympInabWake") == null) {
                SympInabWake = "0";
            } else {
                SympInabWake = "1";
            }
            if (valuemap.get("SympOthers") == null) {
                SympOthers = "0";
            } else {
                SympOthers = "1";
            }
            if (valuemap.get("SympOthersTxt") == null) {
                SympOthersTxt = "";
            } else {
                SympOthersTxt = valuemap.get("SympOthersTxt").trim();
            }
            if (valuemap.get("EmpHealthChk") == null) {
                EmpHealthChk = "0";
            } else {
                EmpHealthChk = valuemap.get("EmpHealthChk").trim();
            }
            if (valuemap.get("PregChk") == null) {
                PregChk = "0";
            } else {
                PregChk = valuemap.get("PregChk").trim();
            }

            if (valuemap.get("EmployementChk") == null) {
                EmployementChk = "0";
            } else {
                EmployementChk = valuemap.get("EmployementChk").trim();
            }
            if (EmployementChk.equals("1")) {
                if (valuemap.get("Employer") == null) {
                    Employer = "";
                } else {
                    Employer = valuemap.get("Employer").trim();
                }
                if (valuemap.get("Occupation") == null) {
                    Occupation = "";
                } else {
                    Occupation = valuemap.get("Occupation").trim();
                }
                if (valuemap.get("EmpContact") == null) {
                    EmpContact = "";
                } else {
                    EmpContact = valuemap.get("EmpContact").trim();
                }
            }
            if (valuemap.get("PrimaryCarePhysicianChk") == null) {
                PrimaryCarePhysicianChk = "0";
            } else {
                PrimaryCarePhysicianChk = valuemap.get("PrimaryCarePhysicianChk").trim();
            }
            if (PrimaryCarePhysicianChk.equals("1")) {
                if (valuemap.get("PriCarePhy") == null) {
                    PriCarePhy = "";
                } else {
                    PriCarePhy = valuemap.get("PriCarePhy").trim();
                }
                if (valuemap.get("PriCarePhyAddress") == null) {
                    PriCarePhyAddress = "";
                } else {
                    PriCarePhyAddress = valuemap.get("PriCarePhyAddress").trim();
                }
                if (valuemap.get("PriCarePhyAddress2") == null) {
                    PriCarePhyAddress2 = "";
                } else {
                    PriCarePhyAddress2 = valuemap.get("PriCarePhyAddress2").trim();
                }
                if (valuemap.get("PriCarePhyCity") == null) {
                    PriCarePhyCity = "";
                } else {
                    PriCarePhyCity = valuemap.get("PriCarePhyCity").trim();
                }
                if (valuemap.get("PriCarePhyState") == null) {
                    PriCarePhyState = "";
                } else {
                    PriCarePhyState = valuemap.get("PriCarePhyState").trim();
                }
                if (valuemap.get("PriCarePhyZipCode") == null) {
                    PriCarePhyZipCode = "";
                } else {
                    PriCarePhyZipCode = valuemap.get("PriCarePhyZipCode").trim();
                }
            }
            if (valuemap.get("PatientMinorChk") == null) {
                PatientMinorChk = "0";
            } else {
                PatientMinorChk = valuemap.get("PatientMinorChk").trim();
            }
            if (valuemap.get("GuarantorChk") == null) {
                GuarantorChk = "0";
            } else {
                GuarantorChk = valuemap.get("GuarantorChk").trim();
            }
            if (valuemap.get("GuarantorEmployer") == null) {
                GuarantorEmployer = "";
            } else {
                GuarantorEmployer = valuemap.get("GuarantorEmployer").trim();
            }
            if (valuemap.get("GuarantorEmployerAreaCode") == null) {
                GuarantorEmployerAreaCode = "";
            } else {
                GuarantorEmployerAreaCode = valuemap.get("GuarantorEmployerAreaCode").trim();
            }
            if (valuemap.get("GuarantorEmployerPhNumber") == null) {
                GuarantorEmployerPhNumber = "";
            } else {
                GuarantorEmployerPhNumber = valuemap.get("GuarantorEmployerPhNumber").trim();
            }
            if (valuemap.get("GuarantorEmployerAddress") == null) {
                GuarantorEmployerAddress = "";
            } else {
                GuarantorEmployerAddress = valuemap.get("GuarantorEmployerAddress").trim();
            }
            if (valuemap.get("GuarantorEmployerAddress2") == null) {
                GuarantorEmployerAddress2 = "";
            } else {
                GuarantorEmployerAddress2 = valuemap.get("GuarantorEmployerAddress2").trim();
            }
            if (valuemap.get("GuarantorEmployerCity") == null) {
                GuarantorEmployerCity = "";
            } else {
                GuarantorEmployerCity = valuemap.get("GuarantorEmployerCity").trim();
            }
            if (valuemap.get("GuarantorEmployerState") == null) {
                GuarantorEmployerState = "";
            } else {
                GuarantorEmployerState = valuemap.get("GuarantorEmployerState").trim();
            }
            if (valuemap.get("GuarantorEmployerZipCode") == null) {
                GuarantorEmployerZipCode = "";
            } else {
                GuarantorEmployerZipCode = valuemap.get("GuarantorEmployerZipCode").trim();
            }
            if (valuemap.get("WorkersCompPolicyChk") == null) {
                WorkersCompPolicyChk = "0";
            } else {
                WorkersCompPolicyChk = valuemap.get("WorkersCompPolicyChk").trim();
            }
            if (WorkersCompPolicyChk.equals("1")) {
                if (valuemap.get("WCPDateofInjury") == null) {
                    WCPDateofInjury = "0000-00-00";
                } else {
                    WCPDateofInjury = valuemap.get("WCPDateofInjury").trim();
//                    WCPDateofInjury = String.valueOf(String.valueOf(WCPDateofInjury.substring(6, 10))) + "-" + WCPDateofInjury.substring(0, 2) + "-" + WCPDateofInjury.substring(3, 5);
                }
                if (valuemap.get("WCPCaseNo") == null) {
                    WCPCaseNo = "";
                } else {
                    WCPCaseNo = valuemap.get("WCPCaseNo").trim();
                }
                if (valuemap.get("WCPGroupNo") == null) {
                    WCPGroupNo = "";
                } else {
                    WCPGroupNo = valuemap.get("WCPGroupNo").trim();
                }
                if (valuemap.get("WCPMemberId") == null) {
                    WCPMemberId = "";
                } else {
                    WCPMemberId = valuemap.get("WCPMemberId").trim();
                }
                if (valuemap.get("WCPInjuryRelatedAutoMotorAccident") == null) {
                    WCPInjuryRelatedAutoMotorAccident = "0";
                } else {
                    WCPInjuryRelatedAutoMotorAccident = "1";
                }
                if (valuemap.get("WCPInjuryRelatedWorkRelated") == null) {
                    WCPInjuryRelatedWorkRelated = "0";
                } else {
                    WCPInjuryRelatedWorkRelated = "1";
                }
                if (valuemap.get("WCPInjuryRelatedOtherAccident") == null) {
                    WCPInjuryRelatedOtherAccident = "0";
                } else {
                    WCPInjuryRelatedOtherAccident = "1";
                }
                if (valuemap.get("WCPInjuryRelatedNoAccident") == null) {
                    WCPInjuryRelatedNoAccident = "0";
                } else {
                    WCPInjuryRelatedNoAccident = "1";
                }
                if (valuemap.get("WCPInjuryOccurVehicle") == null) {
                    WCPInjuryOccurVehicle = "0";
                } else {
                    WCPInjuryOccurVehicle = "1";
                }
                if (valuemap.get("WCPInjuryOccurWork") == null) {
                    WCPInjuryOccurWork = "0";
                } else {
                    WCPInjuryOccurWork = "1";
                }
                if (valuemap.get("WCPInjuryOccurHome") == null) {
                    WCPInjuryOccurHome = "0";
                } else {
                    WCPInjuryOccurHome = "1";
                }
                if (valuemap.get("WCPInjuryOccurOther") == null) {
                    WCPInjuryOccurOther = "0";
                } else {
                    WCPInjuryOccurOther = "1";
                }
                if (valuemap.get("WCPInjuryDescription") == null) {
                    WCPInjuryDescription = "";
                } else {
                    WCPInjuryDescription = valuemap.get("WCPInjuryDescription").trim();
                }
                if (valuemap.get("WCPHRFirstName") == null) {
                    WCPHRFirstName = "";
                } else {
                    WCPHRFirstName = valuemap.get("WCPHRFirstName").trim();
                }
                if (valuemap.get("WCPHRLastName") == null) {
                    WCPHRLastName = "";
                } else {
                    WCPHRLastName = valuemap.get("WCPHRLastName").trim();
                }
                if (valuemap.get("WCPHRAreaCode") == null) {
                    WCPHRAreaCode = "";
                } else {
                    WCPHRAreaCode = valuemap.get("WCPHRAreaCode").trim();
                }
                if (valuemap.get("WCPHRPhoneNumber") == null) {
                    WCPHRPhoneNumber = "";
                } else {
                    WCPHRPhoneNumber = valuemap.get("WCPHRPhoneNumber").trim();
                }
                if (valuemap.get("WCPHRAddress") == null) {
                    WCPHRAddress = "";
                } else {
                    WCPHRAddress = valuemap.get("WCPHRAddress").trim();
                }
                if (valuemap.get("WCPHRAddress2") == null) {
                    WCPHRAddress2 = "";
                } else {
                    WCPHRAddress2 = valuemap.get("WCPHRAddress2").trim();
                }
                if (valuemap.get("WCPHRCity") == null) {
                    WCPHRCity = "";
                } else {
                    WCPHRCity = valuemap.get("WCPHRCity").trim();
                }
                if (valuemap.get("WCPHRState") == null) {
                    WCPHRState = "";
                } else {
                    WCPHRState = valuemap.get("WCPHRState").trim();
                }
                if (valuemap.get("WCPHRZipCode") == null) {
                    WCPHRZipCode = "";
                } else {
                    WCPHRZipCode = valuemap.get("WCPHRZipCode").trim();
                }
                if (valuemap.get("WCPPlanName") == null) {
                    WCPPlanName = "";
                } else {
                    WCPPlanName = valuemap.get("WCPPlanName").trim();
                }
                if (valuemap.get("WCPCarrierName") == null) {
                    WCPCarrierName = "";
                } else {
                    WCPCarrierName = valuemap.get("WCPCarrierName").trim();
                }
                if (valuemap.get("WCPPayerAreaCode") == null) {
                    WCPPayerAreaCode = "";
                } else {
                    WCPPayerAreaCode = valuemap.get("WCPPayerAreaCode").trim();
                }
                if (valuemap.get("WCPPayerPhoneNumber") == null) {
                    WCPPayerPhoneNumber = "";
                } else {
                    WCPPayerPhoneNumber = valuemap.get("WCPPayerPhoneNumber").trim();
                }
                if (valuemap.get("WCPCarrierAddress") == null) {
                    WCPCarrierAddress = "";
                } else {
                    WCPCarrierAddress = valuemap.get("WCPCarrierAddress").trim();
                }
                if (valuemap.get("WCPCarrierAddress2") == null) {
                    WCPCarrierAddress2 = "";
                } else {
                    WCPCarrierAddress2 = valuemap.get("WCPCarrierAddress2").trim();
                }
                if (valuemap.get("WCPCarrierCity") == null) {
                    WCPCarrierCity = "";
                } else {
                    WCPCarrierCity = valuemap.get("WCPCarrierCity").trim();
                }
                if (valuemap.get("WCPCarrierState") == null) {
                    WCPCarrierState = "";
                } else {
                    WCPCarrierState = valuemap.get("WCPCarrierState").trim();
                }
                if (valuemap.get("WCPCarrierZipCode") == null) {
                    WCPCarrierZipCode = "";
                } else {
                    WCPCarrierZipCode = valuemap.get("WCPCarrierZipCode").trim();
                }
                if (valuemap.get("WCPAdjudicatorFirstName") == null) {
                    WCPAdjudicatorFirstName = "";
                } else {
                    WCPAdjudicatorFirstName = valuemap.get("WCPAdjudicatorFirstName").trim();
                }
                if (valuemap.get("WCPAdjudicatorLastName") == null) {
                    WCPAdjudicatorLastName = "";
                } else {
                    WCPAdjudicatorLastName = valuemap.get("WCPAdjudicatorLastName").trim();
                }
                if (valuemap.get("WCPAdjudicatorAreaCode") == null) {
                    WCPAdjudicatorAreaCode = "";
                } else {
                    WCPAdjudicatorAreaCode = valuemap.get("WCPAdjudicatorAreaCode").trim();
                }
                if (valuemap.get("WCPAdjudicatorPhoneNumber") == null) {
                    WCPAdjudicatorPhoneNumber = "";
                } else {
                    WCPAdjudicatorPhoneNumber = valuemap.get("WCPAdjudicatorPhoneNumber").trim();
                }
                if (valuemap.get("WCPAdjudicatorFaxAreaCode") == null) {
                    WCPAdjudicatorFaxAreaCode = "";
                } else {
                    WCPAdjudicatorFaxAreaCode = valuemap.get("WCPAdjudicatorFaxAreaCode").trim();
                }
                if (valuemap.get("WCPAdjudicatorFaxPhoneNumber") == null) {
                    WCPAdjudicatorFaxPhoneNumber = "";
                } else {
                    WCPAdjudicatorFaxPhoneNumber = valuemap.get("WCPAdjudicatorFaxPhoneNumber").trim();
                }
            }
            if (valuemap.get("MotorVehicleAccidentChk") == null) {
                MotorVehicleAccidentChk = "0";
            } else {
                MotorVehicleAccidentChk = valuemap.get("MotorVehicleAccidentChk").trim();
            }
            if (MotorVehicleAccidentChk.equals("1")) {
                if (valuemap.get("AutoInsuranceInformationChk") == null) {
                    AutoInsuranceInformationChk = "0";
                } else {
                    AutoInsuranceInformationChk = valuemap.get("AutoInsuranceInformationChk").trim();
                }
                if (AutoInsuranceInformationChk.equals("1")) {
                    if (valuemap.get("AIIDateofAccident") == null) {
                        AIIDateofAccident = "0000-00-00";
                    } else {
                        AIIDateofAccident = valuemap.get("AIIDateofAccident").trim();
//                        AIIDateofAccident = String.valueOf(String.valueOf(AIIDateofAccident.substring(6, 10))) + "-" + AIIDateofAccident.substring(0, 2) + "-" + AIIDateofAccident.substring(3, 5);
                    }
                    if (valuemap.get("AIIAutoClaim") == null) {
                        AIIAutoClaim = "";
                    } else {
                        AIIAutoClaim = valuemap.get("AIIAutoClaim").trim();
                    }
                    if (valuemap.get("AIIAccidentLocationAddress") == null) {
                        AIIAccidentLocationAddress = "";
                    } else {
                        AIIAccidentLocationAddress = valuemap.get("AIIAccidentLocationAddress").trim();
                    }
                    if (valuemap.get("AIIAccidentLocationAddress2") == null) {
                        AIIAccidentLocationAddress2 = "";
                    } else {
                        AIIAccidentLocationAddress2 = valuemap.get("AIIAccidentLocationAddress2").trim();
                    }
                    if (valuemap.get("AIIAccidentLocationCity") == null) {
                        AIIAccidentLocationCity = "";
                    } else {
                        AIIAccidentLocationCity = valuemap.get("AIIAccidentLocationCity").trim();
                    }
                    if (valuemap.get("AIIAccidentLocationState") == null) {
                        AIIAccidentLocationState = "";
                    } else {
                        AIIAccidentLocationState = valuemap.get("AIIAccidentLocationState").trim();
                    }
                    if (valuemap.get("AIIAccidentLocationZipCode") == null) {
                        AIIAccidentLocationZipCode = "";
                    } else {
                        AIIAccidentLocationZipCode = valuemap.get("AIIAccidentLocationZipCode").trim();
                    }
                    if (valuemap.get("AIIRoleInAccident") == null) {
                        AIIRoleInAccident = "";
                    } else {
                        AIIRoleInAccident = valuemap.get("AIIRoleInAccident").trim();
                    }
                    if (valuemap.get("AIITypeOfAutoIOnsurancePolicy") == null) {
                        AIITypeOfAutoIOnsurancePolicy = "";
                    } else {
                        AIITypeOfAutoIOnsurancePolicy = valuemap.get("AIITypeOfAutoIOnsurancePolicy").trim();
                    }
                    if (valuemap.get("AIIPrefixforReponsibleParty") == null) {
                        AIIPrefixforReponsibleParty = "";
                    } else {
                        AIIPrefixforReponsibleParty = valuemap.get("AIIPrefixforReponsibleParty").trim();
                    }
                    if (valuemap.get("AIIFirstNameforReponsibleParty") == null) {
                        AIIFirstNameforReponsibleParty = "";
                    } else {
                        AIIFirstNameforReponsibleParty = valuemap.get("AIIFirstNameforReponsibleParty").trim();
                    }
                    if (valuemap.get("AIIMiddleNameforReponsibleParty") == null) {
                        AIIMiddleNameforReponsibleParty = "";
                    } else {
                        AIIMiddleNameforReponsibleParty = valuemap.get("AIIMiddleNameforReponsibleParty").trim();
                    }
                    if (valuemap.get("AIILastNameforReponsibleParty") == null) {
                        AIILastNameforReponsibleParty = "";
                    } else {
                        AIILastNameforReponsibleParty = valuemap.get("AIILastNameforReponsibleParty").trim();
                    }
                    if (valuemap.get("AIISuffixforReponsibleParty") == null) {
                        AIISuffixforReponsibleParty = "";
                    } else {
                        AIISuffixforReponsibleParty = valuemap.get("AIISuffixforReponsibleParty").trim();
                    }
                    if (valuemap.get("AIICarrierResponsibleParty") == null) {
                        AIICarrierResponsibleParty = "";
                    } else {
                        AIICarrierResponsibleParty = valuemap.get("AIICarrierResponsibleParty").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyAddress") == null) {
                        AIICarrierResponsiblePartyAddress = "";
                    } else {
                        AIICarrierResponsiblePartyAddress = valuemap.get("AIICarrierResponsiblePartyAddress").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyAddress2") == null) {
                        AIICarrierResponsiblePartyAddress2 = "";
                    } else {
                        AIICarrierResponsiblePartyAddress2 = valuemap.get("AIICarrierResponsiblePartyAddress2").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyCity") == null) {
                        AIICarrierResponsiblePartyCity = "";
                    } else {
                        AIICarrierResponsiblePartyCity = valuemap.get("AIICarrierResponsiblePartyCity").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyState") == null) {
                        AIICarrierResponsiblePartyState = "";
                    } else {
                        AIICarrierResponsiblePartyState = valuemap.get("AIICarrierResponsiblePartyState").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyZipCode") == null) {
                        AIICarrierResponsiblePartyZipCode = "";
                    } else {
                        AIICarrierResponsiblePartyZipCode = valuemap.get("AIICarrierResponsiblePartyZipCode").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyAreaCode") == null) {
                        AIICarrierResponsiblePartyAreaCode = "";
                    } else {
                        AIICarrierResponsiblePartyAreaCode = valuemap.get("AIICarrierResponsiblePartyAreaCode").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyPhoneNumber") == null) {
                        AIICarrierResponsiblePartyPhoneNumber = "";
                    } else {
                        AIICarrierResponsiblePartyPhoneNumber = valuemap.get("AIICarrierResponsiblePartyPhoneNumber").trim();
                    }
                    if (valuemap.get("AIICarrierResponsiblePartyPolicyNumber") == null) {
                        AIICarrierResponsiblePartyPolicyNumber = "";
                    } else {
                        AIICarrierResponsiblePartyPolicyNumber = valuemap.get("AIICarrierResponsiblePartyPolicyNumber").trim();
                    }
                    if (valuemap.get("AIIResponsiblePartyAutoMakeModel") == null) {
                        AIIResponsiblePartyAutoMakeModel = "";
                    } else {
                        AIIResponsiblePartyAutoMakeModel = valuemap.get("AIIResponsiblePartyAutoMakeModel").trim();
                    }
                    if (valuemap.get("AIIResponsiblePartyLicensePlate") == null) {
                        AIIResponsiblePartyLicensePlate = "";
                    } else {
                        AIIResponsiblePartyLicensePlate = valuemap.get("AIIResponsiblePartyLicensePlate").trim();
                    }
                    if (valuemap.get("AIIFirstNameOfYourPolicyHolder") == null) {
                        AIIFirstNameOfYourPolicyHolder = "";
                    } else {
                        AIIFirstNameOfYourPolicyHolder = valuemap.get("AIIFirstNameOfYourPolicyHolder").trim();
                    }
                    if (valuemap.get("AIILastNameOfYourPolicyHolder") == null) {
                        AIILastNameOfYourPolicyHolder = "";
                    } else {
                        AIILastNameOfYourPolicyHolder = valuemap.get("AIILastNameOfYourPolicyHolder").trim();
                    }
                    if (valuemap.get("AIINameAutoInsuranceOfYourVehicle") == null) {
                        AIINameAutoInsuranceOfYourVehicle = "";
                    } else {
                        AIINameAutoInsuranceOfYourVehicle = valuemap.get("AIINameAutoInsuranceOfYourVehicle").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceAddress") == null) {
                        AIIYourInsuranceAddress = "";
                    } else {
                        AIIYourInsuranceAddress = valuemap.get("AIIYourInsuranceAddress").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceAddress2") == null) {
                        AIIYourInsuranceAddress2 = "";
                    } else {
                        AIIYourInsuranceAddress2 = valuemap.get("AIIYourInsuranceAddress2").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceCity") == null) {
                        AIIYourInsuranceCity = "";
                    } else {
                        AIIYourInsuranceCity = valuemap.get("AIIYourInsuranceCity").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceState") == null) {
                        AIIYourInsuranceState = "";
                    } else {
                        AIIYourInsuranceState = valuemap.get("AIIYourInsuranceState").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceZipCode") == null) {
                        AIIYourInsuranceZipCode = "";
                    } else {
                        AIIYourInsuranceZipCode = valuemap.get("AIIYourInsuranceZipCode").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceAreaCode") == null) {
                        AIIYourInsuranceAreaCode = "";
                    } else {
                        AIIYourInsuranceAreaCode = valuemap.get("AIIYourInsuranceAreaCode").trim();
                    }
                    if (valuemap.get("AIIYourInsurancePhoneNumber") == null) {
                        AIIYourInsurancePhoneNumber = "";
                    } else {
                        AIIYourInsurancePhoneNumber = valuemap.get("AIIYourInsurancePhoneNumber").trim();
                    }
                    if (valuemap.get("AIIYourInsurancePolicyNo") == null) {
                        AIIYourInsurancePolicyNo = "";
                    } else {
                        AIIYourInsurancePolicyNo = valuemap.get("AIIYourInsurancePolicyNo").trim();
                    }
                    if (valuemap.get("AIIYourLicensePlate") == null) {
                        AIIYourLicensePlate = "";
                    } else {
                        AIIYourLicensePlate = valuemap.get("AIIYourLicensePlate").trim();
                    }
                    if (valuemap.get("AIIYourCarMakeModelYear") == null) {
                        AIIYourCarMakeModelYear = "";
                    } else {
                        AIIYourCarMakeModelYear = valuemap.get("AIIYourCarMakeModelYear").trim();
                    }
                } else {
                    if (valuemap.get("AIIResponsiblePartyLicensePlate") == null) {
                        AIIResponsiblePartyLicensePlate = "";
                    } else {
                        AIIResponsiblePartyLicensePlate = valuemap.get("AIIResponsiblePartyLicensePlate").trim();
                    }
                    if (valuemap.get("AIIFirstNameOfYourPolicyHolder") == null) {
                        AIIFirstNameOfYourPolicyHolder = "";
                    } else {
                        AIIFirstNameOfYourPolicyHolder = valuemap.get("AIIFirstNameOfYourPolicyHolder").trim();
                    }
                    if (valuemap.get("AIILastNameOfYourPolicyHolder") == null) {
                        AIILastNameOfYourPolicyHolder = "";
                    } else {
                        AIILastNameOfYourPolicyHolder = valuemap.get("AIILastNameOfYourPolicyHolder").trim();
                    }
                    if (valuemap.get("AIINameAutoInsuranceOfYourVehicle") == null) {
                        AIINameAutoInsuranceOfYourVehicle = "";
                    } else {
                        AIINameAutoInsuranceOfYourVehicle = valuemap.get("AIINameAutoInsuranceOfYourVehicle").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceAddress") == null) {
                        AIIYourInsuranceAddress = "";
                    } else {
                        AIIYourInsuranceAddress = valuemap.get("AIIYourInsuranceAddress").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceAddress2") == null) {
                        AIIYourInsuranceAddress2 = "";
                    } else {
                        AIIYourInsuranceAddress2 = valuemap.get("AIIYourInsuranceAddress2").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceCity") == null) {
                        AIIYourInsuranceCity = "";
                    } else {
                        AIIYourInsuranceCity = valuemap.get("AIIYourInsuranceCity").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceState") == null) {
                        AIIYourInsuranceState = "";
                    } else {
                        AIIYourInsuranceState = valuemap.get("AIIYourInsuranceState").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceZipCode") == null) {
                        AIIYourInsuranceZipCode = "";
                    } else {
                        AIIYourInsuranceZipCode = valuemap.get("AIIYourInsuranceZipCode").trim();
                    }
                    if (valuemap.get("AIIYourInsuranceAreaCode") == null) {
                        AIIYourInsuranceAreaCode = "";
                    } else {
                        AIIYourInsuranceAreaCode = valuemap.get("AIIYourInsuranceAreaCode").trim();
                    }
                    if (valuemap.get("AIIYourInsurancePhoneNumber") == null) {
                        AIIYourInsurancePhoneNumber = "";
                    } else {
                        AIIYourInsurancePhoneNumber = valuemap.get("AIIYourInsurancePhoneNumber").trim();
                    }
                    if (valuemap.get("AIIYourInsurancePolicyNo") == null) {
                        AIIYourInsurancePolicyNo = "";
                    } else {
                        AIIYourInsurancePolicyNo = valuemap.get("AIIYourInsurancePolicyNo").trim();
                    }
                    if (valuemap.get("AIIYourLicensePlate") == null) {
                        AIIYourLicensePlate = "";
                    } else {
                        AIIYourLicensePlate = valuemap.get("AIIYourLicensePlate").trim();
                    }
                    if (valuemap.get("AIIYourCarMakeModelYear") == null) {
                        AIIYourCarMakeModelYear = "";
                    } else {
                        AIIYourCarMakeModelYear = valuemap.get("AIIYourCarMakeModelYear").trim();
                    }
                }
            }
            if (valuemap.get("HealthInsuranceChk") == null) {
                HealthInsuranceChk = "0";
            } else {
                HealthInsuranceChk = valuemap.get("HealthInsuranceChk").trim();
            }
            if (HealthInsuranceChk.equals("1")) {
                if (valuemap.get("GovtFundedInsurancePlanChk") == null) {
                    GovtFundedInsurancePlanChk = "0";
                } else {
                    GovtFundedInsurancePlanChk = valuemap.get("GovtFundedInsurancePlanChk").trim();
                }
                if (GovtFundedInsurancePlanChk.equals("1")) {
                    if (valuemap.get("GFIPMedicare") == null) {
                        GFIPMedicare = "0";
                    } else {
                        GFIPMedicare = "1";
                    }
                    if (valuemap.get("GFIPMedicaid") == null) {
                        GFIPMedicaid = "0";
                    } else {
                        GFIPMedicaid = "1";
                    }
                    if (valuemap.get("GFIPCHIP") == null) {
                        GFIPCHIP = "0";
                    } else {
                        GFIPCHIP = "1";
                    }
                    if (valuemap.get("GFIPTricare") == null) {
                        GFIPTricare = "0";
                    } else {
                        GFIPTricare = "1";
                    }
                    if (valuemap.get("GFIPVHA") == null) {
                        GFIPVHA = "0";
                    } else {
                        GFIPVHA = "1";
                    }
                    if (valuemap.get("GFIPIndianHealth") == null) {
                        GFIPIndianHealth = "0";
                    } else {
                        GFIPIndianHealth = "1";
                    }
                }
                if (valuemap.get("InsuranceSubPatient") == null) {
                    InsuranceSubPatient = "0";
                } else {
                    InsuranceSubPatient = "1";
                }
                if (valuemap.get("InsuranceSubGuarantor") == null) {
                    InsuranceSubGuarantor = "0";
                } else {
                    InsuranceSubGuarantor = "1";
                }
                if (valuemap.get("InsuranceSubOther") == null) {
                    InsuranceSubOther = "0";
                } else {
                    InsuranceSubOther = "1";
                }
                if (valuemap.get("HIPrimaryInsurance") == null) {
                    HIPrimaryInsurance = "";
                } else {
                    HIPrimaryInsurance = valuemap.get("HIPrimaryInsurance").trim();
                }
                if (valuemap.get("HISubscriberFirstName") == null) {
                    HISubscriberFirstName = "";
                } else {
                    HISubscriberFirstName = valuemap.get("HISubscriberFirstName").trim();
                }
                if (valuemap.get("HISubscriberLastName") == null) {
                    HISubscriberLastName = "";
                } else {
                    HISubscriberLastName = valuemap.get("HISubscriberLastName").trim();
                }
                if (valuemap.get("HISubscriberDOB") == null) {
                    HISubscriberDOB = "0000-00-00";
                } else {
                    if (valuemap.get("HISubscriberDOB").length() > 0) {
                        HISubscriberDOB = valuemap.get("HISubscriberDOB").trim();
                        //HISubscriberDOB = String.valueOf(String.valueOf(HISubscriberDOB.substring(6, 10))) + "-" + HISubscriberDOB.substring(0, 2) + "-" + HISubscriberDOB.substring(3, 5);
                    } else {
                        HISubscriberDOB = "0000-00-00";
                    }
                }
                if (valuemap.get("HISubscriberSSN") == null) {
                    HISubscriberSSN = "";
                } else {
                    HISubscriberSSN = valuemap.get("HISubscriberSSN").trim();
                }
                if (valuemap.get("HISubscriberRelationtoPatient") == null) {
                    HISubscriberRelationtoPatient = "";
                } else {
                    HISubscriberRelationtoPatient = valuemap.get("HISubscriberRelationtoPatient").trim();
                }
                if (valuemap.get("HISubscriberGroupNo") == null) {
                    HISubscriberGroupNo = "";
                } else {
                    HISubscriberGroupNo = valuemap.get("HISubscriberGroupNo").trim();
                }
                if (valuemap.get("HISubscriberPolicyNo") == null) {
                    HISubscriberPolicyNo = "";
                } else {
                    HISubscriberPolicyNo = valuemap.get("HISubscriberPolicyNo").trim();
                }
                if (valuemap.get("SecondHealthInsuranceChk") == null) {
                    SecondHealthInsuranceChk = "0";
                } else {
                    SecondHealthInsuranceChk = valuemap.get("SecondHealthInsuranceChk").trim();
                }
                if (SecondHealthInsuranceChk.equals("1")) {
                    if (valuemap.get("SHISecondaryName") == null) {
                        SHISecondaryName = "";
                    } else {
                        SHISecondaryName = valuemap.get("SHISecondaryName").trim();
                    }
                    if (valuemap.get("SHISubscriberFirstName") == null) {
                        SHISubscriberFirstName = "";
                    } else {
                        SHISubscriberFirstName = valuemap.get("SHISubscriberFirstName").trim();
                    }
                    if (valuemap.get("SHISubscriberLastName") == null) {
                        SHISubscriberLastName = "";
                    } else {
                        SHISubscriberLastName = valuemap.get("SHISubscriberLastName").trim();
                    }
                    if (valuemap.get("SHISubscriberDOB") == null) {
                        SHISubscriberDOB = "0000-00-00";
                    } else {
                        if (valuemap.get("SHISubscriberDOB").length() > 0) {
                            SHISubscriberDOB = valuemap.get("SHISubscriberDOB").trim();
                            //SHISubscriberDOB = String.valueOf(String.valueOf(SHISubscriberDOB.substring(6, 10))) + "-" + SHISubscriberDOB.substring(0, 2) + "-" + SHISubscriberDOB.substring(3, 5);
                        } else {
                            SHISubscriberDOB = "0000-00-00";
                        }
                    }
                    if (valuemap.get("SHISubscriberRelationtoPatient") == null) {
                        SHISubscriberRelationtoPatient = "";
                    } else {
                        SHISubscriberRelationtoPatient = valuemap.get("SHISubscriberRelationtoPatient").trim();
                    }
                    if (valuemap.get("SHISubscriberGroupNo") == null) {
                        SHISubscriberGroupNo = "";
                    } else {
                        SHISubscriberGroupNo = valuemap.get("SHISubscriberGroupNo").trim();
                    }
                    if (valuemap.get("SHISubscriberPolicyNo") == null) {
                        SHISubscriberPolicyNo = "";
                    } else {
                        SHISubscriberPolicyNo = valuemap.get("SHISubscriberPolicyNo").trim();
                    }
                }
            }
            if (valuemap.get("MFFirstVisit") == null) {
                MFFirstVisit = "0";
            } else {
                MFFirstVisit = valuemap.get("MFFirstVisit");
            }
            if (valuemap.get("MFReturnPat") == null) {
                MFReturnPat = "0";
            } else {
                MFReturnPat = valuemap.get("MFReturnPat");
            }
            if (valuemap.get("MFInternetFind") == null) {
                MFInternetFind = "0";
            } else {
                MFInternetFind = valuemap.get("MFInternetFind");
            }
            if (valuemap.get("Facebook") == null) {
                Facebook = "0";
            } else {
                Facebook = "1";
            }
            if (valuemap.get("MapSearch") == null) {
                MapSearch = "0";
            } else {
                MapSearch = "1";
            }
            if (valuemap.get("GoogleSearch") == null) {
                GoogleSearch = "0";
            } else {
                GoogleSearch = "1";
            }
            if (valuemap.get("VERWebsite") == null) {
                VERWebsite = "0";
            } else {
                VERWebsite = "1";
            }
            if (valuemap.get("OnlineAdvertisements") == null) {
                OnlineAdvertisements = "0";
            } else {
                OnlineAdvertisements = "1";
            }
            if (valuemap.get("WebsiteAds") == null) {
                WebsiteAds = "0";
            } else {
                WebsiteAds = "1";
            }
            if (valuemap.get("OnlineReviews") == null) {
                OnlineReviews = "0";
            } else {
                OnlineReviews = "1";
            }
            if (valuemap.get("Twitter") == null) {
                Twitter = "0";
            } else {
                Twitter = "1";
            }
            if (valuemap.get("LinkedIn") == null) {
                LinkedIn = "0";
            } else {
                LinkedIn = "1";
            }
            if (valuemap.get("EmailBlast") == null) {
                EmailBlast = "0";
            } else {
                EmailBlast = "1";
            }
            if (valuemap.get("YouTube") == null) {
                YouTube = "0";
            } else {
                YouTube = "1";
            }
            if (valuemap.get("TV") == null) {
                TV = "0";
            } else {
                TV = "1";
            }
            if (valuemap.get("Billboard") == null) {
                Billboard = "0";
            } else {
                Billboard = "1";
            }
            if (valuemap.get("Radio") == null) {
                Radio = "0";
            } else {
                Radio = "1";
            }
            if (valuemap.get("Brochure") == null) {
                Brochure = "0";
            } else {
                Brochure = "1";
            }
            if (valuemap.get("DirectMail") == null) {
                DirectMail = "0";
            } else {
                DirectMail = "1";
            }
            if (valuemap.get("CitizensDeTar") == null) {
                CitizensDeTar = "0";
            } else {
                CitizensDeTar = "1";
            }
            if (valuemap.get("LiveWorkNearby") == null) {
                LiveWorkNearby = "0";
            } else {
                LiveWorkNearby = "1";
            }
            if (valuemap.get("FamilyFriend") == null) {
                FamilyFriend = "0";
            } else {
                FamilyFriend = "1";
            }
            if (valuemap.get("UrgentCare") == null) {
                UrgentCare = "0";
            } else {
                UrgentCare = "1";
            }
            if (valuemap.get("NewspaperMagazine") == null) {
                NewspaperMagazine = "0";
            } else {
                NewspaperMagazine = "1";
            }
            if (valuemap.get("School") == null) {
                School = "0";
            } else {
                School = "1";
            }
            if (valuemap.get("Hotel") == null) {
                Hotel = "0";
            } else {
                Hotel = "1";
            }
            if (valuemap.get("EmployerSentMe") == null) {
                EmployerSentMe = "0";
            } else {
                EmployerSentMe = "1";
            }
            if (valuemap.get("FamilyFriend_text") == null) {
                FamilyFriend_text = "";
            } else {
                FamilyFriend_text = valuemap.get("FamilyFriend_text");
            }
            if (valuemap.get("UrgentCare_text") == null) {
                UrgentCare_text = "";
            } else {
                UrgentCare_text = valuemap.get("UrgentCare_text");
            }
            if (valuemap.get("NewspaperMagazine_text") == null) {
                NewspaperMagazine_text = "";
            } else {
                NewspaperMagazine_text = valuemap.get("NewspaperMagazine_text");
            }
            if (valuemap.get("School_text") == null) {
                School_text = "";
            } else {
                School_text = valuemap.get("School_text");
            }
            if (valuemap.get("Hotel_text") == null) {
                Hotel_text = "";
            } else {
                Hotel_text = valuemap.get("Hotel_text");
            }
            if (valuemap.get("EmployerSentMe_text") == null) {
                EmployerSentMe_text = "";
            } else {
                EmployerSentMe_text = valuemap.get("EmployerSentMe_text");
            }
            if (valuemap.get("MFPhysicianRefChk") == null) {
                MFPhysicianRefChk = "0";
            } else {
                MFPhysicianRefChk = valuemap.get("MFPhysicianRefChk");
            }
            if (valuemap.get("MFPhysician") == null) {
                MFPhysician = "";
            } else {
                MFPhysician = valuemap.get("MFPhysician");
            }
            if (valuemap.get("PatientCell") == null) {
                PatientCell = "";
            } else {
                PatientCell = valuemap.get("PatientCell").trim();
            }
            if (valuemap.get("RecInitial") == null) {
                RecInitial = "";
            } else {
                RecInitial = valuemap.get("RecInitial").trim();
            }
            ps = conn.prepareStatement("Select Date_format(now(),'%Y-%m-%d')");
            rset = ps.executeQuery();
            while (rset.next()) {
                Date = rset.getString(1);
            }
            rset.close();
            ps.close();
            try {

                ps = conn.prepareStatement("Select MRN from " + Database + ".PatientReg order by ID desc limit 1 ");
                rset = ps.executeQuery();
                if (rset.next()) {
                    MRN = rset.getInt(1);
                }
                rset.close();
                ps.close();
                if (String.valueOf(MRN).length() == 0) {
                    MRN = 310001;
                } else if (String.valueOf(MRN).length() == 4) {
                    MRN = 310001;
                } else if (String.valueOf(MRN).length() == 8) {
                    MRN = 310001;
                } else if (MRN == 0) {
                    MRN = 310001;
                } else if (String.valueOf(MRN).length() == 6) {
                    ++MRN;
                }
                if (ClientIndex == 8) {
                    ExtendedMRN = "1008" + MRN;
                } else if (ClientIndex == 9 || ClientIndex == 38) {
                    ExtendedMRN = "1009" + MRN;
                } else if (ClientIndex == 10) {
                    ExtendedMRN = "1010" + MRN;
                } else if (ClientIndex == 11) {
                    ExtendedMRN = "1011" + MRN;
                }
            } catch (Exception ex) {
                helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria PatineReg2 Data get ^^" + facilityName + " ##MES#001)", servletContext, ex, "PatientReg2", "SaveDataVictoria", conn);
                Services.DumException("PatientReg2", "MES#001", request, ex, this.getServletContext());
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                Parser.SetField("Message", "MES#001");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            try {
                if (!Email.equals(ConfirmEmail)) {
                    out.println("<!DOCTYPE html><html><body><p style=\"color:black;\">Please Put Email and Confirm Email Correctly and then Submit</p>");
                    out.println("<br><input type=button class=button name=Back Value=\"  Back  \" onclick=history.back()></body></html>");
                    return;
                }
                if (Age.equals("-1")) {
                    out.println("<!DOCTYPE html><html><body><p style=\"color:black;\">Please Select Date of Birth Correctly with Day, Month, Year and then Submit (AGE Cannot be -1)</p>");
                    out.println("<br><input type=button class=button name=Back Value=\"  Back  \" onclick=history.back()></body></html>");
                    return;
                }
                Email = ConfirmEmail;
                UtilityHelper utilityHelper = new UtilityHelper();
                String ClientIp = utilityHelper.getClientIp(request);
                PreparedStatement MainReceipt = conn.prepareStatement(
                        " INSERT INTO " + Database + ".PatientReg (ClientIndex,FirstName,LastName , MiddleInitial,DOB,Age,Gender ,Email," +
                                "PhNumber ,Address,City ,State,Country,ZipCode,SSN,Occupation ,Employer ,EmpContact, PriCarePhy," +
                                "ReasonVisit,SelfPayChk,CreatedDate,Title, MaritalStatus,CreatedBy, MRN, Status, ExtendedMRN, County," +
                                "sync,RegisterFrom,ViewDate, EnterIP)" +
                                " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?,0,?,?,0,?,NOW(),?) ");
                MainReceipt.setInt(1, ClientIndex);
                MainReceipt.setString(2, FirstName.toUpperCase());
                MainReceipt.setString(3, LastName.toUpperCase());
                MainReceipt.setString(4, MiddleInitial.toUpperCase());
                MainReceipt.setString(5, DOB);
                MainReceipt.setString(6, Age);
                MainReceipt.setString(7, gender.toUpperCase());
                MainReceipt.setString(8, Email);
                MainReceipt.setString(9, String.valueOf(String.valueOf(AreaCode)) + PhNumber);
                MainReceipt.setString(10, String.valueOf(String.valueOf(Address)) + " " + Address2);
                MainReceipt.setString(11, City.toUpperCase());
                MainReceipt.setString(12, State.toUpperCase());
                MainReceipt.setString(13, Country.toUpperCase());
                MainReceipt.setString(14, ZipCode);
                MainReceipt.setString(15, SSN);
                MainReceipt.setString(16, "");
                MainReceipt.setString(17, "");
                MainReceipt.setString(18, "");
                MainReceipt.setString(19, "");
                MainReceipt.setString(20, ReasonVisit);
                MainReceipt.setInt(21, 0);
                MainReceipt.setString(22, Title.toUpperCase());
                MainReceipt.setString(23, MaritalStatus.toUpperCase());
                MainReceipt.setString(24, "Out Patient");
                MainReceipt.setInt(25, MRN);
                MainReceipt.setString(26, ExtendedMRN);
                MainReceipt.setString(27, County.toUpperCase());
                MainReceipt.setString(28, "**Patient Reg2");
                MainReceipt.setString(29, ClientIp);
                MainReceipt.executeUpdate();
                MainReceipt.close();


            } catch (Exception e) {
                helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion PatientReg Table ^^" + facilityName + " ##MES#002****)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                Services.DumException("PatientReg2", "SaveDataVictoriaError 2- Insertion PatientReg Table :", request, e, this.getServletContext());
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                Parser.SetField("Message", "MES#002");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }
            try {
                ps = conn.prepareStatement("Select max(ID) from " + Database + ".PatientReg ");
                rset = ps.executeQuery();
                if (rset.next()) {
                    PatientRegId = rset.getInt(1);
                }
                rset.close();
                ps.close();
            } catch (Exception e) {
                helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria ^^" + facilityName + " ##MES#003)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                Services.DumException("PatientReg2", "SaveDataVictoriaError 3- :", request, e, this.getServletContext());
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                Parser.SetField("Message", "MES#003");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                return;
            }


            try {
                final PreparedStatement MainReceipt = conn.prepareStatement(
                        "INSERT INTO " + Database + ".PatientVisit(MRN,PatientRegId,ReasonVisit,VisitNumber,DoctorId,DateofService," +
                                "CreatedDate,CreatedBy) VALUES (?,?,?,1,NULL,now(),now(),?) ");
                MainReceipt.setInt(1, MRN);
                MainReceipt.setInt(2, PatientRegId);
                MainReceipt.setString(3, ReasonVisit);
                MainReceipt.setString(4, "Out Patient");
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception e) {
                helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion PatientVisit Table ^^" + facilityName + " ##MES#003)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                Services.DumException("PatientReg2", "SaveDataVictoriaError 3.1 Insertion in table PatientVisit- :", request, e, this.getServletContext());
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                Parser.SetField("Message", "MES#004");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                //return;
            }

            try {
                Query = "Select MAX(Id) from " + Database + ".PatientVisit";
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                if (rset.next()) {
                    VisitId = rset.getInt(1);
                }
                rset.close();
                stmt.close();
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            try {
                if (!IDs.equals("")) {
                    ps = conn.prepareStatement("INSERT INTO " + Database + ".PatientDocUpload (UploadDocumentName,FileName,CreatedBy,CreatedDate,Status,VisitIdx,PatientMRN,PatientRegId,PremisisId) VALUES (?,?,'PatientRegForm',NOW(),0,?,?,?,?)");
                    ps.setString(1, "ID Front");
                    ps.setString(2, IDs);
                    ps.setInt(3, VisitId);
                    ps.setInt(4, MRN);
                    ps.setInt(5, PatientRegId);
                    ps.setInt(6, ClientIndex);
                    ps.executeUpdate();
                    ps.close();
                }


                if (!InsuranceIDsF.equals("")) {
                    ps = conn.prepareStatement("INSERT INTO " + Database + ".PatientDocUpload (UploadDocumentName,FileName,CreatedBy,CreatedDate,Status,VisitIdx,PatientMRN,PatientRegId,PremisisId) VALUES (?,?,'PatientRegForm',NOW(),0,?,?,?,?)");
                    ps.setString(1, "Insurance ID Front");
                    ps.setString(2, InsuranceIDsF);
                    ps.setInt(3, VisitId);
                    ps.setInt(4, MRN);
                    ps.setInt(5, PatientRegId);
                    ps.setInt(6, ClientIndex);
                    ps.executeUpdate();
                    ps.close();
                }
                if (!InsuranceIDsB.equals("")) {
                    ps = conn.prepareStatement("INSERT INTO " + Database + ".PatientDocUpload (UploadDocumentName,FileName,CreatedBy,CreatedDate,Status,VisitIdx,PatientMRN,PatientRegId,PremisisId) VALUES (?,?,'PatientRegForm',NOW(),0,?,?,?,?)");
                    ps.setString(1, "Insurance ID Back");
                    ps.setString(2, InsuranceIDsB);
                    ps.setInt(3, VisitId);
                    ps.setInt(4, MRN);
                    ps.setInt(5, PatientRegId);
                    ps.setInt(6, ClientIndex);
                    ps.executeUpdate();
                    ps.close();
                }
            } catch (SQLException e) {
                System.out.println("PatientDocUpload Error ");
                System.out.println(e.getMessage());
            }
            try {
                final PreparedStatement MainReceipt = conn.prepareStatement(" INSERT INTO " + Database + ".PatientReg_Details (PatientRegId,Ethnicity,Race," +
                        " EmployementChk,Employer,Occupation,EmpContact,PrimaryCarePhysicianChk,PriCarePhy,ReasonVisit,PriCarePhyAddress,PriCarePhyCity,PriCarePhyState," +
                        " PriCarePhyZipCode,PatientMinorChk,GuarantorChk,GuarantorEmployer,GuarantorEmployerPhNumber,GuarantorEmployerAddress,GuarantorEmployerCity," +
                        " GuarantorEmployerState,GuarantorEmployerZipCode,CreatedDate,WorkersCompPolicyChk,MotorVehicleAccidentChk,HealthInsuranceChk, SympChkCOVID, " +
                        " DateSympOnset, SympFever, SympCough, SympShortBreath, SympFatigue, SympMuscBodyAches, SympHeadache, SympLossTaste, SympSoreThroat, " +
                        " SympCongestionRunNos, SympNauseaVomit, SympDiarrhea, SympPerPainChest, SympNewConfusion, SympInabWake, SympOthers, SympOthersTxt," +
                        " EmpHealthChk, PregChk,TestForTravel) \n" +
                        " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
                MainReceipt.setInt(1, PatientRegId);
                MainReceipt.setString(2, Ethnicity);
                MainReceipt.setString(3, Race);
                MainReceipt.setInt(4, Integer.parseInt(EmployementChk));
                MainReceipt.setString(5, Employer);
                MainReceipt.setString(6, Occupation);
                MainReceipt.setString(7, EmpContact);
                MainReceipt.setInt(8, Integer.parseInt(PrimaryCarePhysicianChk));
                MainReceipt.setString(9, PriCarePhy);
                MainReceipt.setString(10, ReasonVisit);
                MainReceipt.setString(11, String.valueOf(String.valueOf(PriCarePhyAddress)) + " " + PriCarePhyAddress2);
                MainReceipt.setString(12, PriCarePhyCity);
                MainReceipt.setString(13, PriCarePhyState);
                MainReceipt.setString(14, PriCarePhyZipCode);
                MainReceipt.setInt(15, Integer.parseInt(PatientMinorChk));
                MainReceipt.setString(16, GuarantorChk);
                MainReceipt.setString(17, GuarantorEmployer);
                MainReceipt.setString(18, String.valueOf(String.valueOf(GuarantorEmployerAreaCode)) + GuarantorEmployerPhNumber);
                MainReceipt.setString(19, String.valueOf(String.valueOf(GuarantorEmployerAddress)) + " " + GuarantorEmployerAddress2);
                MainReceipt.setString(20, GuarantorEmployerCity);
                MainReceipt.setString(21, GuarantorEmployerState);
                MainReceipt.setString(22, GuarantorEmployerZipCode);
                MainReceipt.setInt(23, Integer.parseInt(WorkersCompPolicyChk));
                MainReceipt.setInt(24, Integer.parseInt(MotorVehicleAccidentChk));
                MainReceipt.setInt(25, Integer.parseInt(HealthInsuranceChk));
                MainReceipt.setInt(26, Integer.parseInt(SympChkCOVID));
                //MainReceipt.setString(27, DateSympOnset);
                if (!DateSympOnset.equals(""))
                    MainReceipt.setString(27, DateSympOnset);
                else
                    MainReceipt.setNull(27, Types.DATE);
                MainReceipt.setString(28, SympFever);
                MainReceipt.setString(29, SympCough);
                MainReceipt.setString(30, SympShortBreath);
                MainReceipt.setString(31, SympFatigue);
                MainReceipt.setString(32, SympMuscBodyAches);
                MainReceipt.setString(33, SympHeadache);
                MainReceipt.setString(34, SympLossTaste);
                MainReceipt.setString(35, SympLossTaste);
                MainReceipt.setString(36, SympCongestionRunNos);
                MainReceipt.setString(37, SympNauseaVomit);
                MainReceipt.setString(38, SympDiarrhea);
                MainReceipt.setString(39, SympPerPainChest);
                MainReceipt.setString(40, SympNewConfusion);
                MainReceipt.setString(41, SympInabWake);
                MainReceipt.setString(42, SympOthers);
                MainReceipt.setString(43, SympOthersTxt);
                MainReceipt.setString(44, EmpHealthChk);
                MainReceipt.setString(45, PregChk);
                MainReceipt.setString(46, TestForTravel);
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception e) {
                helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion PatientReg_Details Table ^^" + facilityName + " ##MES#004)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                Parser.SetField("Message", "MES#005");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                Services.DumException("PatientReg2", "SaveDataVictoriaError 4- Insertion PatientReg_Details Table :", request, e, this.getServletContext());
                //return;
            }
            if (WorkersCompPolicyChk.equals("1")) {
                try {
                    final PreparedStatement MainReceipt = conn.prepareStatement(
                            " INSERT INTO " + Database + ".Patient_WorkCompPolicy (PatientRegId,WCPDateofInjury,WCPCaseNo," +
                                    "WCPGroupNo,WCPMemberId,WCPInjuryRelatedAutoMotorAccident,WCPInjuryRelatedWorkRelated," +
                                    "WCPInjuryRelatedOtherAccident,WCPInjuryRelatedNoAccident,WCPInjuryOccurVehicle," +
                                    "WCPInjuryOccurWork,WCPInjuryOccurHome,WCPInjuryOccurOther,WCPInjuryDescription," +
                                    "WCPHRFirstName,WCPHRLastName,WCPHRPhoneNumber,WCPHRAddress,WCPHRCity,WCPHRState," +
                                    "WCPHRZipCode,WCPPlanName,WCPCarrierName,WCPPayerPhoneNumber,WCPCarrierAddress," +
                                    "WCPCarrierCity,WCPCarrierState,WCPCarrierZipCode,WCPAdjudicatorFirstName," +
                                    "WCPAdjudicatorLastName,WCPAdjudicatorPhoneNumber,WCPAdjudicatorFaxPhoneNumber,CreatedDate)" +
                                    " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now()) ");
                    MainReceipt.setInt(1, PatientRegId);
                    //MainReceipt.setString(2, WCPDateofInjury);
                    if (!WCPDateofInjury.equals(""))
                        MainReceipt.setString(2, WCPDateofInjury);
                    else
                        MainReceipt.setNull(2, Types.DATE);
                    MainReceipt.setString(3, WCPCaseNo);
                    MainReceipt.setString(4, WCPGroupNo);
                    MainReceipt.setString(5, WCPMemberId);
                    MainReceipt.setString(6, WCPInjuryRelatedAutoMotorAccident);
                    MainReceipt.setString(7, WCPInjuryRelatedWorkRelated);
                    MainReceipt.setString(8, WCPInjuryRelatedOtherAccident);
                    MainReceipt.setString(9, WCPInjuryRelatedNoAccident);
                    MainReceipt.setString(10, WCPInjuryOccurVehicle);
                    MainReceipt.setString(11, WCPInjuryOccurWork);
                    MainReceipt.setString(12, WCPInjuryOccurHome);
                    MainReceipt.setString(13, WCPInjuryOccurOther);
                    MainReceipt.setString(14, WCPInjuryDescription);
                    MainReceipt.setString(15, WCPHRFirstName);
                    MainReceipt.setString(16, WCPHRLastName);
                    MainReceipt.setString(17, String.valueOf(String.valueOf(WCPHRAreaCode)) + WCPHRPhoneNumber);
                    MainReceipt.setString(18, String.valueOf(String.valueOf(WCPHRAddress)) + " " + WCPHRAddress2);
                    MainReceipt.setString(19, WCPHRCity);
                    MainReceipt.setString(20, WCPHRState);
                    MainReceipt.setString(21, WCPHRZipCode);
                    MainReceipt.setString(22, WCPPlanName);
                    MainReceipt.setString(23, WCPCarrierName);
                    MainReceipt.setString(24, String.valueOf(String.valueOf(WCPPayerAreaCode)) + WCPPayerPhoneNumber);
                    MainReceipt.setString(25, String.valueOf(String.valueOf(WCPCarrierAddress)) + " " + WCPCarrierAddress2);
                    MainReceipt.setString(26, WCPCarrierCity);
                    MainReceipt.setString(27, WCPCarrierState);
                    MainReceipt.setString(28, WCPCarrierZipCode);
                    MainReceipt.setString(29, WCPAdjudicatorFirstName);
                    MainReceipt.setString(30, WCPAdjudicatorLastName);
                    MainReceipt.setString(31, String.valueOf(String.valueOf(WCPAdjudicatorAreaCode)) + WCPAdjudicatorPhoneNumber);
                    MainReceipt.setString(32, String.valueOf(String.valueOf(WCPAdjudicatorFaxAreaCode)) + WCPAdjudicatorFaxPhoneNumber);
                    MainReceipt.executeUpdate();
                    MainReceipt.close();
                } catch (Exception e) {
                    helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion Patient_WorkCompPolicy Table ^^" + facilityName + " ##MES#005)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                    Services.DumException("PatientReg2", "SaveDataVictoriaError 5- Insertion Patient_WorkCompPolicy Table :", request, e, this.getServletContext());
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("FormName", "PatientReg2");
                    Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                    Parser.SetField("Message", "MES#006");
                    Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
                    //return;
                }
            }
            if (MotorVehicleAccidentChk.equals("1")) {
                try {
                    final PreparedStatement MainReceipt = conn.prepareStatement(
                            "INSERT INTO " + Database + ".Patient_AutoInsuranceInfo (PatientRegId,AutoInsuranceInformationChk," +
                                    "AIIDateofAccident,AIIAutoClaim,AIIAccidentLocationAddress,AIIAccidentLocationCity," +
                                    "AIIAccidentLocationState,AIIAccidentLocationZipCode,AIIRoleInAccident," +
                                    "AIITypeOfAutoIOnsurancePolicy,AIIPrefixforReponsibleParty,AIIFirstNameforReponsibleParty," +
                                    "AIIMiddleNameforReponsibleParty,AIILastNameforReponsibleParty,AIISuffixforReponsibleParty," +
                                    "AIICarrierResponsibleParty,AIICarrierResponsiblePartyAddress,AIICarrierResponsiblePartyCity," +
                                    "AIICarrierResponsiblePartyState,AIICarrierResponsiblePartyZipCode," +
                                    "AIICarrierResponsiblePartyPhoneNumber,AIICarrierResponsiblePartyPolicyNumber," +
                                    "AIIResponsiblePartyAutoMakeModel,AIIResponsiblePartyLicensePlate," +
                                    "AIIFirstNameOfYourPolicyHolder,AIILastNameOfYourPolicyHolder," +
                                    "AIINameAutoInsuranceOfYourVehicle,AIIYourInsuranceAddress,AIIYourInsuranceCity," +
                                    "AIIYourInsuranceState,AIIYourInsuranceZipCode,AIIYourInsurancePhoneNumber," +
                                    "AIIYourInsurancePolicyNo,AIIYourLicensePlate,AIIYourCarMakeModelYear,CreatedDate) " +
                                    "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now()) ");
                    MainReceipt.setInt(1, PatientRegId);
                    MainReceipt.setInt(2, Integer.parseInt(AutoInsuranceInformationChk));
                    //MainReceipt.setString(3, AIIDateofAccident);
                    if (!AIIDateofAccident.equals(""))
                        MainReceipt.setString(3, AIIDateofAccident);
                    else
                        MainReceipt.setNull(3, Types.DATE);
                    MainReceipt.setString(4, AIIAutoClaim);
                    MainReceipt.setString(5, AIIAccidentLocationAddress + " " + AIIAccidentLocationAddress2);
                    MainReceipt.setString(6, AIIAccidentLocationCity);
                    MainReceipt.setString(7, AIIAccidentLocationState);
                    MainReceipt.setString(8, AIIAccidentLocationZipCode);
                    MainReceipt.setString(9, AIIRoleInAccident);
                    MainReceipt.setString(10, AIITypeOfAutoIOnsurancePolicy);
                    MainReceipt.setString(11, AIIPrefixforReponsibleParty);
                    MainReceipt.setString(12, AIIFirstNameforReponsibleParty);
                    MainReceipt.setString(13, AIIMiddleNameforReponsibleParty);
                    MainReceipt.setString(14, AIILastNameforReponsibleParty);
                    MainReceipt.setString(15, AIISuffixforReponsibleParty);
                    MainReceipt.setString(16, AIICarrierResponsibleParty);
                    MainReceipt.setString(17, AIICarrierResponsiblePartyAddress + " " + AIICarrierResponsiblePartyAddress2);
                    MainReceipt.setString(18, AIICarrierResponsiblePartyCity);
                    MainReceipt.setString(19, AIICarrierResponsiblePartyState);
                    MainReceipt.setString(20, AIICarrierResponsiblePartyZipCode);
                    MainReceipt.setString(21, String.valueOf(String.valueOf(AIICarrierResponsiblePartyAreaCode)) + AIICarrierResponsiblePartyPhoneNumber);
                    MainReceipt.setString(22, AIICarrierResponsiblePartyPolicyNumber);
                    MainReceipt.setString(23, AIIResponsiblePartyAutoMakeModel);
                    MainReceipt.setString(24, AIIResponsiblePartyLicensePlate);
                    MainReceipt.setString(25, AIIFirstNameOfYourPolicyHolder);
                    MainReceipt.setString(26, AIILastNameOfYourPolicyHolder);
                    MainReceipt.setString(27, AIINameAutoInsuranceOfYourVehicle);
                    MainReceipt.setString(28, String.valueOf(String.valueOf(AIIYourInsuranceAddress)) + " " + AIIYourInsuranceAddress2);
                    MainReceipt.setString(29, AIIYourInsuranceCity);
                    MainReceipt.setString(30, AIIYourInsuranceState);
                    MainReceipt.setString(31, AIIYourInsuranceZipCode);
                    MainReceipt.setString(32, String.valueOf(String.valueOf(AIIYourInsuranceAreaCode)) + AIIYourInsurancePhoneNumber);
                    MainReceipt.setString(33, AIIYourInsurancePolicyNo);
                    MainReceipt.setString(34, AIIYourLicensePlate);
                    MainReceipt.setString(35, AIIYourCarMakeModelYear);
                    MainReceipt.executeUpdate();
                    MainReceipt.close();
                } catch (Exception e) {
                    helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion Patient_AutoInsuranceInfo Table ^^" + facilityName + " ##MES#006)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                    Services.DumException("PatientReg2", "SaveDataVictoriaError 6- Insertion Patient_AutoInsuranceInfo Table :", request, e, this.getServletContext());
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("FormName", "PatientReg2");
                    Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                    Parser.SetField("Message", "MES#007");
                    Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
//                    return;
                }
            }
            if (HealthInsuranceChk.equals("1")) {
                try {
                    final PreparedStatement MainReceipt = conn.prepareStatement(" INSERT INTO " + Database + ".Patient_HealthInsuranceInfo (PatientRegId,GovtFundedInsurancePlanChk,GFIPMedicare,GFIPMedicaid,GFIPCHIP,GFIPTricare,GFIPVHA,GFIPIndianHealth,InsuranceSubPatient,InsuranceSubGuarantor,InsuranceSubOther,HIPrimaryInsurance,HISubscriberFirstName,HISubscriberLastName,HISubscriberDOB,HISubscriberSSN,HISubscriberRelationtoPatient,HISubscriberGroupNo,HISubscriberPolicyNo,SecondHealthInsuranceChk,SHISecondaryName,SHISubscriberFirstName,SHISubscriberLastName,SHISubscriberRelationtoPatient,SHISubscriberGroupNo,SHISubscriberPolicyNo,CreatedDate) \n VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now()) ");
                    MainReceipt.setInt(1, PatientRegId);
                    MainReceipt.setInt(2, Integer.parseInt(GovtFundedInsurancePlanChk));
                    MainReceipt.setInt(3, Integer.parseInt(GFIPMedicare));
                    MainReceipt.setInt(4, Integer.parseInt(GFIPMedicaid));
                    MainReceipt.setInt(5, Integer.parseInt(GFIPCHIP));
                    MainReceipt.setInt(6, Integer.parseInt(GFIPTricare));
                    MainReceipt.setInt(7, Integer.parseInt(GFIPVHA));
                    MainReceipt.setInt(8, Integer.parseInt(GFIPIndianHealth));
                    MainReceipt.setString(9, InsuranceSubPatient.toUpperCase());
                    MainReceipt.setString(10, InsuranceSubGuarantor.toUpperCase());
                    MainReceipt.setString(11, InsuranceSubOther.toUpperCase());
                    MainReceipt.setString(12, HIPrimaryInsurance.toUpperCase());
                    MainReceipt.setString(13, HISubscriberFirstName.toUpperCase());
                    MainReceipt.setString(14, HISubscriberLastName.toUpperCase());
                    MainReceipt.setString(15, HISubscriberDOB);
                    MainReceipt.setString(16, HISubscriberSSN);
                    MainReceipt.setString(17, HISubscriberRelationtoPatient.toUpperCase());
                    MainReceipt.setString(18, HISubscriberGroupNo);
                    MainReceipt.setString(19, HISubscriberPolicyNo);
                    MainReceipt.setInt(20, Integer.parseInt(SecondHealthInsuranceChk));
                    MainReceipt.setString(21, SHISecondaryName.toUpperCase());
                    MainReceipt.setString(22, SHISubscriberFirstName.toUpperCase());
                    MainReceipt.setString(23, SHISubscriberLastName.toUpperCase());
                    MainReceipt.setString(24, SHISubscriberRelationtoPatient.toUpperCase());
                    MainReceipt.setString(25, SHISubscriberGroupNo);
                    MainReceipt.setString(26, SHISubscriberPolicyNo);
                    MainReceipt.executeUpdate();
                    MainReceipt.close();
                } catch (Exception e) {
                    helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion Patient_HealthInsuranceInfo Table ^^" + facilityName + " ##MES#007)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                    Services.DumException("PatientReg2", "SaveDataVictoriaError 7- Insertion Patient_HealthInsuranceInfo Table", request, e, this.getServletContext());
                    Parsehtm Parser = new Parsehtm(request);
                    Parser.SetField("FormName", "PatientReg2");
                    Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                    Parser.SetField("Message", "MES#008");
                    Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
//                    return;
                }
            }
            try {
                final PreparedStatement MainReceipt = conn.prepareStatement(" INSERT INTO " + Database + ".MarketingInfo (PatientRegId," +
                        " MFFirstVisit,MFReturnPat,MFInternetFind,Facebook,MapSearch,GoogleSearch,VERWebsite,OnlineAdvertisements,OnlineReviews," +
                        " Twitter,LinkedIn,EmailBlast,YouTube,TV,Billboard,Radio,Brochure,DirectMail,CitizensDeTar,LiveWorkNearby,FamilyFriend," +
                        " FamilyFriend_text,UrgentCare,UrgentCare_text,NewspaperMagazine,NewspaperMagazine_text,School,School_text," +
                        " Hotel,Hotel_text,MFPhysician,CreatedDate,EmployerSentMe,EmployerSentMe_text,MFPhysicianRefChk,PatientCell,RecInitial,WebsiteAds) \n " +
                        " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?,?,?) ");
                MainReceipt.setInt(1, PatientRegId);
                MainReceipt.setInt(2, Integer.parseInt(MFFirstVisit));
                MainReceipt.setInt(3, Integer.parseInt(MFReturnPat));
                MainReceipt.setInt(4, Integer.parseInt(MFInternetFind));
                MainReceipt.setString(5, Facebook);
                MainReceipt.setString(6, MapSearch);
                MainReceipt.setString(7, GoogleSearch);
                MainReceipt.setString(8, VERWebsite);
                MainReceipt.setString(9, OnlineAdvertisements);
                MainReceipt.setString(10, OnlineReviews);
                MainReceipt.setString(11, Twitter);
                MainReceipt.setString(12, LinkedIn);
                MainReceipt.setString(13, EmailBlast);
                MainReceipt.setString(14, YouTube);
                MainReceipt.setString(15, TV);
                MainReceipt.setString(16, Billboard);
                MainReceipt.setString(17, Radio);
                MainReceipt.setString(18, Brochure);
                MainReceipt.setString(19, DirectMail);
                MainReceipt.setString(20, CitizensDeTar);
                MainReceipt.setString(21, LiveWorkNearby);
                MainReceipt.setString(22, FamilyFriend);
                MainReceipt.setString(23, FamilyFriend_text);
                MainReceipt.setString(24, UrgentCare);
                MainReceipt.setString(25, UrgentCare_text);
                MainReceipt.setString(26, NewspaperMagazine);
                MainReceipt.setString(27, NewspaperMagazine_text);
                MainReceipt.setString(28, School);
                MainReceipt.setString(29, School_text);
                MainReceipt.setString(30, Hotel);
                MainReceipt.setString(31, Hotel_text);
                MainReceipt.setString(32, MFPhysician);
                MainReceipt.setString(33, EmployerSentMe);
                MainReceipt.setString(34, EmployerSentMe_text);
                MainReceipt.setString(35, MFPhysicianRefChk);
                MainReceipt.setString(36, PatientCell);
                MainReceipt.setString(37, RecInitial);
                MainReceipt.setString(38, WebsiteAds);
                MainReceipt.executeUpdate();
                MainReceipt.close();
            } catch (Exception e) {
                helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Insertion MarketingInfo Table ^^" + facilityName + " ##MES#008)", servletContext, e, "PatientReg2", "SaveDataVictoria", conn);
                Services.DumException("PatientReg2", "SaveDataVictoriaError 8- Insertion MarketingInfo Table", request, e, this.getServletContext());
                Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("FormName", "PatientReg2");
                Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
                Parser.SetField("Message", "MES#009");
                Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
//                return;
            }
            String PatientName = null;
            Query = "Select CONCAT(IFNULL(Title,''), ' ' , IFNULL(FirstName,''), ' ', IFNULL(MiddleInitial,''), ' ', IFNULL(LastName,'')) from " + Database + ".PatientReg where ID = " + PatientRegId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                PatientName = rset.getString(1);
            }
            rset.close();
            stmt.close();
            String Message = "";
            String CDCFlag = "0";
            String InsertCOVIDRegReply = "0";
            if (ClientIndex == 9 && ReasonVisit != null) {
                ReasonVisit = ReasonVisit.replaceAll(" ", "");
                if (ReasonVisit.toUpperCase().equals("COVIDTESTING")) {
                    InsertCOVIDRegReply = InsertCOVIDReg(request, response, out, conn, String.valueOf(PatientRegId));
                    if (Integer.parseInt(InsertCOVIDRegReply) > 0) {
                        Message = "and COVID Form Also Registered Successfully.";
                        CDCFlag = "1";
                    } else {
                        Message = "and COVID Form Not Registered. ";
                        CDCFlag = "0";
                    }
                }
                Query = "Update victoria.PatientVisit set CDCFlag = '" + CDCFlag + "' where Id = " + VisitId;
                stmt = conn.createStatement();
                stmt.executeUpdate(Query);
                stmt.close();
            }
            if (ClientId.equals("9")) {
                String temp = SaveBundle_Victoria(request, out, conn, response, Database, ClientIndex, DirectoryName, PatientRegId, "REGISTRATION");
//                System.out.println("temp " + temp);
//                .print();
                String[] arr = temp.split("~");
                String FileName = arr[2];
                String outputFilePath = arr[1];
                String pageCount = arr[0];
                Parsehtm Parser = new Parsehtm(request);
//                Parser.SetField("Message", "Thank You " + String.valueOf(PatientName) + " We Have Registered You Successfully " + Message + ". Please walk to the front door and Press the buzzer.  DATED: " + Date);
                Parser.SetField("Message", "Thank You " + String.valueOf(PatientName) + " We Have Registered You Successfully " + Message + ". Please wait for further processing.  DATED: " + Date);
                Parser.SetField("MRN", "MRN: " + MRN);
                Parser.SetField("FormName", "PatientReg");
                Parser.SetField("ActionID", "GetValues&ClientIndex=" + ClientIndex);
                Parser.SetField("pageCount", String.valueOf(pageCount));
                Parser.SetField("FileName", String.valueOf(FileName));
                Parser.SetField("PatientRegId", String.valueOf(PatientRegId));
                Parser.SetField("outputFilePath", String.valueOf(outputFilePath));
                Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
//                System.out.println("*****rqtype -> " + rqtype);
                Parser.SetField("rqtype", rqtype);
                Parser.GenerateHtml(out, String.valueOf(Services.GetHtmlPath(getServletContext())) + "Exception/MessageVictoria.html");
            } else {
                final Parsehtm Parser = new Parsehtm(request);
                Parser.SetField("Message", "Thank You " + String.valueOf(PatientName) + " We Have Registered You Successfully " + Message + ". Please walk to the front door and Press the buzzer.  DATED: " + Date);
                Parser.SetField("FormName", String.valueOf("PatientReg2"));
                Parser.SetField("MRN", String.valueOf("MRN: " + MRN));
                Parser.SetField("ActionID", String.valueOf("Victoria_2&ClientId=" + ClientId));
                Parser.SetField("ClientId", String.valueOf(ClientId));
                Parser.GenerateHtml(out, String.valueOf(String.valueOf(Services.GetHtmlPath(servletContext))) + "Exception/Message.html");
            }

        } catch (Exception e2) {
            helper.SendEmailWithAttachment("Error in PatientReg2 ** (SaveDataVictoria Main Catch ^^" + facilityName + " ##MES#010)", servletContext, e2, "PatientReg2", "SaveDataVictoria", conn);
            Services.DumException("PatientReg2", "SaveDataVictoria -- " + Query + " ", request, e2, this.getServletContext());
            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("FormName", "PatientReg2");
            Parser.SetField("ActionID", "Victoria_2&ClientId=" + ClientIndex + "");
            Parser.SetField("Message", "MES#010");
            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Exception/ExceptionMessage.html");
        }
    }


    private Dictionary doUpload(HttpServletRequest request, HttpServletResponse response, PrintWriter out) throws Exception {
        try {
            UUID uuid = UUID.randomUUID();
            String boundary = request.getHeader("Content-Type");
            int pos = boundary.indexOf('=');
            boundary = boundary.substring(pos + 1);
            boundary = "--" + boundary;
            byte[] bytes = new byte[512];
            int state = 0;
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            String name = null;
            String value = null;
            String filename = null;
            String contentType = null;
            Dictionary<Object, Object> fields = new Hashtable<>();
            ServletInputStream in = request.getInputStream();
            int i = in.readLine(bytes, 0, 512);
            for (; -1 != i; i = in.readLine(bytes, 0, 512)) {
                String st = new String(bytes, 0, i);
                if (st.startsWith(boundary)) {
                    state = 0;
                    if (name != null) {

//                        System.out.println("NAME *** " + name);
//                        System.out.println("filename *** " + filename);

                        if (value != null) {
                            fields.put(name, value.substring(0, value.length() - 2));
                        } else if (buffer.size() > 2) {
                            uuid = UUID.randomUUID();
                            filename = filename.replaceAll("\\s+", "");
                            fields.put(name + uuid + filename, buffer);
                        }
                        name = null;
                        value = null;
                        filename = null;
                        contentType = null;
                        buffer = new ByteArrayOutputStream();
                    }
                } else if (st.startsWith("Content-Disposition: form-data") && state == 0) {
                    StringTokenizer tokenizer = new StringTokenizer(st, ";=\"");
                    while (tokenizer.hasMoreTokens()) {
                        String token = tokenizer.nextToken();
                        if (token.startsWith(" name")) {
                            name = tokenizer.nextToken();
                            state = 2;
                            continue;
                        }
                        if (token.startsWith(" filename")) {
                            filename = tokenizer.nextToken();
                            StringTokenizer ftokenizer = new StringTokenizer(filename, "\\/:");
                            filename = ftokenizer.nextToken();
                            while (ftokenizer.hasMoreTokens())
                                filename = ftokenizer.nextToken();
                            state = 1;
                            break;
                        }
                    }
                } else if (st.startsWith("Content-Type") && state == 1) {
                    pos = st.indexOf(":");
                    st.substring(pos + 2, st.length() - 2);
                } else if (st.equals("\r\n") && state == 1) {
                    state = 3;
                } else if (st.equals("\r\n") && state == 2) {
                    state = 4;
                } else if (state == 4) {
                    value = String.valueOf(String.valueOf(value)) + st;
                } else if (state == 3) {
                    buffer.write(bytes, 0, i);
                }
            }
            return fields;
        } catch (Exception var20) {
            System.out.println("Error in Do Upload!!");
            String str = "";
            for (int i = 0; i < (var20.getStackTrace()).length; i++)
                str = str + var20.getStackTrace()[i] + "<br>";
            System.out.println(str);
            throw new Exception("Error In Do Upload " + var20.getMessage());
        }
    }

    private String InsertCOVIDReg(final HttpServletRequest request, final HttpServletResponse response, final PrintWriter out, final Connection conn, final String PatientRegId) throws JsonProcessingException {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        String Request = "";
        final HashMap<String, Object> responseJSON = new HashMap<String, Object>();
        final ObjectMapper jsonMapper = new ObjectMapper();
        String FirstName = "";
        String MiddleInitial = "";
        String LastName = "";
        String Email = "";
        String PhNumber = "";
        String DOB = "";
        String Gender = "";
        String Ethnicity = "";
        String Race = "";
        String City = "";
        String Address = "";
        String State = "";
        String ZipCode = "";
        String County = "";
        String reply = "";
        try {
            Query = "Select IFNULL(FirstName,''), IFNULL(MiddleInitial,''), IFNULL(LastName,'')," +
                    " IFNULL(Email, ''), IFNULL(PhNumber,0),  IFNULL(DOB,'0000-00-00'), " +
                    "IFNULL(Gender,'M'), IFNULL(City,''),IFNULL(Address,''), IFNULL(State,'TX')," +
                    " IFNULL(ZipCode,''), IFNULL(County,'')  " +
                    "from victoria.PatientReg where ID = " + PatientRegId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                FirstName = rset.getString(1).trim();
                MiddleInitial = rset.getString(2).trim();
                LastName = rset.getString(3).trim();
                Email = rset.getString(4).trim();
                PhNumber = rset.getString(5).trim();
                DOB = rset.getString(6).trim();
                Gender = rset.getString(7).trim();
                City = rset.getString(8).trim();
                Address = rset.getString(9).trim();
                State = rset.getString(10).trim();
                ZipCode = rset.getString(11).trim();
                County = rset.getString(12);
            }
            rset.close();
            stmt.close();
        } catch (Exception e) {
            Services.DumException("PatientReg2", "InsertCOVIDRegError in Getting Data from PatientReg table", request, e, this.getServletContext());
        }
        try {
            Query = "Select IFNULL(Ethnicity,''), IFNULL(Race,'') from victoria.PatientReg_Details where PatientRegId = " + PatientRegId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                Ethnicity = rset.getString(1);
                Race = rset.getString(2);
            }
            rset.close();
            stmt.close();
        } catch (Exception e) {
            Services.DumException("PatientReg2", "InsertCOVIDRegError in Getting Data from PatientReg_Details table", request, e, this.getServletContext());
        }
        if (Gender.toUpperCase().equals("MALE")) {
            Gender = "M";
        } else {
            Gender = "F";
        }
        if (Ethnicity.equals("1")) {
            Ethnicity = "H";
        } else if (Ethnicity.equals("2")) {
            Ethnicity = "NH";
        } else if (Ethnicity.equals("3")) {
            Ethnicity = "U";
        } else {
            Ethnicity = "U";
        }
        if (Race.equals("1")) {
            Race = "A";
        } else if (Race.equals("2")) {
            Race = "B";
        } else if (Race.equals("3")) {
            Race = "W";
        } else if (Race.equals("4")) {
            Race = "O";
        } else if (Race.equals("5")) {
            Race = "U";
        } else {
            Race = "U";
        }
        if (MiddleInitial.length() > 1) {
            MiddleInitial = MiddleInitial.substring(0, 1);
        }
        if (PhNumber.contains("-")) {
            PhNumber = PhNumber.replaceAll("-", "");
        }
        if (PhNumber.length() < 10) {
            PhNumber += "0";
        }
        try {
            responseJSON.put("FirstName", FirstName);
            responseJSON.put("MiddleName", MiddleInitial);
            responseJSON.put("LastName", LastName);
            responseJSON.put("Email", Email);
            responseJSON.put("ConfirmEmail", Email);
            responseJSON.put("Mobile", PhNumber);
            responseJSON.put("DOB", DOB);
            responseJSON.put("Sex", Gender);
            responseJSON.put("Ethnicity", Ethnicity);
            responseJSON.put("Race", Race);
            responseJSON.put("City", City);
            responseJSON.put("County", County);
            responseJSON.put("Street", Address);
            responseJSON.put("StateCode", State);
            responseJSON.put("IsValidDOB", true);
            responseJSON.put("Zipcode", ZipCode);
            Request = jsonMapper.writerWithDefaultPrettyPrinter().writeValueAsString((Object) responseJSON);
//            System.out.println("Request: " + Request);
            final String BaseURL = "https://victoriacovid.com/api/CovidPatient/CreatePatient/?UserId=1";
            final String Mask = "";
            final URL url = new URL("https://victoriacovid.com/api/CovidPatient/CreatePatient/?UserId=1");
            final URLConnection uc = url.openConnection();
            uc.setReadTimeout(15000);
            uc.setConnectTimeout(17000);
            uc.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            uc.setRequestProperty("Accept", "application/json");
            uc.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)");
            uc.setAllowUserInteraction(false);
            uc.setDoOutput(true);
            final OutputStream os = uc.getOutputStream();
            os.write(Request.getBytes("UTF-8"));
            os.close();
            uc.connect();
            final InputStream is = uc.getInputStream();
            final int size = is.available();
            final byte[] response2 = new byte[size];
            is.read(response2);
            reply = new String(response2);
            reply = reply.trim();
//            System.out.println("Reply: " + reply);
        } catch (Exception e) {
            final String Message = "0";
            Services.DumException("PatientReg2", "InsertCOVIDReg 0", request, e, this.getServletContext());
            return "0";
        }
        return reply;
    }

    public String SaveBundle_Victoria(final HttpServletRequest request, final PrintWriter out, final Connection conn, final HttpServletResponse response, final String Database, final int ClientId, final String DirectoryName, int patientRegId, String SignedFrom) {
        Statement stmt = null;
        ResultSet rset = null;
        String Query = "";
        int PatientRegId = 0;
        String DateTime = "";
        String Date = "";
        String Time = "";
        MergePdf mergePdf = new MergePdf();
        int ID = patientRegId;//Integer.parseInt(request.getParameter("ID").trim());
        String Path1 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/";
        String Path2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/";
        String ResultPdf = "";
        String Title = "";
        String FirstName = "";
        String LastName = "";
        String MiddleInitial = "";
        String DOB = "";
        String Age = "";
        String gender = "";
        String Email = "";
        String ConfirmEmail = "";
        String MaritalStatus = "";
        String AreaCode = "";
        String PhNumber = "";
        String Address = "";
        String Address2 = "";
        String City = "";
        String State = "";
        String ZipCode = "";
        String Ethnicity = "";
        String Ethnicity_OthersText = "";
        String SSN = "";
        String EmployementChk = "";
        String Employer = "";
        String Occupation = "";
        String EmpContact = "";
        String PrimaryCarePhysicianChk = "";
        String PriCarePhy = "";
        String ReasonVisit = "";
        String PriCarePhyAddress = "";
        String PriCarePhyAddress2 = "";
        String PriCarePhyCity = "";
        String PriCarePhyState = "";
        String PriCarePhyZipCode = "";
        String PatientMinorChk = "";
        String MFFirstVisit = "";
        String MFReturnPat = "";
        String MFInternetFind = "";
        String Facebook = "";
        String MapSearch = "";
        String GoogleSearch = "";
        String VERWebsite = "";
        String WebsiteAds = "";
        String OnlineReviews = "";
        String Twitter = "";
        String LinkedIn = "";
        String EmailBlast = "";
        String YouTube = "";
        String TV = "";
        String Billboard = "";
        String Radio = "";
        String Brochure = "";
        String DirectMail = "";
        String CitizensDeTar = "";
        String LiveWorkNearby = "";
        String FamilyFriend = "";
        String FamilyFriend_text = "";
        String UrgentCare = "";
        String UrgentCare_text = "";
        String NewspaperMagazine = "";
        String NewspaperMagazine_text = "";
        String School = "";
        String School_text = "";
        String Hotel = "";
        String Hotel_text = "";
        String MFPhysician = "";
        String GuarantorChk = "";
        String Guarantor = "";
        String GuarantorDOB = "";
        String GuarantorSEX = "";
        String GuarantorSSN = "";
        String GuarantorAddress = "";
        String GuarantorPhoneNumber = "";
        String GuarantorEmployer = "";
        String GuarantorEmployerAreaCode = "";
        String GuarantorEmployerPhNumber = "";
        String GuarantorEmployerAddress = "";
        String GuarantorEmployerAddress2 = "";
        String GuarantorEmployerCity = "";
        String GuarantorEmployerState = "";
        String GuarantorEmployerZipCode = "";
        int WorkersCompPolicyChk = 0;
        String WorkCompPolicyStr = "";
        String WCPDateofInjury = "";
        String WCPCaseNo = "";
        String WCPGroupNo = "";
        String WCPMemberId = "";
        String WCPInjuryRelatedAutoMotorAccident = "";
        String WCPInjuryRelatedWorkRelated = "";
        String WCPInjuryRelatedOtherAccident = "";
        String WCPInjuryRelatedNoAccident = "";
        String WCPInjuryOccurVehicle = "";
        String WCPInjuryOccurWork = "";
        String WCPInjuryOccurHome = "";
        String WCPInjuryOccurOther = "";
        String WCPInjuryDescription = "";
        String WCPHRFirstName = "";
        String WCPHRLastName = "";
        final String WCPHRAreaCode = "";
        String WCPHRPhoneNumber = "";
        String WCPHRAddress = "";
        final String WCPHRAddress2 = "";
        String WCPHRCity = "";
        String WCPHRState = "";
        String WCPHRZipCode = "";
        String WCPPlanName = "";
        String WCPCarrierName = "";
        final String WCPPayerAreaCode = "";
        String WCPPayerPhoneNumber = "";
        String WCPCarrierAddress = "";
        final String WCPCarrierAddress2 = "";
        String WCPCarrierCity = "";
        String WCPCarrierState = "";
        String WCPCarrierZipCode = "";
        String WCPAdjudicatorFirstName = "";
        String WCPAdjudicatorLastName = "";
        final String WCPAdjudicatorAreaCode = "";
        String WCPAdjudicatorPhoneNumber = "";
        final String WCPAdjudicatorFaxAreaCode = "";
        String WCPAdjudicatorFaxPhoneNumber = "";
        int MotorVehicleAccidentChk = 0;
        String MotorVehAccidentStr = "";
        String AutoInsuranceInformationChk = "0";
        String AIIDateofAccident = "";
        String AIIAutoClaim = "";
        String AIIAccidentLocationAddress = "";
        final String AIIAccidentLocationAddress2 = "";
        String AIIAccidentLocationCity = "";
        String AIIAccidentLocationState = "";
        String AIIAccidentLocationZipCode = "";
        String AIIRoleInAccident = "";
        String AIITypeOfAutoIOnsurancePolicy = "";
        String AIIPrefixforReponsibleParty = "";
        String AIIFirstNameforReponsibleParty = "";
        String AIIMiddleNameforReponsibleParty = "";
        String AIILastNameforReponsibleParty = "";
        String AIISuffixforReponsibleParty = "";
        String AIICarrierResponsibleParty = "";
        String AIICarrierResponsiblePartyAddress = "";
        final String AIICarrierResponsiblePartyAddress2 = "";
        String AIICarrierResponsiblePartyCity = "";
        String AIICarrierResponsiblePartyState = "";
        String AIICarrierResponsiblePartyZipCode = "";
        final String AIICarrierResponsiblePartyAreaCode = "";
        String AIICarrierResponsiblePartyPhoneNumber = "";
        String AIICarrierResponsiblePartyPolicyNumber = "";
        String AIIResponsiblePartyAutoMakeModel = "";
        String AIIResponsiblePartyLicensePlate = "";
        String AIIFirstNameOfYourPolicyHolder = "";
        String AIILastNameOfYourPolicyHolder = "";
        String AIINameAutoInsuranceOfYourVehicle = "";
        String AIIYourInsuranceAddress = "";
        final String AIIYourInsuranceAddress2 = "";
        String AIIYourInsuranceCity = "";
        String AIIYourInsuranceState = "";
        String AIIYourInsuranceZipCode = "";
        final String AIIYourInsuranceAreaCode = "";
        String AIIYourInsurancePhoneNumber = "";
        String AIIYourInsurancePolicyNo = "";
        String AIIYourLicensePlate = "";
        String AIIYourCarMakeModelYear = "";
        int HealthInsuranceChk = 0;
        String GovtFundedInsurancePlanChk = "";
        int GFIPMedicare = 0;
        int GFIPMedicaid = 0;
        int GFIPCHIP = 0;
        int GFIPTricare = 0;
        int GFIPVHA = 0;
        int GFIPIndianHealth = 0;
        String InsuranceSubPatient = null;
        String InsuranceSubGuarantor = null;
        String InsuranceSubOther = null;
        String HIPrimaryInsurance = "";
        String HISubscriberFirstName = "";
        String HISubscriberLastName = "";
        String HISubscriberDOB = "";
        String HISubscriberSSN = "";
        String HISubscriberRelationtoPatient = "";
        String HISubscriberGroupNo = "";
        String HISubscriberPolicyNo = "";
        String SecondHealthInsuranceChk = "";
        String SHISecondaryName = "";
        String SHISubscriberFirstName = "";
        String SHISubscriberLastName = "";
        final String SHISubscriberDOB = "";
        String SHISubscriberRelationtoPatient = "";
        String SHISubscriberGroupNo = "";
        String SHISubscriberPolicyNo = "";
        int SelfPayChk = 0;
        String FirstNameNoSpaces = "";
        String LastNameNoSpace = "";
        String CityStateZip = "";
        final String Country = "";
        String MRN = "";
        int ClientIndex = 0;
        String ClientName = "";
        String DOS = "";
        String DoctorId = null;
        final String DoctorName = null;
        try {
            PreparedStatement ps = conn.prepareStatement("select date_format(now(),'%Y%m%d%H%i%s'), DATE_FORMAT(now(), '%m/%d/%Y'), DATE_FORMAT(now(), '%T')");
            rset = ps.executeQuery();
            if (rset.next()) {
                DateTime = rset.getString(1);
                Date = rset.getString(2);
                Time = rset.getString(3);
            }
            rset.close();
            ps.close();
            try {
                ps = conn.prepareStatement(" Select IFNULL(LastName,'-'), IFNULL(FirstName,'-'), IFNULL(MiddleInitial,'-'), IFNULL(Title,'-'), " +
                        "IFNULL(MaritalStatus, '-'),  IFNULL(DATE_FORMAT(DOB,'%m/%d/%Y'), '-'),  IFNULL(Age, '0'), IFNULL(Gender, '-'), IFNULL(Address,'-'), IFNULL(CONCAT(City,' / ', State, ' / ', ZipCode),'-'), IFNULL(PhNumber,'-'), IFNULL(SSN,'-'), IFNULL(Occupation,'-'), IFNULL(Employer,'-'), IFNULL(EmpContact,'-'), IFNULL(PriCarePhy,'-'), IFNULL(Email,'-'),  IFNULL(ReasonVisit,'-'), IFNULL(SelfPayChk,0), IFNULL(MRN,0), ClientIndex, IFNULL(DATE_FORMAT(DateofService,'%m/%d/%Y %T'),DATE_FORMAT(CreatedDate,'%m/%d/%Y %T')), IFNULL(DoctorsName,'-')  From " + Database + ".PatientReg Where ID = ?");
                ps.setInt(1, ID);
                rset = ps.executeQuery();
                while (rset.next()) {
                    PatientRegId = ID;
                    LastName = rset.getString(1).trim();
                    FirstName = rset.getString(2).trim();
                    FirstNameNoSpaces = FirstName.replaceAll("\\s+", "");
                    LastNameNoSpace = LastName.replaceAll(" ", "");
                    MiddleInitial = rset.getString(3).trim();
                    Title = rset.getString(4).trim();
                    MaritalStatus = rset.getString(5);
                    DOB = rset.getString(6);
                    Age = rset.getString(7);
                    gender = rset.getString(8);
                    Address = rset.getString(9);
                    CityStateZip = rset.getString(10);
                    PhNumber = rset.getString(11);
                    SSN = rset.getString(12);
                    Occupation = rset.getString(13);
                    Employer = rset.getString(14);
                    EmpContact = rset.getString(15);
                    PriCarePhy = rset.getString(16);
                    Email = rset.getString(17);
                    ReasonVisit = rset.getString(18);
                    SelfPayChk = rset.getInt(19);
                    MRN = rset.getString(20);
                    ClientIndex = rset.getInt(21);
                    DOS = rset.getString(22);
                    DoctorId = rset.getString(23);
                }
                rset.close();
                ps.close();
                ps = conn.prepareStatement("Select name from oe.clients where Id = ?");
                ps.setInt(1, ClientId);
                rset = ps.executeQuery();
                if (rset.next()) {
                    ClientName = rset.getString(1);
                }
                rset.close();
                ps.close();
            } catch (Exception e) {
                out.println("Error In PateintReg:--" + e.getMessage());
                out.println(Query);
            }
            ps = conn.prepareStatement("Select  Ethnicity,Ethnicity_OthersText,EmployementChk,Employer,Occupation,EmpContact,PrimaryCarePhysicianChk,PriCarePhy,ReasonVisit,PriCarePhyAddress,PriCarePhyCity,PriCarePhyState,PriCarePhyZipCode,PatientMinorChk,GuarantorChk,GuarantorEmployer,GuarantorEmployerPhNumber,GuarantorEmployerAddress,GuarantorEmployerCity,GuarantorEmployerState,GuarantorEmployerZipCode,CreatedDate,WorkersCompPolicyChk,MotorVehicleAccidentChk,HealthInsuranceChk from " + Database + ".PatientReg_Details where PatientRegId = ? ");
            ps.setInt(1, ID);
            rset = ps.executeQuery();
            while (rset.next()) {
                Ethnicity = rset.getString(1);
                Ethnicity_OthersText = rset.getString(2);
                EmployementChk = rset.getString(3);
                Employer = rset.getString(4);
                Occupation = rset.getString(5);
                EmpContact = rset.getString(6);
                PrimaryCarePhysicianChk = rset.getString(7);
                PriCarePhy = rset.getString(8);
                if (ReasonVisit == null) {
                    ReasonVisit = rset.getString(9);
                }
                PriCarePhyAddress = rset.getString(10);
                PriCarePhyCity = rset.getString(11);
                PriCarePhyState = rset.getString(12);
                PriCarePhyZipCode = rset.getString(13);
                PatientMinorChk = rset.getString(14);
                GuarantorChk = rset.getString(15);
                GuarantorEmployer = rset.getString(16);
                GuarantorEmployerPhNumber = rset.getString(17);
                GuarantorEmployerAddress = rset.getString(18);
                GuarantorEmployerCity = rset.getString(19);
                GuarantorEmployerState = rset.getString(20);
                GuarantorEmployerZipCode = rset.getString(21);
                WorkersCompPolicyChk = rset.getInt(23);
                MotorVehicleAccidentChk = rset.getInt(24);
                HealthInsuranceChk = rset.getInt(25);
            }
            rset.close();
            ps.close();
            if (WorkersCompPolicyChk == 1) {
                try {
                    ps = conn.prepareStatement("Select IFNULL(DATE_FORMAT(WCPDateofInjury,'%m/%d/%Y'),''), IFNULL(WCPCaseNo,''), IFNULL(WCPGroupNo,''), IFNULL(WCPMemberId,''), IFNULL(WCPInjuryRelatedAutoMotorAccident,''), IFNULL(WCPInjuryRelatedWorkRelated,''), IFNULL(WCPInjuryRelatedOtherAccident,''), IFNULL(WCPInjuryRelatedNoAccident,''), IFNULL(WCPInjuryOccurVehicle,''), IFNULL(WCPInjuryOccurWork,''), IFNULL(WCPInjuryOccurHome,''), IFNULL(WCPInjuryOccurOther,''), IFNULL(WCPInjuryDescription,''), IFNULL(WCPHRFirstName,''), IFNULL(WCPHRLastName,''), IFNULL(WCPHRPhoneNumber,''), IFNULL(WCPHRAddress,''), IFNULL(WCPHRCity,''), IFNULL(WCPHRState,''), IFNULL(WCPHRZipCode,''), IFNULL(WCPPlanName,''), IFNULL(WCPCarrierName,''), IFNULL(WCPPayerPhoneNumber,''), IFNULL(WCPCarrierAddress,''), IFNULL(WCPCarrierCity,''), IFNULL(WCPCarrierState,''), IFNULL(WCPCarrierZipCode,''), IFNULL(WCPAdjudicatorFirstName,''), IFNULL(WCPAdjudicatorLastName,''), IFNULL(WCPAdjudicatorPhoneNumber,''), IFNULL(WCPAdjudicatorFaxPhoneNumber,'') from " + Database + ".Patient_WorkCompPolicy where PatientRegId = ?");
                    ps.setInt(1, ID);
                    rset = ps.executeQuery();
                    if (rset.next()) {
                        WCPDateofInjury = rset.getString(1);
                        WCPCaseNo = rset.getString(2);
                        WCPGroupNo = rset.getString(3);
                        WCPMemberId = rset.getString(4);
                        WCPInjuryRelatedAutoMotorAccident = rset.getString(5);
                        WCPInjuryRelatedWorkRelated = rset.getString(6);
                        WCPInjuryRelatedOtherAccident = rset.getString(7);
                        WCPInjuryRelatedNoAccident = rset.getString(8);
                        WCPInjuryOccurVehicle = rset.getString(9);
                        WCPInjuryOccurWork = rset.getString(10);
                        WCPInjuryOccurHome = rset.getString(11);
                        WCPInjuryOccurOther = rset.getString(12);
                        WCPInjuryDescription = rset.getString(13);
                        WCPHRFirstName = rset.getString(14);
                        WCPHRLastName = rset.getString(15);
                        WCPHRPhoneNumber = rset.getString(16);
                        WCPHRAddress = rset.getString(17);
                        WCPHRCity = rset.getString(18);
                        WCPHRState = rset.getString(19);
                        WCPHRZipCode = rset.getString(20);
                        WCPPlanName = rset.getString(21);
                        WCPCarrierName = rset.getString(22);
                        WCPPayerPhoneNumber = rset.getString(23);
                        WCPCarrierAddress = rset.getString(24);
                        WCPCarrierCity = rset.getString(25);
                        WCPCarrierState = rset.getString(26);
                        WCPCarrierZipCode = rset.getString(27);
                        WCPAdjudicatorFirstName = rset.getString(28);
                        WCPAdjudicatorLastName = rset.getString(29);
                        WCPAdjudicatorPhoneNumber = rset.getString(30);
                        WCPAdjudicatorFaxPhoneNumber = rset.getString(31);
                    }
                    rset.close();
                    ps.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_WorkCompPolicy");
                    Services.DumException("DownloadBundle", "GetINput Victoria", request, e, this.getServletContext());
                }
            }
            if (MotorVehicleAccidentChk == 1) {
                try {
                    ps = conn.prepareStatement("Select IFNULL(AutoInsuranceInformationChk,'0'), IFNULL(DATE_FORMAT(AIIDateofAccident,'%m/%d/%Y'),''), IFNULL(AIIAutoClaim,''), IFNULL(AIIAccidentLocationAddress,''), IFNULL(AIIAccidentLocationCity,''), IFNULL(AIIAccidentLocationState,''), IFNULL(AIIAccidentLocationZipCode,''), IFNULL(AIIRoleInAccident,''), IFNULL(AIITypeOfAutoIOnsurancePolicy,''), IFNULL(AIIPrefixforReponsibleParty,''), IFNULL(AIIFirstNameforReponsibleParty,''), IFNULL(AIIMiddleNameforReponsibleParty,''), IFNULL(AIILastNameforReponsibleParty,''), IFNULL(AIISuffixforReponsibleParty,''), IFNULL(AIICarrierResponsibleParty,''), IFNULL(AIICarrierResponsiblePartyAddress,''), IFNULL(AIICarrierResponsiblePartyCity,''), IFNULL(AIICarrierResponsiblePartyState,''), IFNULL(AIICarrierResponsiblePartyZipCode,''), IFNULL(AIICarrierResponsiblePartyPhoneNumber,''), IFNULL(AIICarrierResponsiblePartyPolicyNumber,''), IFNULL(AIIResponsiblePartyAutoMakeModel,''), IFNULL(AIIResponsiblePartyLicensePlate,''), IFNULL(AIIFirstNameOfYourPolicyHolder,''), IFNULL(AIILastNameOfYourPolicyHolder,''), IFNULL(AIINameAutoInsuranceOfYourVehicle,''), IFNULL(AIIYourInsuranceAddress,''), IFNULL(AIIYourInsuranceCity,''), IFNULL(AIIYourInsuranceState,''), IFNULL(AIIYourInsuranceZipCode,''), IFNULL(AIIYourInsurancePhoneNumber,''),IFNULL(AIIYourInsurancePolicyNo,''), IFNULL(AIIYourLicensePlate,''), IFNULL(AIIYourCarMakeModelYear,'') from " + Database + ".Patient_AutoInsuranceInfo where PatientRegId = ?");
                    ps.setInt(1, ID);
                    rset = ps.executeQuery();
                    if (rset.next()) {
                        AutoInsuranceInformationChk = rset.getString(1);
                        AIIDateofAccident = rset.getString(2);
                        AIIAutoClaim = rset.getString(3);
                        AIIAccidentLocationAddress = rset.getString(4);
                        AIIAccidentLocationCity = rset.getString(5);
                        AIIAccidentLocationState = rset.getString(6);
                        AIIAccidentLocationZipCode = rset.getString(7);
                        AIIRoleInAccident = rset.getString(8);
                        AIITypeOfAutoIOnsurancePolicy = rset.getString(9);
                        AIIPrefixforReponsibleParty = rset.getString(10);
                        AIIFirstNameforReponsibleParty = rset.getString(11);
                        AIIMiddleNameforReponsibleParty = rset.getString(12);
                        AIILastNameforReponsibleParty = rset.getString(13);
                        AIISuffixforReponsibleParty = rset.getString(14);
                        AIICarrierResponsibleParty = rset.getString(15);
                        AIICarrierResponsiblePartyAddress = rset.getString(16);
                        AIICarrierResponsiblePartyCity = rset.getString(17);
                        AIICarrierResponsiblePartyState = rset.getString(18);
                        AIICarrierResponsiblePartyZipCode = rset.getString(19);
                        AIICarrierResponsiblePartyPhoneNumber = rset.getString(20);
                        AIICarrierResponsiblePartyPolicyNumber = rset.getString(21);
                        AIIResponsiblePartyAutoMakeModel = rset.getString(22);
                        AIIResponsiblePartyLicensePlate = rset.getString(23);
                        AIIFirstNameOfYourPolicyHolder = rset.getString(24);
                        AIILastNameOfYourPolicyHolder = rset.getString(25);
                        AIINameAutoInsuranceOfYourVehicle = rset.getString(26);
                        AIIYourInsuranceAddress = rset.getString(27);
                        AIIYourInsuranceCity = rset.getString(28);
                        AIIYourInsuranceState = rset.getString(29);
                        AIIYourInsuranceZipCode = rset.getString(30);
                        AIIYourInsurancePhoneNumber = rset.getString(31);
                        AIIYourInsurancePolicyNo = rset.getString(32);
                        AIIYourLicensePlate = rset.getString(33);
                        AIIYourCarMakeModelYear = rset.getString(34);
                    }
                    rset.close();
                    ps.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_AutoInsuranceInfo");
                    Services.DumException("DownloadBundle", "GetINput Victoria", request, e, this.getServletContext());
                }
            }
            if (HealthInsuranceChk == 1) {
                try {
                    ps = conn.prepareStatement("Select IFNULL(GovtFundedInsurancePlanChk,'0'), IFNULL(GFIPMedicare,'0'), IFNULL(GFIPMedicaid,'0'), IFNULL(GFIPCHIP,'0'), IFNULL(GFIPTricare,'0'), IFNULL(GFIPVHA,'0'), IFNULL(GFIPIndianHealth,'0'), IFNULL(InsuranceSubPatient,''), IFNULL(InsuranceSubGuarantor,''), IFNULL(InsuranceSubOther,''), IFNULL(HIPrimaryInsurance,''), IFNULL(HISubscriberFirstName,''), IFNULL(HISubscriberLastName,''), IFNULL(HISubscriberDOB,''), IFNULL(HISubscriberSSN,''), IFNULL(HISubscriberRelationtoPatient,''), IFNULL(HISubscriberGroupNo,''), IFNULL(HISubscriberPolicyNo,''), IFNULL(SecondHealthInsuranceChk,''), IFNULL(SHISecondaryName,''), IFNULL(SHISubscriberFirstName,''), IFNULL(SHISubscriberLastName,''), IFNULL(SHISubscriberRelationtoPatient,''), IFNULL(SHISubscriberGroupNo,''), IFNULL(SHISubscriberPolicyNo,'')  from " + Database + ".Patient_HealthInsuranceInfo where PatientRegId = ?");
                    ps.setInt(1, ID);
                    rset = ps.executeQuery();
                    if (rset.next()) {
                        GovtFundedInsurancePlanChk = rset.getString(1);
                        GFIPMedicare = rset.getInt(2);
                        GFIPMedicaid = rset.getInt(3);
                        GFIPCHIP = rset.getInt(4);
                        GFIPTricare = rset.getInt(5);
                        GFIPVHA = rset.getInt(6);
                        GFIPIndianHealth = rset.getInt(7);
                        InsuranceSubPatient = rset.getString(8);
                        InsuranceSubGuarantor = rset.getString(9);
                        InsuranceSubOther = rset.getString(10);
                        HIPrimaryInsurance = rset.getString(11);
                        HISubscriberFirstName = rset.getString(12);
                        HISubscriberLastName = rset.getString(13);
                        HISubscriberDOB = rset.getString(14);
                        HISubscriberSSN = rset.getString(15);
                        HISubscriberRelationtoPatient = rset.getString(16);
                        HISubscriberGroupNo = rset.getString(17);
                        HISubscriberPolicyNo = rset.getString(18);
                        SecondHealthInsuranceChk = rset.getString(19);
                        SHISecondaryName = rset.getString(20);
                        SHISubscriberFirstName = rset.getString(21);
                        SHISubscriberLastName = rset.getString(22);
                        SHISubscriberRelationtoPatient = rset.getString(23);
                        SHISubscriberGroupNo = rset.getString(24);
                        SHISubscriberPolicyNo = rset.getString(25);
                    }
                    rset.close();
                    ps.close();
                } catch (Exception e) {
                    System.out.println("Error in Getting Data from Patient_HealthInsuraneInfo");
                    Services.DumException("DownloadBundle", "GetINput Victoria", request, e, this.getServletContext());
                }
            }
            if (Ethnicity.equals("1")) {
                Ethnicity = "Hispanic";
            } else if (Ethnicity.equals("2")) {
                Ethnicity = "Non-Hispanic";
            } else if (Ethnicity.equals("3")) {
                Ethnicity = "Unknown";
            }
            if (GuarantorChk.equals("1")) {
                Guarantor = "The Patient";
                GuarantorDOB = DOB;
                GuarantorSEX = gender;
                GuarantorSSN = SSN;
                GuarantorAddress = Address + "";
                GuarantorPhoneNumber = "" + PhNumber;
            } else if (GuarantorChk.equals("2")) {
                Guarantor = "Legal Guardian";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            } else if (GuarantorChk.equals("3")) {
                Guarantor = "Patient Parent";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            } else if (GuarantorChk.equals("2")) {
                Guarantor = "Spouse/Partner";
                GuarantorDOB = "-";
                GuarantorSEX = "-";
                GuarantorSSN = "-";
                GuarantorAddress = "-";
                GuarantorPhoneNumber = "-";
            }
            if (WorkersCompPolicyChk == 1) {
                WorkCompPolicyStr = "Yes";
            } else {
                WorkCompPolicyStr = "No";
            }
            if (MotorVehicleAccidentChk == 1) {
                MotorVehAccidentStr = "Yes";
            } else {
                MotorVehAccidentStr = "No";
            }
            if (HISubscriberDOB.equals("00/00/0000")) {
                HISubscriberDOB = "";
            }
            if (WCPDateofInjury.equals("00/00/0000")) {
                WCPDateofInjury = "";
            }
            if (AIIDateofAccident.equals("00/00/0000")) {
                AIIDateofAccident = "";
            }
            ps = conn.prepareStatement(" Select CASE WHEN MFFirstVisit = 1 THEN 'YES' ELSE '' END,  CASE WHEN MFReturnPat = 1 THEN 'YES' ELSE '' END,  CASE WHEN MFInternetFind = 1 THEN 'YES' ELSE '' END,  CASE WHEN Facebook = 1 THEN 'YES' ELSE '' END,  CASE WHEN MapSearch = 1 THEN 'YES' ELSE '' END,  CASE WHEN GoogleSearch = 1 THEN 'YES' ELSE '' END,  CASE WHEN VERWebsite = 1 THEN 'YES' ELSE '' END,  CASE WHEN WebsiteAds = 1 THEN 'YES' ELSE '' END, CASE WHEN OnlineReviews = 1 THEN 'YES' ELSE '' END, CASE WHEN Twitter = 1 THEN 'YES' ELSE '' END, CASE WHEN LinkedIn = 1 THEN 'YES' ELSE '' END, CASE WHEN EmailBlast = 1 THEN 'YES' ELSE '' END, CASE WHEN YouTube = 1 THEN 'YES' ELSE '' END, CASE WHEN TV = 1 THEN 'YES' ELSE '' END, CASE WHEN Billboard = 1 THEN 'YES' ELSE '' END, CASE WHEN Radio = 1 THEN 'YES' ELSE '' END, CASE WHEN Brochure = 1 THEN 'YES' ELSE '' END, CASE WHEN DirectMail = 1 THEN 'YES' ELSE '' END, CASE WHEN CitizensDeTar = 1 THEN 'YES' ELSE '' END, CASE WHEN LiveWorkNearby = 1 THEN 'YES' ELSE '' END, CASE WHEN FamilyFriend = 1 THEN 'YES' ELSE '' END, IFNULL(FamilyFriend_text,''),  CASE WHEN UrgentCare = 1 THEN 'YES' ELSE '' END, IFNULL(UrgentCare_text,''),  CASE WHEN NewspaperMagazine = 1 THEN 'YES' ELSE '' END, IFNULL(NewspaperMagazine_text,''),  CASE WHEN School = 1 THEN 'YES' ELSE '' END, IFNULL(School_text,''),  CASE WHEN Hotel = 1 THEN 'YES' ELSE '' END, IFNULL(Hotel_text,''), IFNULL(MFPhysician,'')  FROM " + Database + ".MarketingInfo WHERE PatientRegId = ?");
            ps.setInt(1, ID);
            rset = ps.executeQuery();
            if (rset.next()) {
                MFFirstVisit = rset.getString(1);
                MFReturnPat = rset.getString(2);
                MFInternetFind = rset.getString(3);
                Facebook = rset.getString(4);
                MapSearch = rset.getString(5);
                GoogleSearch = rset.getString(6);
                VERWebsite = rset.getString(7);
                WebsiteAds = rset.getString(8);
                OnlineReviews = rset.getString(9);
                Twitter = rset.getString(10);
                LinkedIn = rset.getString(11);
                EmailBlast = rset.getString(12);
                YouTube = rset.getString(13);
                TV = rset.getString(14);
                Billboard = rset.getString(15);
                Radio = rset.getString(16);
                Brochure = rset.getString(17);
                DirectMail = rset.getString(18);
                CitizensDeTar = rset.getString(19);
                LiveWorkNearby = rset.getString(20);
                FamilyFriend = rset.getString(21);
                FamilyFriend_text = rset.getString(22);
                UrgentCare = rset.getString(23);
                UrgentCare_text = rset.getString(24);
                NewspaperMagazine = rset.getString(25);
                NewspaperMagazine_text = rset.getString(26);
                School = rset.getString(27);
                School_text = rset.getString(28);
                Hotel = rset.getString(29);
                Hotel_text = rset.getString(30);
                MFPhysician = rset.getString(31);
            }
            rset.close();
            ps.close();

            String UID = "";
            Image SignImages = null;
            final File tmpDir = new File("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
            final boolean exists = tmpDir.exists();
            if (exists) {
                ps = conn.prepareStatement("Select UID from " + Database + ".SignRequest where PatientRegId = ?");
                ps.setInt(1, ID);
                rset = ps.executeQuery();
                if (rset.next()) {
                    UID = rset.getString(1);
                }
                rset.close();
                ps.close();

                SignImages = Image.getInstance("/sftpdrive/AdmissionBundlePdf/SignImg/" + DirectoryName + "/img_0_" + ID + ".png");
                SignImages.scaleAbsolute(80.0f, 30.0f);
                //outputFilePath = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/" + FirstNameNoSpaces + LastName + ID + "_" + UID + "_.pdf";
            } else {
                SignImages = null;
            }

            String inputFilePathTmp = "";
            String outputFilePathTmp = "";
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/ABNformEnglish.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf";
            OutputStream fos1 = new FileOutputStream(new File(outputFilePathTmp));
            PdfReader pdfReader1 = new PdfReader(inputFilePathTmp);
            PdfStamper pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(110.0f, 80.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0f, 80.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(100.0f, 120.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0f, 120.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(110.0f, 210.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(410.0f, 210.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_QUESTIONNAIRE.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);


                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 700.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 675.0f);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 650.0f);
                    pdfContentByte.showText(WCPMemberId);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 630.0f);
                    pdfContentByte.showText(WCPGroupNo);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 610.0f);
                    pdfContentByte.showText(WCPDateofInjury);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 585.0f);
                    pdfContentByte.showText(WCPCaseNo);
                    pdfContentByte.endText();
                    if (WCPInjuryRelatedAutoMotorAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(175.0f, 535.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(175.0f, 535.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedWorkRelated.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(275.0f, 535.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(275.0f, 535.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedOtherAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(380.0f, 535.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(380.0f, 535.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryRelatedNoAccident.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(475.0f, 535.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(475.0f, 535.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurVehicle.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(220.0f, 515.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(220.0f, 515.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurWork.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(280.0f, 515.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(280.0f, 515.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurHome.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(340.0f, 515.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(340.0f, 515.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryOccurOther.equals("1")) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400.0f, 515.0f);
                        pdfContentByte.showText("Yes");
                        pdfContentByte.endText();
                    } else {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(400.0f, 515.0f);
                        pdfContentByte.showText("");
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() <= 114) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 450.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 114 && WCPInjuryDescription.length() <= 228) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 450.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 435.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 228 && WCPInjuryDescription.length() <= 342) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 450.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 435.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 420.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 342 && WCPInjuryDescription.length() <= 456) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 450.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 435.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 420.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, 342));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 408.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(342, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    if (WCPInjuryDescription.length() > 456) {
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 450.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(0, 114));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 435.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(114, 228));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 420.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(228, 342));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 408.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(342, 456));
                        pdfContentByte.endText();
                        pdfContentByte.beginText();
                        pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                        pdfContentByte.setColorFill(BaseColor.BLACK);
                        pdfContentByte.setTextMatrix(60.0f, 393.0f);
                        pdfContentByte.showText(WCPInjuryDescription.substring(456, WCPInjuryDescription.length()));
                        pdfContentByte.endText();
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 350.0f);
                    pdfContentByte.showText(WCPHRFirstName + " " + WCPHRLastName + " / " + WCPHRPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 325.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90.0f, 300.0f);
                    pdfContentByte.showText(WCPHRAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0f, 280.0f);
                    pdfContentByte.showText(WCPHRCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(230.0f, 280.0f);
                    pdfContentByte.showText(WCPHRState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(80.0f, 260.0f);
                    pdfContentByte.showText(WCPHRZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 350.0f);
                    pdfContentByte.showText(WCPPlanName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 325.0f);
                    pdfContentByte.showText(WCPCarrierName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 300.0f);
                    pdfContentByte.showText(WCPPayerPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0f, 280.0f);
                    pdfContentByte.showText(WCPCarrierAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(370.0f, 260.0f);
                    pdfContentByte.showText(WCPCarrierCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0f, 260.0f);
                    pdfContentByte.showText(WCPCarrierState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 235.0f);
                    pdfContentByte.showText(WCPCarrierZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0f, 210.0f);
                    pdfContentByte.showText(WCPAdjudicatorFirstName + " " + WCPAdjudicatorLastName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0f, 185.0f);
                    pdfContentByte.showText(WCPAdjudicatorPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(100.0f, 165.0f);
                    pdfContentByte.showText(WCPAdjudicatorFaxPhoneNumber);
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(200.0f, 140.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 140.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(380.0f, 120.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/WC_MVA_assignmentofproceeds.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(55.0f, 625.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0f, 447.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0f, 130.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0f, 80.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0f, 710.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0f, 680.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0f, 630.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(45.0f, 480.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0f, 355.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(110.0f, 280.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 280.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MVA_ASSIGNMENTOFPROCEEDS.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 2) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(60.0f, 355.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(110.0f, 290.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 290.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MVACLAIMFORM.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0f, 640.0f);
                    pdfContentByte.showText(DOS);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0f, 620.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(430.0f, 620.0f);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0f, 595.0f);
                    pdfContentByte.showText(Address);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(440.0f, 595.0f);
                    pdfContentByte.showText(PhNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 570.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(290.0f, 570.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 570.0f);
                    pdfContentByte.showText("");
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(130.0f, 545.0f);
                    pdfContentByte.showText(AIIAutoClaim);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0f, 522.0f);
                    pdfContentByte.showText(AIIDateofAccident);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(165.0f, 500.0f);
                    pdfContentByte.showText(AIIAccidentLocationAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(300.0f, 500.0f);
                    pdfContentByte.showText(AIIAccidentLocationCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 500.0f);
                    pdfContentByte.showText(AIIAccidentLocationState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(470.0f, 500.0f);
                    pdfContentByte.showText(AIIAccidentLocationZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(145.0f, 452.0f);
                    pdfContentByte.showText(AIIRoleInAccident);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0f, 352.0f);
                    pdfContentByte.showText(AIITypeOfAutoIOnsurancePolicy);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 320.0f);
                    pdfContentByte.showText(AIIPrefixforReponsibleParty + " " + AIIFirstNameforReponsibleParty + " " + AIIMiddleNameforReponsibleParty + " " + AIILastNameforReponsibleParty + " " + AIISuffixforReponsibleParty);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(280.0f, 300.0f);
                    pdfContentByte.showText(AIICarrierResponsibleParty);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(170.0f, 280.0f);
                    pdfContentByte.showText(AIICarrierResponsiblePartyAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 255.0f);
                    pdfContentByte.showText(AIICarrierResponsiblePartyCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0f, 255.0f);
                    pdfContentByte.showText(AIICarrierResponsiblePartyState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 255.0f);
                    pdfContentByte.showText(AIICarrierResponsiblePartyZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0f, 230.0f);
                    pdfContentByte.showText(AIICarrierResponsiblePartyPhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0f, 210.0f);
                    pdfContentByte.showText(AIICarrierResponsiblePartyPolicyNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 210.0f);
                    pdfContentByte.showText(AIIResponsiblePartyLicensePlate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(240.0f, 190.0f);
                    pdfContentByte.showText(AIIResponsiblePartyAutoMakeModel);
                    pdfContentByte.endText();
                }
                if (i == 2) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(210.0f, 680.0f);
                    pdfContentByte.showText(AIIFirstNameOfYourPolicyHolder + " " + AIILastNameOfYourPolicyHolder);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(250.0f, 650.0f);
                    pdfContentByte.showText(AIINameAutoInsuranceOfYourVehicle);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(200.0f, 630.0f);
                    pdfContentByte.showText(AIIYourInsuranceAddress);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(140.0f, 610.0f);
                    pdfContentByte.showText(AIIYourInsuranceCity);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(270.0f, 610.0f);
                    pdfContentByte.showText(AIIYourInsuranceState);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 610.0f);
                    pdfContentByte.showText(AIIYourInsuranceZipCode);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(180.0f, 585.0f);
                    pdfContentByte.showText(AIIYourInsurancePhoneNumber);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(160.0f, 565.0f);
                    pdfContentByte.showText(AIIYourInsurancePolicyNo);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(400.0f, 565.0f);
                    pdfContentByte.showText(AIIYourLicensePlate);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(260.0f, 545.0f);
                    pdfContentByte.showText(AIIYourCarMakeModelYear);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            inputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/Medicalreleaseform.pdf";
            outputFilePathTmp = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf";
            fos1 = new FileOutputStream(new File(outputFilePathTmp));
            pdfReader1 = new PdfReader(inputFilePathTmp);
            pdfStamper1 = new PdfStamper(pdfReader1, fos1);
            for (int i = 1; i <= pdfReader1.getNumberOfPages(); ++i) {
                if (i == 1) {
                    final PdfContentByte pdfContentByte = pdfStamper1.getOverContent(i);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(350.0f, 180.0f);
                        pdfContentByte.addImage(SignImages);
                    }
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 570.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 552.0f);
                    pdfContentByte.showText(SSN);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(390.0f, 535.0f);
                    pdfContentByte.showText(DOB);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(500.0f, 180.0f);
                    pdfContentByte.showText(Date);
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(350.0f, 140.0f);
                    pdfContentByte.showText(LastName + ", " + FirstName);
                    pdfContentByte.endText();
                }
            }
            pdfStamper1.close();
            String inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/UHCINSAPPEALFORMS.pdf";
            String outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf";
            FileOutputStream fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            PdfReader pdfReader2 = new PdfReader(inputFilePathTmp2);
            PdfStamper pdfStamper2 = new PdfStamper(pdfReader2, (OutputStream) fos2);
            for (int j = 1; j <= pdfReader2.getNumberOfPages(); ++j) {
                if (j == 1) {
                    final PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(160.0f, 690.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0f, 665.0f);
                    pdfContentByte2.showText(HISubscriberLastName + ", " + HISubscriberFirstName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0f, 640.0f);
                    pdfContentByte2.showText(WCPMemberId);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(140.0f, 595.0f);
                    pdfContentByte2.showText("Victoria ED");
                    pdfContentByte2.endText();
                }
                if (j == 2) {
                    final PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(90.0f, 470.0f);
                    pdfContentByte2.showText(LastName + ", " + FirstName);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/MEDICAIDSELFPAYAGREEMENT.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, (OutputStream) fos2);
            for (int j = 1; j <= pdfReader2.getNumberOfPages(); ++j) {
                if (j == 1) {
                    final PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(175.0f, 90.0f);
                        pdfContentByte2.addImage(SignImages);
                    }
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(475.0f, 90.0f);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/FINANCIAL_HARDSHIP_RELIEF.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, (OutputStream) fos2);
            for (int j = 1; j <= pdfReader2.getNumberOfPages(); ++j) {
                if (j == 1) {
                    final PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(150.0f, 640.0f);
                    pdfContentByte2.showText(LastName + ", " + FirstName);
                    pdfContentByte2.endText();


                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(420.0f, 640.0f);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(170.0f, 610.0f);
                    pdfContentByte2.showText(HISubscriberRelationtoPatient);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(430.0f, 610.0f);
                    pdfContentByte2.showText(HISubscriberFirstName + " " + HISubscriberLastName);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(250.0f, 580.0f);
                    pdfContentByte2.showText(DOS);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0f, 520.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0f, 520.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0f, 492.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0f, 492.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0f, 462.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0f, 462.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(35.0f, 432.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0f, 432.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(252.0f, 392.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(110.0f, 290.0f);
                        pdfContentByte2.addImage(SignImages);
                    }
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(342.0f, 290.0f);
                    pdfContentByte2.showText(Date);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/Marketing_Slips.pdf";
            outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Marketing_Slips_" + ClientId + "_" + MRN + ".pdf";
            fos2 = new FileOutputStream(new File(outputFilePathTmp2));
            pdfReader2 = new PdfReader(inputFilePathTmp2);
            pdfStamper2 = new PdfStamper(pdfReader2, (OutputStream) fos2);
            for (int j = 1; j <= pdfReader2.getNumberOfPages(); ++j) {
                if (j == 1) {
                    final PdfContentByte pdfContentByte2 = pdfStamper2.getOverContent(j);
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(155.0f, 698.0f);
                    pdfContentByte2.showText(MFFirstVisit);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(405.0f, 698.0f);
                    pdfContentByte2.showText(MFReturnPat);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(182.0f, 677.0f);
                    pdfContentByte2.showText(MFInternetFind);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 630.0f);
                    pdfContentByte2.showText(Facebook);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 630.0f);
                    pdfContentByte2.showText(TV);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 618.0f);
                    pdfContentByte2.showText(MapSearch);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 618.0f);
                    pdfContentByte2.showText(Billboard);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 605.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 605.0f);
                    pdfContentByte2.showText(Radio);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 590.0f);
                    pdfContentByte2.showText(GoogleSearch);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 590.0f);
                    pdfContentByte2.showText(FamilyFriend);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(370.0f, 590.0f);
                    pdfContentByte2.showText(FamilyFriend_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 575.0f);
                    pdfContentByte2.showText(YouTube);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 575.0f);
                    pdfContentByte2.showText(Brochure);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 562.0f);
                    pdfContentByte2.showText(WebsiteAds);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 562.0f);
                    pdfContentByte2.showText(DirectMail);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 550.0f);
                    pdfContentByte2.showText(LinkedIn);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 550.0f);
                    pdfContentByte2.showText(UrgentCare);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(370.0f, 550.0f);
                    pdfContentByte2.showText(UrgentCare_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 535.0f);
                    pdfContentByte2.showText(Twitter);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 535.0f);
                    pdfContentByte2.showText(School);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(370.0f, 535.0f);
                    pdfContentByte2.showText(School_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 522.0f);
                    pdfContentByte2.showText(OnlineReviews);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 522.0f);
                    pdfContentByte2.showText(NewspaperMagazine);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0f, 522.0f);
                    pdfContentByte2.showText(NewspaperMagazine_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(20.0f, 510.0f);
                    pdfContentByte2.showText(EmailBlast);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 510.0f);
                    pdfContentByte2.showText(Hotel);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(340.0f, 510.0f);
                    pdfContentByte2.showText(Hotel_text);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 495.0f);
                    pdfContentByte2.showText(CitizensDeTar);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 483.0f);
                    pdfContentByte2.showText(LiveWorkNearby);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(270.0f, 470.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(400.0f, 470.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(310.0f, 440.0f);
                    pdfContentByte2.showText("");
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(80.0f, 426.0f);
                    pdfContentByte2.showText(MFPhysician);
                    pdfContentByte2.endText();
                    pdfContentByte2.beginText();
                    pdfContentByte2.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte2.setColorFill(BaseColor.BLACK);
                    pdfContentByte2.setTextMatrix(290.0f, 426.0f);
                    pdfContentByte2.showText(PhNumber);
                    pdfContentByte2.endText();
                }
            }
            pdfStamper2.close();
            ResultPdf = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/GeneralForm_Victoria.pdf";
            if (WorkersCompPolicyChk == 1) {
                Query = "Select WCPInjuryRelatedAutoMotorAccident, WCPInjuryOccurVehicle from " + Database + ".Patient_WorkCompPolicy where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    WCPInjuryRelatedAutoMotorAccident = rset.getString(1);
                    WCPInjuryOccurVehicle = rset.getString(2);
                }
                rset.close();
                stmt.close();
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/GeneralForm_Victoria.pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                if (WCPInjuryRelatedAutoMotorAccident.equals("1") || WCPInjuryOccurVehicle.equals("1")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf", "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            if (WorkersCompPolicyChk == 0 && MotorVehicleAccidentChk == 1) {
                mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            }
            if (MotorVehicleAccidentChk == 1) {
                Query = "Select AutoInsuranceInformationChk from " + Database + ".Patient_AutoInsuranceInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    AutoInsuranceInformationChk = rset.getString(1);
                }
                rset.close();
                stmt.close();
                if (AutoInsuranceInformationChk.equals("1")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            if (HealthInsuranceChk == 1) {
                Query = "Select GFIPMedicare,GFIPMedicaid,GFIPCHIP,GFIPTricare,GFIPVHA,GFIPIndianHealth, GovtFundedInsurancePlanChk,IFNULL(HIPrimaryInsurance,''),IFNULL(HISubscriberFirstName,''), IFNULL(HISubscriberLastName,''), IFNULL(DATE_FORMAT(HISubscriberDOB,'%m/%d/%Y'),''), IFNULL(HISubscriberSSN,''), IFNULL(HISubscriberRelationtoPatient,''), IFNULL(HISubscriberGroupNo,''), IFNULL(HISubscriberPolicyNo,''),IFNULL(SHISecondaryName,''), IFNULL(SHISubscriberFirstName,''), IFNULL(SHISubscriberLastName,''), IFNULL(SHISubscriberRelationtoPatient,''), IFNULL(SHISubscriberGroupNo,''), IFNULL(SHISubscriberPolicyNo,'') from " + Database + ".Patient_HealthInsuranceInfo where PatientRegId = " + ID;
                stmt = conn.createStatement();
                rset = stmt.executeQuery(Query);
                while (rset.next()) {
                    GFIPMedicare = rset.getInt(1);
                    GFIPMedicaid = rset.getInt(2);
                    GFIPCHIP = rset.getInt(3);
                    GFIPTricare = rset.getInt(4);
                    GFIPVHA = rset.getInt(5);
                    GFIPIndianHealth = rset.getInt(6);
                    GovtFundedInsurancePlanChk = rset.getString(7);
                    HIPrimaryInsurance = rset.getString(8);
                    HISubscriberFirstName = rset.getString(9);
                    HISubscriberLastName = rset.getString(10);
                    HISubscriberDOB = rset.getString(11);
                    HISubscriberSSN = rset.getString(12);
                    HISubscriberRelationtoPatient = rset.getString(13);
                    HISubscriberGroupNo = rset.getString(14);
                    HISubscriberPolicyNo = rset.getString(15);
                    SHISecondaryName = rset.getString(16);
                    SHISubscriberFirstName = rset.getString(17);
                    SHISubscriberLastName = rset.getString(18);
                    SHISubscriberRelationtoPatient = rset.getString(19);
                    SHISubscriberGroupNo = rset.getString(20);
                    SHISubscriberPolicyNo = rset.getString(21);
                }
                rset.close();
                stmt.close();
                if (GovtFundedInsurancePlanChk.equals("1")) {
                    if (GFIPMedicaid == 1 || GFIPCHIP == 1) {
                        mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                        ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                    }
                    if (GFIPMedicare == 1) {
                        mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                        ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                    }
                }
                if (HIPrimaryInsurance.trim().toUpperCase().equals("UNITED HEALTHCARE")) {
                    mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
                    ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
                }
            }
            if (HISubscriberDOB.equals("00/00/0000")) {
                HISubscriberDOB = "";
            }
            if (WCPDateofInjury.equals("00/00/0000")) {
                WCPDateofInjury = "";
            }
            if (AIIDateofAccident.equals("00/00/0000")) {
                AIIDateofAccident = "";
            }
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";
            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Marketing_Slips_" + ClientId + "_" + MRN + ".pdf", ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf";


            if (HIPrimaryInsurance.contains("UNITED HEALTHCARE")) {
//                System.out.println("HIPrimaryInsurance -> "+HIPrimaryInsurance);

                inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/Commercial-Courtesy-Review-Auth-Form.pdf";
                outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Commercial-Courtesy-Review-Auth-Form_" + ClientId + "_" + MRN + ".pdf";

                ResultPdf = AttachUHC_Form(HISubscriberPolicyNo, HISubscriberDOB, HISubscriberFirstName + " " + HISubscriberLastName, DOS, HISubscriberRelationtoPatient, Date, outputFilePathTmp2, inputFilePathTmp2,
                        request, response, out, conn, Database, ResultPdf, DirectoryName, ClientId, MRN, mergePdf);
            }
//            System.out.println("SHIPrimaryInsurance -> "+SHISecondaryName);
            if (SHISecondaryName.contains("UNITED HEALTHCARE")) {
                inputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/Commercial-Courtesy-Review-Auth-Form.pdf";
                outputFilePathTmp2 = "/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Commercial-Courtesy-Review-Auth-Form_" + ClientId + "_" + MRN + ".pdf";
                ResultPdf = AttachUHC_Form(SHISubscriberPolicyNo, SHISubscriberDOB, SHISubscriberFirstName + " " + SHISubscriberLastName, DOS, SHISubscriberRelationtoPatient, Date, outputFilePathTmp2, inputFilePathTmp2,
                        request, response, out, conn, Database, ResultPdf, DirectoryName, ClientId, MRN, mergePdf);
            }

            String DOSDate = "";
            String DOSTime = "";
            DOSDate = DOS.substring(0, 10);
            DOSTime = DOS.substring(11, 19);
            String inputFilePath = "";
            inputFilePath = ResultPdf;

            int found = 0;
            Query = "Select Count(*) from " + Database + ".BundleHistory where PatientRegId=" + PatientRegId;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                found = rset.getInt(1);
            }
            stmt.close();
            rset.close();
            String filename = null;

            filename = FirstNameNoSpaces + "_" + PatientRegId + "_" + found + "_" + SignedFrom + ".pdf";


            final String outputFilePath = "/sftpdrive/AdmissionBundlePdf/Victoria/" + filename;
            final OutputStream fos3 = new FileOutputStream(new File(outputFilePath));
            final PdfReader pdfReader3 = new PdfReader(inputFilePath);
            final PdfStamper pdfStamper3 = new PdfStamper(pdfReader3, fos3);


            int pageCount = pdfReader3.getNumberOfPages();
            for (int k = 1; k <= pdfReader3.getNumberOfPages(); ++k) {
                if (k == 1) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(390.0f, 668.0f);
                    pdfContentByte3.showText(DOSDate);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(490.0f, 668.0f);
                    pdfContentByte3.showText(DOSTime);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 600.0f);
                    pdfContentByte3.showText(LastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(200.0f, 600.0f);
                    pdfContentByte3.showText(FirstName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(390.0f, 608.0f);
                    pdfContentByte3.showText(Title);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0f, 608.0f);
                    pdfContentByte3.showText(MaritalStatus);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 9.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 570.0f);
                    pdfContentByte3.showText(Address);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(300.0f, 570.0f);
                    pdfContentByte3.showText(CityStateZip);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(450.0f, 570.0f);
                    pdfContentByte3.showText(PhNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 540.0f);
                    pdfContentByte3.showText(SSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 540.0f);
                    pdfContentByte3.showText(DOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0f, 540.0f);
                    pdfContentByte3.showText(Age);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0f, 540.0f);
                    pdfContentByte3.showText(gender);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(435.0f, 540.0f);
                    pdfContentByte3.showText(Email);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 515.0f);
                    pdfContentByte3.showText(Ethnicity);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 515.0f);
                    pdfContentByte3.showText(Employer);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 515.0f);
                    pdfContentByte3.showText(Occupation);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 490.0f);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 490.0f);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 490.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 470.0f);
                    pdfContentByte3.showText(PriCarePhy);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0f, 465.0f);
                    pdfContentByte3.showText(ReasonVisit);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 395.0f);
                    pdfContentByte3.showText(Guarantor);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(290.0f, 395.0f);
                    pdfContentByte3.showText(GuarantorDOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(360.0f, 395.0f);
                    pdfContentByte3.showText(GuarantorSEX);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(425.0f, 395.0f);
                    pdfContentByte3.showText(GuarantorSSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 365.0f);
                    pdfContentByte3.showText(GuarantorAddress);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(320.0f, 365.0f);
                    pdfContentByte3.showText(GuarantorPhoneNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 335.0f);
                    pdfContentByte3.showText(GuarantorEmployer);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 335.0f);
                    pdfContentByte3.showText("" + GuarantorEmployerPhNumber);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 335.0f);
                    pdfContentByte3.showText(GuarantorEmployerAddress + "  " + GuarantorEmployerCity + " " + GuarantorEmployerState);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 310.0f);
                    pdfContentByte3.showText(WorkCompPolicyStr);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 310.0f);
                    pdfContentByte3.showText(MotorVehAccidentStr);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 310.0f);
                    pdfContentByte3.showText(AIIDateofAccident);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(100.0f, 285.0f);
                    pdfContentByte3.showText(HIPrimaryInsurance);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 260.0f);
                    pdfContentByte3.showText(HISubscriberFirstName + " " + HISubscriberLastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(290.0f, 260.0f);
                    pdfContentByte3.showText(HISubscriberDOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 260.0f);
                    pdfContentByte3.showText(HISubscriberSSN);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 244.0f);
                    pdfContentByte3.showText(HISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 235.0f);
                    pdfContentByte3.showText(HISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 235.0f);
                    pdfContentByte3.showText(HISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 205.0f);
                    pdfContentByte3.showText(SHISecondaryName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(50.0f, 180.0f);
                    pdfContentByte3.showText(SHISubscriberFirstName + " " + SHISubscriberLastName);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 180.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 180.0f);
                    pdfContentByte3.showText("-");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 170.0f);
                    pdfContentByte3.showText(SHISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 160.0f);
                    pdfContentByte3.showText(SHISubscriberGroupNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 160.0f);
                    pdfContentByte3.showText(SHISubscriberPolicyNo);
                    pdfContentByte3.endText();

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(150, 80.0f);
                        pdfContentByte3.addImage(SignImages);
                    }

                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(410.0f, 80.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 2) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(150, 145.0f);
                        pdfContentByte3.addImage(SignImages);
                    }

                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(350.0f, 145.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(350.0f, 105.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 4) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(70.0f, 350.0f);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();

                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(70.0f, 270.0f);
                        pdfContentByte3.addImage(SignImages);
                    }

                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0f, 270.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 5) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(150.0f, 70.0f);
                        pdfContentByte3.addImage(SignImages);
                    }
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(420.0f, 70.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 6) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(430.0f, 290.0f);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();


                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(120.0f, 360.0f);
                        pdfContentByte3.addImage(SignImages);
                    }
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(440.0f, 360.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 7) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(120.0f, 590.0f);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(300.0f, 590.0f);
                    pdfContentByte3.showText(DOB);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(485.0f, 590.0f);
                    pdfContentByte3.showText(HISubscriberRelationtoPatient);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 565.0f);
                    pdfContentByte3.showText(HIPrimaryInsurance);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 540.0f);
                    pdfContentByte3.showText(HISubscriberPolicyNo);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 520.0f);
                    pdfContentByte3.showText(DOS);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(150.0f, 420.0f);
                    pdfContentByte3.showText(FirstName + " " + LastName + " " + MiddleInitial);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(380.0f, 420.0f);
                    pdfContentByte3.showText("Victoria ED");
                    pdfContentByte3.endText();


                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(100.0f, 160.0f);
                        pdfContentByte3.addImage(SignImages);
                    }
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(440.0f, 160.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 8) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(220.0f, 425.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(155.0f, 400.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(410.0f, 400.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(155.0f, 380.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 380.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(115.0f, 158.0f);
                    pdfContentByte3.showText("");
                    pdfContentByte3.endText();
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(140.0f, 130.0f);
                        pdfContentByte3.addImage(SignImages);
                    }
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 130.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(400.0f, 100.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
                if (k == 9) {
                    final PdfContentByte pdfContentByte3 = pdfStamper3.getOverContent(k);
                    if (SignImages != null) {
                        SignImages.setAbsolutePosition(100.0f, 150.0f);
                        pdfContentByte3.addImage(SignImages);
                    }
                    pdfContentByte3.beginText();
                    pdfContentByte3.setFontAndSize(BaseFont.createFont("Times-Roman", "Cp1257", true), 10.0f);
                    pdfContentByte3.setColorFill(BaseColor.BLACK);
                    pdfContentByte3.setTextMatrix(230.0f, 150.0f);
                    pdfContentByte3.showText(Date);
                    pdfContentByte3.endText();
                }
            }
            pdfStamper3.close();
            pdfStamper2.close();
            pdfStamper1.close();
            pdfReader1.close();
            pdfReader2.close();
            pdfReader3.close();

//            if (SignedFrom.contains("SIGNED")) {
            PreparedStatement MainReceipt = conn.prepareStatement(
                    "INSERT INTO " + Database + ".BundleHistory (MRN ,PatientRegId ,BundleName ,CreatedDate,PgCount)" +
                            " VALUES (? ,? ,? ,now(),?) ");
            MainReceipt.setString(1, MRN);
            MainReceipt.setInt(2, ID);
            MainReceipt.setString(3, filename);
            MainReceipt.setInt(4, pdfReader3.getNumberOfPages());
            MainReceipt.executeUpdate();
            MainReceipt.close();
//            }

//
//            Parsehtm Parser = new Parsehtm(request);
//            Parser.SetField("outputFilePath", outputFilePath);
////            Parser.SetField("imagelist", String.valueOf(imagelist));
//            Parser.SetField("pageCount", String.valueOf(pageCount));
//            Parser.SetField("PatientRegId", String.valueOf(ID));
//            Parser.SetField("FileName", FirstNameNoSpaces + LastNameNoSpace + ID + "_.pdf");
//            Parser.GenerateHtml(out, Services.GetHtmlPath(servletContext) + "Forms/DownloadBundleHTML.html");

//            final File pdfFile = new File(outputFilePath);
//            response.setContentType("application/pdf");
//            response.addHeader("Content-Disposition", "inline; filename=" + FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf");
//            response.setContentLength((int) pdfFile.length());
//            final FileInputStream fileInputStream = new FileInputStream(pdfFile);
//            final OutputStream responseOutputStream = (OutputStream) response.getOutputStream();
//            int bytes;
//            while ((bytes = fileInputStream.read()) != -1) {
//                responseOutputStream.write(bytes);
//            }
            File File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_QUESTIONNAIRE_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTODISCLOSEMEDICALINFORMATION_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_assignmentofproceeds_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/WC_MVA_AUTHORIZATIONTOOBTAININFORMATION_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVACLAIMFORM_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MVA_ASSIGNMENTOFPROCEEDS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/ABNformEnglish_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Medicalreleaseform_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/UHCINSAPPEALFORMS_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/MEDICAIDSELFPAYAGREEMENT_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/FINANCIAL_HARDSHIP_RELIEF_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Marketing_Slips_" + ClientId + "_" + MRN + ".pdf");
            File.delete();
            File = new File("/sftpdrive/AdmissionBundlePdf/Victoria/Result_" + ClientId + "_" + MRN + ".pdf");
            File.delete();


            return pageCount + "~" + outputFilePath + "~" + filename;//FirstNameNoSpaces + "_" + ID + "_" + DateTime + ".pdf";
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return "";
    }

    private String AttachUHC_Form(String MemID, String DOB, String Name, String DOS, String RelationtoPatient, String Date, String outputFilePath, String inputFile, HttpServletRequest request, HttpServletResponse response, PrintWriter out, Connection conn, String Database, String ResultPdf, String DirectoryName, int ClientId, String MRN, MergePdf mergePdf) throws IOException {
        try {
            FileOutputStream fos = new FileOutputStream(new File(outputFilePath));
            PdfReader pdfReader = new PdfReader(inputFile);
            PdfStamper pdfStamper = new PdfStamper(pdfReader, (OutputStream) fos);
            for (int j = 1; j <= pdfReader.getNumberOfPages(); ++j) {

                if (j == 1) {
                    PdfContentByte pdfContentByte = pdfStamper.getOverContent(j);

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(450, 678); // set x and y co-ordinates
                    pdfContentByte.showText(MemID);//"Member ID Number "); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(365, 678); // set x and y co-ordinates
                    pdfContentByte.showText(DOB);//"DOB"); // add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90, 678); // set x and y co-ordinates
                    pdfContentByte.showText(Name);//"Member Name "); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90, 573); // set x and y co-ordinates
                    pdfContentByte.showText(DOS);//"Date Of Service"); // add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(110, 535); // set x and y co-ordinates
                    pdfContentByte.showText(Name);//"Member Name"); //  PATIENT BEFORE add the text
                    pdfContentByte.endText();

                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(460, 140); // set x and y co-ordinates
                    pdfContentByte.showText(Date);//"Date"); // Other (Please Specify)   add the text
                    pdfContentByte.endText();
                    pdfContentByte.beginText();
                    pdfContentByte.setFontAndSize(BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1257, BaseFont.EMBEDDED), 10); // set fonts zine and name
                    pdfContentByte.setColorFill(BaseColor.BLACK);
                    pdfContentByte.setTextMatrix(90, 98); // set x and y co-ordinates
                    pdfContentByte.showText(RelationtoPatient);//"Relation to Subscriber"); // Other (Please Specify)   add the text
                    pdfContentByte.endText();

                }
            }
            pdfStamper.close();

            mergePdf.GETINPUT(request, response, out, conn, Database, ResultPdf, outputFilePath/*"/sftpdrive/opt/apache-tomcat-8.5.61/webapps/oe/TemplatePdf/VictoriaPdf/TempDir/Commercial-Courtesy-Review-Auth-Form_" + ClientId + "_" + MRN + ".pdf"*/, ClientId, MRN);
            ResultPdf = "/sftpdrive/AdmissionBundlePdf/" + DirectoryName + "/Result_" + ClientId + "_" + MRN + ".pdf";

            return ResultPdf;
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        return null;
    }

    private void CheckRepeatPatient(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, String UserId, String Database, int ClientId) {
        try {
            Statement stmt = null;
            ResultSet rset = null;
            String Query = "";
            String FirstNameR = request.getParameter("FirstNameR").trim();
            String LastNameR = request.getParameter("LastNameR").trim();
            String DOBR = request.getParameter("DOBR").trim();
            String genderR = request.getParameter("genderR").trim();
            int ClientIndex = Integer.parseInt(request.getParameter("ClientIndex").trim());


            Query = "Select dbname from oe.clients where Id = " + ClientIndex;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                Database = rset.getString(1);
            rset.close();
            stmt.close();

            int PatientFound = 0;
            int PatRegIdx = 0;
            String FoundMRN = "";
            String FullName = "";
            Query = " Select COUNT(*), IFNULL(MRN,0),CONCAT(FirstName,' ',LastName),Id AS PatRegIdx " +
                    " from " + Database + ".PatientReg  " +
                    "where Status = 0 and " +
                    "ltrim(rtrim(UPPER(FirstName))) = ltrim(rtrim(UPPER('" + FirstNameR.trim() + "')))  and " +
                    "ltrim(rtrim(UPPER(LastName))) = ltrim(rtrim(UPPER('" + LastNameR.trim() + "'))) and " +
                    "ltrim(rtrim((DOB))) = '" + DOBR + "' AND " +
                    "ltrim(rtrim((Gender))) = '" + genderR + "' ";
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next()) {
                PatientFound = rset.getInt(1);
                FoundMRN = rset.getString(2);
                FullName = rset.getString(3);
                PatRegIdx = rset.getInt(4);
            }
            rset.close();
            stmt.close();

            //out.println(PatientFound + "|" +FullName);
            Parsehtm Parser = new Parsehtm(request);
            if (PatientFound > 0) {
                Parser.SetField("FullName", FullName);
                Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
                Parser.SetField("PatRegIdx", String.valueOf(PatRegIdx));
                Parser.SetField("FoundMRN", FoundMRN);
                Parser.GenerateHtml(out, Services.GetHtmlPath(getServletContext()) + "MasterDef/ExistingPatient.html");
            } else {
                Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
                Parser.GenerateHtml(out, Services.GetHtmlPath(getServletContext()) + "MasterDef/ExistingNotFoundPatient.html");
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void DisplayExistingPatient(HttpServletRequest request, PrintWriter out, Connection conn, ServletContext servletContext, String UserId, String Database, int ClientId) {
        try {
            Statement stmt = null;
            ResultSet rset = null;
            String Query = "";
            int ClientIndex = Integer.parseInt(request.getParameter("ClientIndex").trim());
            int PatRegIdx = Integer.parseInt(request.getParameter("PatRegIdx").trim());
            int FoundMRN = Integer.parseInt(request.getParameter("FoundMRN").trim());
            String FullName = request.getParameter("FullName").trim();

            StringBuilder TestList = new StringBuilder();
            StringBuilder LocationList = new StringBuilder();

            Query = "Select dbname from oe.clients where Id = " + ClientIndex;
            stmt = conn.createStatement();
            rset = stmt.executeQuery(Query);
            if (rset.next())
                Database = rset.getString(1);
            rset.close();
            stmt.close();


            Parsehtm Parser = new Parsehtm(request);
            Parser.SetField("FullName", FullName);
            Parser.SetField("ClientIndex", String.valueOf(ClientIndex));
            Parser.SetField("PatRegIdx", String.valueOf(PatRegIdx));
            Parser.SetField("FoundMRN", String.valueOf(FoundMRN));
            Parser.SetField("TestList", TestList.toString());
            Parser.SetField("LocationList", LocationList.toString());
            Parser.GenerateHtml(out, Services.GetHtmlPath(getServletContext()) + "Forms/PRF_files/CovidRegExisting.html");
            out.close();
            out.flush();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }


}